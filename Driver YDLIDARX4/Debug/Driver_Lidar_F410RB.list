
Driver_Lidar_F410RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800ba90  0800ba90  0001ba90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c070  0800c070  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c078  0800c078  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c078  0800c078  0001c078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000072f4  200001d8  0800c258  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200074cc  0800c258  000274cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155ae  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039fa  00000000  00000000  000357f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  000391f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f71  00000000  00000000  0003a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017e99  00000000  00000000  0003b571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018457  00000000  00000000  0005340a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008aa53  00000000  00000000  0006b861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006844  00000000  00000000  000f62b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fcaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba78 	.word	0x0800ba78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800ba78 	.word	0x0800ba78

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_DMA_Init+0x68>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <MX_DMA_Init+0x68>)
 8001040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_DMA_Init+0x68>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_DMA_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <MX_DMA_Init+0x68>)
 800105c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <MX_DMA_Init+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2105      	movs	r1, #5
 8001072:	2011      	movs	r0, #17
 8001074:	f001 f890 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001078:	2011      	movs	r0, #17
 800107a:	f001 f8a9 	bl	80021d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	203a      	movs	r0, #58	; 0x3a
 8001084:	f001 f888 	bl	8002198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001088:	203a      	movs	r0, #58	; 0x3a
 800108a:	f001 f8a1 	bl	80021d0 <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80010ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <vApplicationGetIdleTaskMemory+0x30>)
 80010b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001f8 	.word	0x200001f8
 80010cc:	2000024c 	.word	0x2000024c

080010d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <MX_FREERTOS_Init+0x30>)
 80010d8:	1d3c      	adds	r4, r7, #4
 80010da:	461d      	mov	r5, r3
 80010dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fd26 	bl	8004b3e <osThreadCreate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a03      	ldr	r2, [pc, #12]	; (8001104 <MX_FREERTOS_Init+0x34>)
 80010f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001100:	0800ba9c 	.word	0x0800ba9c
 8001104:	200001f4 	.word	0x200001f4

08001108 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f003 fd60 	bl	8004bd6 <osDelay>
 8001116:	e7fb      	b.n	8001110 <StartDefaultTask+0x8>

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a2c      	ldr	r2, [pc, #176]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a25      	ldr	r2, [pc, #148]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0xd4>)
 80011a4:	f001 fd06 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0xd8>)
 80011c0:	f001 fb84 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_GPIO_Init+0xd4>)
 80011dc:	f001 fb76 	bl	80028cc <HAL_GPIO_Init>

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020800 	.word	0x40020800

080011f4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80011fc:	1d39      	adds	r1, r7, #4
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	2201      	movs	r2, #1
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <__io_putchar+0x20>)
 8001206:	f002 fc5c 	bl	8003ac2 <HAL_UART_Transmit>
	return chr;
 800120a:	687b      	ldr	r3, [r7, #4]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20002304 	.word	0x20002304

08001218 <uart_transmit>:
int uart_transmit(uint8_t *p_data, uint16_t size){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, p_data, size, HAL_MAX_DELAY);
 8001224:	887a      	ldrh	r2, [r7, #2]
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <uart_transmit+0x24>)
 800122e:	f002 fc48 	bl	8003ac2 <HAL_UART_Transmit>
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200022c0 	.word	0x200022c0

08001240 <uart_it_transmit>:
int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(&huart1, p_data, size);
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	461a      	mov	r2, r3
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <uart_it_transmit+0x24>)
 8001254:	f002 fd69 	bl	8003d2a <HAL_UART_Transmit_IT>
	return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200022c0 	.word	0x200022c0

08001268 <uart_dma_transmit>:
int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	461a      	mov	r2, r3
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <uart_dma_transmit+0x24>)
 800127c:	f002 fdca 	bl	8003e14 <HAL_UART_Transmit_DMA>
	return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200022c0 	.word	0x200022c0

08001290 <uart_poll_receive>:
int uart_poll_receive(uint8_t *p_data, uint16_t size){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive(&huart1, p_data, size, HAL_MAX_DELAY);
 800129c:	887a      	ldrh	r2, [r7, #2]
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <uart_poll_receive+0x24>)
 80012a6:	f002 fc9e 	bl	8003be6 <HAL_UART_Receive>
	return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200022c0 	.word	0x200022c0

080012b8 <uart_it_receive>:
int uart_it_receive(uint8_t *p_data, uint16_t size){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_IT(&huart1, p_data, size);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	461a      	mov	r2, r3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4804      	ldr	r0, [pc, #16]	; (80012dc <uart_it_receive+0x24>)
 80012cc:	f002 fd72 	bl	8003db4 <HAL_UART_Receive_IT>
	return 0;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200022c0 	.word	0x200022c0

080012e0 <uart_dma_receive>:
int uart_dma_receive(uint8_t *p_data, uint16_t size){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
	HAL_UART_Receive_DMA(&huart1, p_data, size);
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	461a      	mov	r2, r3
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <uart_dma_receive+0x24>)
 80012f4:	f002 fe0c 	bl	8003f10 <HAL_UART_Receive_DMA>
	return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200022c0 	.word	0x200022c0

08001308 <TaskLIDAR>:

void TaskLIDAR (void * pvParameters){
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8001310:	4b94      	ldr	r3, [pc, #592]	; (8001564 <TaskLIDAR+0x25c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe73 	bl	8005004 <xQueueSemaphoreTake>
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e17a      	b.n	800161a <TaskLIDAR+0x312>
			if(i==DATA_BUFF_SIZE/2){
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800132a:	d106      	bne.n	800133a <TaskLIDAR+0x32>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 800132c:	4b8e      	ldr	r3, [pc, #568]	; (8001568 <TaskLIDAR+0x260>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fe65 	bl	8005004 <xQueueSemaphoreTake>
			}
			//Réponce à la commande Scan
			if(i==0){
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d147      	bne.n	80013d0 <TaskLIDAR+0xc8>
				if((h_LIDAR.data_buff[i]==0xA5) && (h_LIDAR.data_buff[i+1]==0x5A) && (h_LIDAR.data_buff[i+2]==0x05) && (h_LIDAR.data_buff[i+3]==0x00) && (h_LIDAR.data_buff[i+4]==0x00) && (h_LIDAR.data_buff[i+5]==0x40) && (h_LIDAR.data_buff[i+6]==0x81)){
 8001340:	4a8a      	ldr	r2, [pc, #552]	; (800156c <TaskLIDAR+0x264>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	3371      	adds	r3, #113	; 0x71
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2ba5      	cmp	r3, #165	; 0xa5
 800134c:	d140      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	4a86      	ldr	r2, [pc, #536]	; (800156c <TaskLIDAR+0x264>)
 8001354:	4413      	add	r3, r2
 8001356:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800135a:	2b5a      	cmp	r3, #90	; 0x5a
 800135c:	d138      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3302      	adds	r3, #2
 8001362:	4a82      	ldr	r2, [pc, #520]	; (800156c <TaskLIDAR+0x264>)
 8001364:	4413      	add	r3, r2
 8001366:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800136a:	2b05      	cmp	r3, #5
 800136c:	d130      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3303      	adds	r3, #3
 8001372:	4a7e      	ldr	r2, [pc, #504]	; (800156c <TaskLIDAR+0x264>)
 8001374:	4413      	add	r3, r2
 8001376:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800137a:	2b00      	cmp	r3, #0
 800137c:	d128      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	3304      	adds	r3, #4
 8001382:	4a7a      	ldr	r2, [pc, #488]	; (800156c <TaskLIDAR+0x264>)
 8001384:	4413      	add	r3, r2
 8001386:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800138a:	2b00      	cmp	r3, #0
 800138c:	d120      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3305      	adds	r3, #5
 8001392:	4a76      	ldr	r2, [pc, #472]	; (800156c <TaskLIDAR+0x264>)
 8001394:	4413      	add	r3, r2
 8001396:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800139a:	2b40      	cmp	r3, #64	; 0x40
 800139c:	d118      	bne.n	80013d0 <TaskLIDAR+0xc8>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3306      	adds	r3, #6
 80013a2:	4a72      	ldr	r2, [pc, #456]	; (800156c <TaskLIDAR+0x264>)
 80013a4:	4413      	add	r3, r2
 80013a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013aa:	2b81      	cmp	r3, #129	; 0x81
 80013ac:	d110      	bne.n	80013d0 <TaskLIDAR+0xc8>
					printf("Scan Command Reply\r\n");
 80013ae:	4870      	ldr	r0, [pc, #448]	; (8001570 <TaskLIDAR+0x268>)
 80013b0:	f006 fe8c 	bl	80080cc <puts>
					h_LIDAR.processing.idx=0;
 80013b4:	4b6d      	ldr	r3, [pc, #436]	; (800156c <TaskLIDAR+0x264>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e
					i=6;
 80013bc:	2306      	movs	r3, #6
 80013be:	60fb      	str	r3, [r7, #12]
					frame_start=7;
 80013c0:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <TaskLIDAR+0x26c>)
 80013c2:	2207      	movs	r2, #7
 80013c4:	601a      	str	r2, [r3, #0]
					frame_end=frame_start+4;
 80013c6:	4b6b      	ldr	r3, [pc, #428]	; (8001574 <TaskLIDAR+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3304      	adds	r3, #4
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <TaskLIDAR+0x270>)
 80013ce:	6013      	str	r3, [r2, #0]
				}
			}

			if(i==frame_start){
 80013d0:	4b68      	ldr	r3, [pc, #416]	; (8001574 <TaskLIDAR+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d109      	bne.n	80013ee <TaskLIDAR+0xe6>
				h_LIDAR.processing.PH=h_LIDAR.data_buff[i];
 80013da:	4a64      	ldr	r2, [pc, #400]	; (800156c <TaskLIDAR+0x264>)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	3371      	adds	r3, #113	; 0x71
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <TaskLIDAR+0x264>)
 80013e8:	f8a3 2844 	strh.w	r2, [r3, #2116]	; 0x844
 80013ec:	e112      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+1){
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <TaskLIDAR+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d111      	bne.n	800141e <TaskLIDAR+0x116>
				h_LIDAR.processing.PH=h_LIDAR.processing.PH|(h_LIDAR.data_buff[i]<<8);
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <TaskLIDAR+0x264>)
 80013fc:	f8b3 3844 	ldrh.w	r3, [r3, #2116]	; 0x844
 8001400:	b21a      	sxth	r2, r3
 8001402:	495a      	ldr	r1, [pc, #360]	; (800156c <TaskLIDAR+0x264>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	440b      	add	r3, r1
 8001408:	3371      	adds	r3, #113	; 0x71
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	b29a      	uxth	r2, r3
 8001416:	4b55      	ldr	r3, [pc, #340]	; (800156c <TaskLIDAR+0x264>)
 8001418:	f8a3 2844 	strh.w	r2, [r3, #2116]	; 0x844
 800141c:	e0fa      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+2){
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <TaskLIDAR+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	429a      	cmp	r2, r3
 8001428:	d108      	bne.n	800143c <TaskLIDAR+0x134>
				h_LIDAR.processing.CT=h_LIDAR.data_buff[i];
 800142a:	4a50      	ldr	r2, [pc, #320]	; (800156c <TaskLIDAR+0x264>)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	3371      	adds	r3, #113	; 0x71
 8001432:	781a      	ldrb	r2, [r3, #0]
 8001434:	4b4d      	ldr	r3, [pc, #308]	; (800156c <TaskLIDAR+0x264>)
 8001436:	f883 2846 	strb.w	r2, [r3, #2118]	; 0x846
 800143a:	e0eb      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+3){
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <TaskLIDAR+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3303      	adds	r3, #3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d115      	bne.n	8001474 <TaskLIDAR+0x16c>
				frame_end=frame_start+9+2*h_LIDAR.data_buff[i];
 8001448:	4b4a      	ldr	r3, [pc, #296]	; (8001574 <TaskLIDAR+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f103 0209 	add.w	r2, r3, #9
 8001450:	4946      	ldr	r1, [pc, #280]	; (800156c <TaskLIDAR+0x264>)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	440b      	add	r3, r1
 8001456:	3371      	adds	r3, #113	; 0x71
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	4a46      	ldr	r2, [pc, #280]	; (8001578 <TaskLIDAR+0x270>)
 8001460:	6013      	str	r3, [r2, #0]
				h_LIDAR.processing.LSN=h_LIDAR.data_buff[i];
 8001462:	4a42      	ldr	r2, [pc, #264]	; (800156c <TaskLIDAR+0x264>)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	3371      	adds	r3, #113	; 0x71
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <TaskLIDAR+0x264>)
 800146e:	f883 2847 	strb.w	r2, [r3, #2119]	; 0x847
 8001472:	e0cf      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+4){
 8001474:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <TaskLIDAR+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3304      	adds	r3, #4
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d109      	bne.n	8001494 <TaskLIDAR+0x18c>
				h_LIDAR.processing.FSA=h_LIDAR.data_buff[i];
 8001480:	4a3a      	ldr	r2, [pc, #232]	; (800156c <TaskLIDAR+0x264>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4413      	add	r3, r2
 8001486:	3371      	adds	r3, #113	; 0x71
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <TaskLIDAR+0x264>)
 800148e:	f8a3 2848 	strh.w	r2, [r3, #2120]	; 0x848
 8001492:	e0bf      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+5){
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <TaskLIDAR+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3305      	adds	r3, #5
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d111      	bne.n	80014c4 <TaskLIDAR+0x1bc>
				h_LIDAR.processing.FSA=h_LIDAR.processing.FSA|(h_LIDAR.data_buff[i]<<8);
 80014a0:	4b32      	ldr	r3, [pc, #200]	; (800156c <TaskLIDAR+0x264>)
 80014a2:	f8b3 3848 	ldrh.w	r3, [r3, #2120]	; 0x848
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	4930      	ldr	r1, [pc, #192]	; (800156c <TaskLIDAR+0x264>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	440b      	add	r3, r1
 80014ae:	3371      	adds	r3, #113	; 0x71
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <TaskLIDAR+0x264>)
 80014be:	f8a3 2848 	strh.w	r2, [r3, #2120]	; 0x848
 80014c2:	e0a7      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+6){
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <TaskLIDAR+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3306      	adds	r3, #6
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d109      	bne.n	80014e4 <TaskLIDAR+0x1dc>
				h_LIDAR.processing.LSA=h_LIDAR.data_buff[i];
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <TaskLIDAR+0x264>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4413      	add	r3, r2
 80014d6:	3371      	adds	r3, #113	; 0x71
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <TaskLIDAR+0x264>)
 80014de:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
 80014e2:	e097      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+7){
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <TaskLIDAR+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3307      	adds	r3, #7
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d111      	bne.n	8001514 <TaskLIDAR+0x20c>
				h_LIDAR.processing.LSA=h_LIDAR.processing.LSA|(h_LIDAR.data_buff[i]<<8);
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <TaskLIDAR+0x264>)
 80014f2:	f8b3 384a 	ldrh.w	r3, [r3, #2122]	; 0x84a
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	491c      	ldr	r1, [pc, #112]	; (800156c <TaskLIDAR+0x264>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	440b      	add	r3, r1
 80014fe:	3371      	adds	r3, #113	; 0x71
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	b29a      	uxth	r2, r3
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <TaskLIDAR+0x264>)
 800150e:	f8a3 284a 	strh.w	r2, [r3, #2122]	; 0x84a
 8001512:	e07f      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+8){
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <TaskLIDAR+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3308      	adds	r3, #8
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	429a      	cmp	r2, r3
 800151e:	d109      	bne.n	8001534 <TaskLIDAR+0x22c>
				h_LIDAR.processing.CS=h_LIDAR.data_buff[i];
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <TaskLIDAR+0x264>)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4413      	add	r3, r2
 8001526:	3371      	adds	r3, #113	; 0x71
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b29a      	uxth	r2, r3
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <TaskLIDAR+0x264>)
 800152e:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
 8001532:	e06f      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else if(i==frame_start+9){
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <TaskLIDAR+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3309      	adds	r3, #9
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d11d      	bne.n	800157c <TaskLIDAR+0x274>
				h_LIDAR.processing.CS=h_LIDAR.processing.CS|(h_LIDAR.data_buff[i]<<8);
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <TaskLIDAR+0x264>)
 8001542:	f8b3 384c 	ldrh.w	r3, [r3, #2124]	; 0x84c
 8001546:	b21a      	sxth	r2, r3
 8001548:	4908      	ldr	r1, [pc, #32]	; (800156c <TaskLIDAR+0x264>)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	440b      	add	r3, r1
 800154e:	3371      	adds	r3, #113	; 0x71
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21b      	sxth	r3, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <TaskLIDAR+0x264>)
 800155e:	f8a3 284c 	strh.w	r2, [r3, #2124]	; 0x84c
 8001562:	e057      	b.n	8001614 <TaskLIDAR+0x30c>
 8001564:	2000226c 	.word	0x2000226c
 8001568:	20002270 	.word	0x20002270
 800156c:	2000044c 	.word	0x2000044c
 8001570:	0800bab8 	.word	0x0800bab8
 8001574:	20002264 	.word	0x20002264
 8001578:	20002268 	.word	0x20002268
			}
			else if(i==frame_end){
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <TaskLIDAR+0x38c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	429a      	cmp	r2, r3
 8001584:	d132      	bne.n	80015ec <TaskLIDAR+0x2e4>
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8001586:	4b44      	ldr	r3, [pc, #272]	; (8001698 <TaskLIDAR+0x390>)
 8001588:	f893 384e 	ldrb.w	r3, [r3, #2126]	; 0x84e
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	b2d1      	uxtb	r1, r2
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <TaskLIDAR+0x390>)
 8001592:	f882 184e 	strb.w	r1, [r2, #2126]	; 0x84e
 8001596:	4619      	mov	r1, r3
 8001598:	4a3f      	ldr	r2, [pc, #252]	; (8001698 <TaskLIDAR+0x390>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	3371      	adds	r3, #113	; 0x71
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <TaskLIDAR+0x390>)
 80015a4:	440b      	add	r3, r1
 80015a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015aa:	331f      	adds	r3, #31
 80015ac:	701a      	strb	r2, [r3, #0]
				if(frame_end-frame_start>11){
 80015ae:	4b39      	ldr	r3, [pc, #228]	; (8001694 <TaskLIDAR+0x38c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <TaskLIDAR+0x394>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b0b      	cmp	r3, #11
 80015ba:	dd08      	ble.n	80015ce <TaskLIDAR+0x2c6>
					LIDAR_process_frame(&h_LIDAR); //On récupère les différents points
 80015bc:	4836      	ldr	r0, [pc, #216]	; (8001698 <TaskLIDAR+0x390>)
 80015be:	f005 fc07 	bl	8006dd0 <LIDAR_process_frame>
					medianFilter(&h_LIDAR); //On filtre ces points
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <TaskLIDAR+0x390>)
 80015c4:	f005 fd68 	bl	8007098 <medianFilter>
					find_clusters(&h_LIDAR); //On regroupe ces points
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <TaskLIDAR+0x390>)
 80015ca:	f005 fcad 	bl	8006f28 <find_clusters>
				}
				h_LIDAR.processing.idx=0;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <TaskLIDAR+0x390>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 284e 	strb.w	r2, [r3, #2126]	; 0x84e
				frame_start=frame_end+1;
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <TaskLIDAR+0x38c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a2f      	ldr	r2, [pc, #188]	; (800169c <TaskLIDAR+0x394>)
 80015de:	6013      	str	r3, [r2, #0]
				frame_end=frame_start+5;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <TaskLIDAR+0x394>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3305      	adds	r3, #5
 80015e6:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <TaskLIDAR+0x38c>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e013      	b.n	8001614 <TaskLIDAR+0x30c>
			}
			else{
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <TaskLIDAR+0x390>)
 80015ee:	f893 384e 	ldrb.w	r3, [r3, #2126]	; 0x84e
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	b2d1      	uxtb	r1, r2
 80015f6:	4a28      	ldr	r2, [pc, #160]	; (8001698 <TaskLIDAR+0x390>)
 80015f8:	f882 184e 	strb.w	r1, [r2, #2126]	; 0x84e
 80015fc:	4619      	mov	r1, r3
 80015fe:	4a26      	ldr	r2, [pc, #152]	; (8001698 <TaskLIDAR+0x390>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	3371      	adds	r3, #113	; 0x71
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	4b23      	ldr	r3, [pc, #140]	; (8001698 <TaskLIDAR+0x390>)
 800160a:	440b      	add	r3, r1
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	331f      	adds	r3, #31
 8001612:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001620:	f6ff ae80 	blt.w	8001324 <TaskLIDAR+0x1c>
			}
		}
		frame_start=frame_start-DATA_BUFF_SIZE;
 8001624:	4b1d      	ldr	r3, [pc, #116]	; (800169c <TaskLIDAR+0x394>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800162c:	4a1b      	ldr	r2, [pc, #108]	; (800169c <TaskLIDAR+0x394>)
 800162e:	6013      	str	r3, [r2, #0]
		frame_end=frame_end-DATA_BUFF_SIZE;
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <TaskLIDAR+0x38c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001638:	4a16      	ldr	r2, [pc, #88]	; (8001694 <TaskLIDAR+0x38c>)
 800163a:	6013      	str	r3, [r2, #0]
//		printf("#\r\n");
//		for(int i=0 ; i<360/2 ; i++){
//			//printf("%d\r\n",h_LIDAR.processing.point_buff[2*i]); //On envoi les valeurs
//			//printf("%d\r\n",h_LIDAR.processing.filtred_buff[2*i]); //On envoi les valeurs filtrées
//		}
		printf("#\r\n"); //Envoi des clusters
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <TaskLIDAR+0x398>)
 800163e:	f006 fd45 	bl	80080cc <puts>
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	e01b      	b.n	8001680 <TaskLIDAR+0x378>
			printf("%d,%d\r\n",h_LIDAR.processing.clusters[i].angle_moyen,h_LIDAR.processing.clusters[i].distance_moyenne); //On envoi les valeurs
 8001648:	4913      	ldr	r1, [pc, #76]	; (8001698 <TaskLIDAR+0x390>)
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4613      	mov	r3, r2
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 800165a:	331c      	adds	r3, #28
 800165c:	6819      	ldr	r1, [r3, #0]
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <TaskLIDAR+0x390>)
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4403      	add	r3, r0
 800166c:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <TaskLIDAR+0x39c>)
 8001676:	f006 fcc3 	bl	8008000 <iprintf>
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <TaskLIDAR+0x390>)
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	f8d3 3e14 	ldr.w	r3, [r3, #3604]	; 0xe14
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbdb      	blt.n	8001648 <TaskLIDAR+0x340>
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8001690:	e63e      	b.n	8001310 <TaskLIDAR+0x8>
 8001692:	bf00      	nop
 8001694:	20002268 	.word	0x20002268
 8001698:	2000044c 	.word	0x2000044c
 800169c:	20002264 	.word	0x20002264
 80016a0:	0800bacc 	.word	0x0800bacc
 80016a4:	0800bad0 	.word	0x0800bad0

080016a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandleLIDAR = NULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016b2:	f000 fc53 	bl	8001f5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016b6:	f000 f877 	bl	80017a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016ba:	f7ff fd2d 	bl	8001118 <MX_GPIO_Init>
	MX_DMA_Init();
 80016be:	f7ff fcb7 	bl	8001030 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80016c2:	f000 fb15 	bl	8001cf0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80016c6:	f000 fae9 	bl	8001c9c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	h_LIDAR.serial_drv.transmit=uart_transmit;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <main+0xc8>)
 80016cc:	4a29      	ldr	r2, [pc, #164]	; (8001774 <main+0xcc>)
 80016ce:	601a      	str	r2, [r3, #0]
	h_LIDAR.serial_drv.it_transmit=uart_it_transmit;
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <main+0xc8>)
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <main+0xd0>)
 80016d4:	605a      	str	r2, [r3, #4]
	h_LIDAR.serial_drv.dma_transmit=uart_dma_transmit;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <main+0xc8>)
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <main+0xd4>)
 80016da:	609a      	str	r2, [r3, #8]
	h_LIDAR.serial_drv.poll_receive=uart_poll_receive;
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <main+0xc8>)
 80016de:	4a28      	ldr	r2, [pc, #160]	; (8001780 <main+0xd8>)
 80016e0:	60da      	str	r2, [r3, #12]
	h_LIDAR.serial_drv.it_receive=uart_it_receive;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <main+0xc8>)
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <main+0xdc>)
 80016e6:	611a      	str	r2, [r3, #16]
	h_LIDAR.serial_drv.dma_receive=uart_dma_receive;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <main+0xc8>)
 80016ea:	4a27      	ldr	r2, [pc, #156]	; (8001788 <main+0xe0>)
 80016ec:	615a      	str	r2, [r3, #20]

	printf("\r\n===== Driver_LIDAR =====\r\n");
 80016ee:	4827      	ldr	r0, [pc, #156]	; (800178c <main+0xe4>)
 80016f0:	f006 fcec 	bl	80080cc <puts>

	LIDAR_stop(&h_LIDAR);
 80016f4:	481e      	ldr	r0, [pc, #120]	; (8001770 <main+0xc8>)
 80016f6:	f005 f9c4 	bl	8006a82 <LIDAR_stop>
	HAL_Delay(1000);
 80016fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fe:	f000 fc6f 	bl	8001fe0 <HAL_Delay>
	LIDAR_get_info(&h_LIDAR);
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <main+0xc8>)
 8001704:	f005 f9d0 	bl	8006aa8 <LIDAR_get_info>
	LIDAR_get_health_stat(&h_LIDAR);
 8001708:	4819      	ldr	r0, [pc, #100]	; (8001770 <main+0xc8>)
 800170a:	f005 fad5 	bl	8006cb8 <LIDAR_get_health_stat>

	ret = xTaskCreate(TaskLIDAR,"TaskLIDAR",STACK_SIZE,(void *) NULL,1,&xHandleLIDAR);
 800170e:	463b      	mov	r3, r7
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	2301      	movs	r3, #1
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171c:	491c      	ldr	r1, [pc, #112]	; (8001790 <main+0xe8>)
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <main+0xec>)
 8001720:	f003 fe59 	bl	80053d6 <xTaskCreate>
 8001724:	6078      	str	r0, [r7, #4]
	if (ret != pdPASS)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d004      	beq.n	8001736 <main+0x8e>
	{
		printf("Error creating TaskLIDAR\r\n");
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <main+0xf0>)
 800172e:	f006 fccd 	bl	80080cc <puts>
		Error_Handler();
 8001732:	f000 f8f9 	bl	8001928 <Error_Handler>
	}
	printf("Task LIDAR created\r\n");
 8001736:	4819      	ldr	r0, [pc, #100]	; (800179c <main+0xf4>)
 8001738:	f006 fcc8 	bl	80080cc <puts>

	SemHalfCallBack = xSemaphoreCreateBinary();
 800173c:	2203      	movs	r2, #3
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f003 fb79 	bl	8004e38 <xQueueGenericCreate>
 8001746:	4603      	mov	r3, r0
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <main+0xf8>)
 800174a:	6013      	str	r3, [r2, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 800174c:	2203      	movs	r2, #3
 800174e:	2100      	movs	r1, #0
 8001750:	2001      	movs	r0, #1
 8001752:	f003 fb71 	bl	8004e38 <xQueueGenericCreate>
 8001756:	4603      	mov	r3, r0
 8001758:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <main+0xfc>)
 800175a:	6013      	str	r3, [r2, #0]

	LIDAR_start(&h_LIDAR);
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <main+0xc8>)
 800175e:	f005 f975 	bl	8006a4c <LIDAR_start>
	vTaskStartScheduler();
 8001762:	f003 ffa3 	bl	80056ac <vTaskStartScheduler>


	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001766:	f7ff fcb3 	bl	80010d0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800176a:	f003 f9e1 	bl	8004b30 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800176e:	e7fe      	b.n	800176e <main+0xc6>
 8001770:	2000044c 	.word	0x2000044c
 8001774:	08001219 	.word	0x08001219
 8001778:	08001241 	.word	0x08001241
 800177c:	08001269 	.word	0x08001269
 8001780:	08001291 	.word	0x08001291
 8001784:	080012b9 	.word	0x080012b9
 8001788:	080012e1 	.word	0x080012e1
 800178c:	0800bad8 	.word	0x0800bad8
 8001790:	0800baf4 	.word	0x0800baf4
 8001794:	08001309 	.word	0x08001309
 8001798:	0800bb00 	.word	0x0800bb00
 800179c:	0800bb1c 	.word	0x0800bb1c
 80017a0:	2000226c 	.word	0x2000226c
 80017a4:	20002270 	.word	0x20002270

080017a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	2234      	movs	r2, #52	; 0x34
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fdbc 	bl	8008334 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <SystemClock_Config+0xcc>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <SystemClock_Config+0xcc>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <SystemClock_Config+0xcc>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <SystemClock_Config+0xd0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <SystemClock_Config+0xd0>)
 80017f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <SystemClock_Config+0xd0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001804:	2301      	movs	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800180c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180e:	2302      	movs	r3, #2
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001818:	2304      	movs	r3, #4
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001824:	2304      	movs	r3, #4
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	4618      	mov	r0, r3
 8001832:	f001 fc2b 	bl	800308c <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x98>
	{
		Error_Handler();
 800183c:	f000 f874 	bl	8001928 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001840:	230f      	movs	r3, #15
 8001842:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001844:	2302      	movs	r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001856:	f107 0308 	add.w	r3, r7, #8
 800185a:	2103      	movs	r1, #3
 800185c:	4618      	mov	r0, r3
 800185e:	f001 f9c3 	bl	8002be8 <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001868:	f000 f85e 	bl	8001928 <Error_Handler>
	}
}
 800186c:	bf00      	nop
 800186e:	3750      	adds	r7, #80	; 0x50
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000

0800187c <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_UART_RxHalfCpltCallback+0x3c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f107 020c 	add.w	r2, r7, #12
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f003 fb29 	bl	8004eea <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_UART_RxHalfCpltCallback+0x32>
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_UART_RxHalfCpltCallback+0x40>)
 80018a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	f3bf 8f6f 	isb	sy
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000226c 	.word	0x2000226c
 80018bc:	e000ed04 	.word	0xe000ed04

080018c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_UART_RxCpltCallback+0x3c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 fb07 	bl	8004eea <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_UART_RxCpltCallback+0x32>
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_UART_RxCpltCallback+0x40>)
 80018e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	f3bf 8f6f 	isb	sy
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20002270 	.word	0x20002270
 8001900:	e000ed04 	.word	0xe000ed04

08001904 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a04      	ldr	r2, [pc, #16]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001916:	f000 fb43 	bl	8001fa0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40001000 	.word	0x40001000

08001928 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_MspInit+0x54>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_MspInit+0x54>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_MspInit+0x54>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_MspInit+0x54>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_MspInit+0x54>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_MspInit+0x54>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	210f      	movs	r1, #15
 8001976:	f06f 0001 	mvn.w	r0, #1
 800197a:	f000 fc0d 	bl	8002198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	; 0x38
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_InitTick+0xe4>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a32      	ldr	r2, [pc, #200]	; (8001a70 <HAL_InitTick+0xe4>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_InitTick+0xe4>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b8:	f107 0210 	add.w	r2, r7, #16
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 fb30 	bl	8003028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019d2:	f001 fb01 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80019d6:	6378      	str	r0, [r7, #52]	; 0x34
 80019d8:	e004      	b.n	80019e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019da:	f001 fafd 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80019de:	4603      	mov	r3, r0
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_InitTick+0xe8>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	3b01      	subs	r3, #1
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_InitTick+0xec>)
 80019f4:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_InitTick+0xf0>)
 80019f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_InitTick+0xec>)
 80019fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a00:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_InitTick+0xec>)
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_InitTick+0xec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_InitTick+0xec>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_InitTick+0xec>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a18:	4817      	ldr	r0, [pc, #92]	; (8001a78 <HAL_InitTick+0xec>)
 8001a1a:	f001 fdbb 	bl	8003594 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11b      	bne.n	8001a64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a2c:	4812      	ldr	r0, [pc, #72]	; (8001a78 <HAL_InitTick+0xec>)
 8001a2e:	f001 fe0b 	bl	8003648 <HAL_TIM_Base_Start_IT>
 8001a32:	4603      	mov	r3, r0
 8001a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a40:	2036      	movs	r0, #54	; 0x36
 8001a42:	f000 fbc5 	bl	80021d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d808      	bhi.n	8001a5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2036      	movs	r0, #54	; 0x36
 8001a52:	f000 fba1 	bl	8002198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_InitTick+0xf4>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e002      	b.n	8001a64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3738      	adds	r7, #56	; 0x38
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	431bde83 	.word	0x431bde83
 8001a78:	20002274 	.word	0x20002274
 8001a7c:	40001000 	.word	0x40001000
 8001a80:	20000004 	.word	0x20000004

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <NMI_Handler+0x4>

08001a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <HardFault_Handler+0x4>

08001a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <MemManage_Handler+0x4>

08001a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <BusFault_Handler+0x4>

08001a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <UsageFault_Handler+0x4>

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ab6:	f000 fc9f 	bl	80023f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200023a8 	.word	0x200023a8

08001ac4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <TIM6_DAC_IRQHandler+0x10>)
 8001aca:	f001 fe0b 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20002274 	.word	0x20002274

08001ad8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA2_Stream2_IRQHandler+0x10>)
 8001ade:	f000 fc8b 	bl	80023f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20002348 	.word	0x20002348

08001aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return 1;
 8001af0:	2301      	movs	r3, #1
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_kill>:

int _kill(int pid, int sig)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b06:	f006 fc67 	bl	80083d8 <__errno>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2216      	movs	r2, #22
 8001b0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_exit>:

void _exit (int status)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ffe7 	bl	8001afc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b2e:	e7fe      	b.n	8001b2e <_exit+0x12>

08001b30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	e00a      	b.n	8001b58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b42:	f3af 8000 	nop.w
 8001b46:	4601      	mov	r1, r0
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60ba      	str	r2, [r7, #8]
 8001b4e:	b2ca      	uxtb	r2, r1
 8001b50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf0      	blt.n	8001b42 <_read+0x12>
  }

  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e009      	b.n	8001b90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb35 	bl	80011f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf1      	blt.n	8001b7c <_write+0x12>
  }
  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_close>:

int _close(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bca:	605a      	str	r2, [r3, #4]
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_isatty>:

int _isatty(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f006 fbcc 	bl	80083d8 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20008000 	.word	0x20008000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200022bc 	.word	0x200022bc
 8001c74:	200074d0 	.word	0x200074d0

08001c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART1_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8001cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f001 fea8 	bl	8003a28 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f7ff fe23 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200022c0 	.word	0x200022c0
 8001cec:	40011000 	.word	0x40011000

08001cf0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_USART2_UART_Init+0x50>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001d00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x4c>)
 8001d28:	f001 fe7e 	bl	8003a28 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d32:	f7ff fdf9 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20002304 	.word	0x20002304
 8001d40:	40004400 	.word	0x40004400

08001d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a61      	ldr	r2, [pc, #388]	; (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d15c      	bne.n	8001e20 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	4b60      	ldr	r3, [pc, #384]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	4a5f      	ldr	r2, [pc, #380]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d70:	f043 0310 	orr.w	r3, r3, #16
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	4b5d      	ldr	r3, [pc, #372]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001db0:	2307      	movs	r3, #7
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	484d      	ldr	r0, [pc, #308]	; (8001ef0 <HAL_UART_MspInit+0x1ac>)
 8001dbc:	f000 fd86 	bl	80028cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dc2:	4a4d      	ldr	r2, [pc, #308]	; (8001ef8 <HAL_UART_MspInit+0x1b4>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de8:	4b42      	ldr	r3, [pc, #264]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001df4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df6:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e02:	483c      	ldr	r0, [pc, #240]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001e04:	f000 f9f2 	bl	80021ec <HAL_DMA_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001e0e:	f7ff fd8b 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a37      	ldr	r2, [pc, #220]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001e16:	639a      	str	r2, [r3, #56]	; 0x38
 8001e18:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <HAL_UART_MspInit+0x1b0>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e1e:	e05e      	b.n	8001ede <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a35      	ldr	r2, [pc, #212]	; (8001efc <HAL_UART_MspInit+0x1b8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d159      	bne.n	8001ede <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e62:	230c      	movs	r3, #12
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e66:	2302      	movs	r3, #2
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e72:	2307      	movs	r3, #7
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <HAL_UART_MspInit+0x1ac>)
 8001e7e:	f000 fd25 	bl	80028cc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e84:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_UART_MspInit+0x1c0>)
 8001e86:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ec2:	480f      	ldr	r0, [pc, #60]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ec4:	f000 f992 	bl	80021ec <HAL_DMA_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001ece:	f7ff fd2b 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <HAL_UART_MspInit+0x1bc>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001ede:	bf00      	nop
 8001ee0:	3730      	adds	r7, #48	; 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40011000 	.word	0x40011000
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	20002348 	.word	0x20002348
 8001ef8:	40026440 	.word	0x40026440
 8001efc:	40004400 	.word	0x40004400
 8001f00:	200023a8 	.word	0x200023a8
 8001f04:	400260a0 	.word	0x400260a0

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0e:	490e      	ldr	r1, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f24:	4c0b      	ldr	r4, [pc, #44]	; (8001f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f32:	f7ff fea1 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f006 fa55 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7ff fbb5 	bl	80016a8 <main>
  bx  lr    
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f48:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f4c:	0800c080 	.word	0x0800c080
  ldr r2, =_sbss
 8001f50:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f54:	200074cc 	.word	0x200074cc

08001f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_Init+0x40>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_Init+0x40>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x40>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f8fc 	bl	8002182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	200f      	movs	r0, #15
 8001f8c:	f7ff fcfe 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff fcd0 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20002408 	.word	0x20002408

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20002408 	.word	0x20002408

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	; (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff4c 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021aa:	f7ff ff61 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	6978      	ldr	r0, [r7, #20]
 80021b6:	f7ff ffb1 	bl	800211c <NVIC_EncodePriority>
 80021ba:	4602      	mov	r2, r0
 80021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff80 	bl	80020c8 <__NVIC_SetPriority>
}
 80021c8:	bf00      	nop
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff54 	bl	800208c <__NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff fee6 	bl	8001fc8 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e099      	b.n	800233c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002228:	e00f      	b.n	800224a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222a:	f7ff fecd 	bl	8001fc8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b05      	cmp	r3, #5
 8002236:	d908      	bls.n	800224a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2203      	movs	r2, #3
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e078      	b.n	800233c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1e8      	bne.n	800222a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	4b38      	ldr	r3, [pc, #224]	; (8002344 <HAL_DMA_Init+0x158>)
 8002264:	4013      	ands	r3, r2
 8002266:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002276:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002282:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d107      	bne.n	80022b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4313      	orrs	r3, r2
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d117      	bne.n	800230e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fa6f 	bl	80027d4 <DMA_CheckFifoParam>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800230a:	2301      	movs	r3, #1
 800230c:	e016      	b.n	800233c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa26 	bl	8002768 <DMA_CalcBaseAndBitshift>
 800231c:	4603      	mov	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	223f      	movs	r2, #63	; 0x3f
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f010803f 	.word	0xf010803f

08002348 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_DMA_Start_IT+0x26>
 800236a:	2302      	movs	r3, #2
 800236c:	e040      	b.n	80023f0 <HAL_DMA_Start_IT+0xa8>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b01      	cmp	r3, #1
 8002380:	d12f      	bne.n	80023e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f9b8 	bl	800270c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	223f      	movs	r2, #63	; 0x3f
 80023a2:	409a      	lsls	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0216 	orr.w	r2, r2, #22
 80023b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0208 	orr.w	r2, r2, #8
 80023ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e005      	b.n	80023ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002404:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <HAL_DMA_IRQHandler+0x248>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a8e      	ldr	r2, [pc, #568]	; (8002644 <HAL_DMA_IRQHandler+0x24c>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0a9b      	lsrs	r3, r3, #10
 8002410:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2208      	movs	r2, #8
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01a      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2208      	movs	r2, #8
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2201      	movs	r2, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2201      	movs	r2, #1
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f043 0202 	orr.w	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2204      	movs	r2, #4
 80024a0:	409a      	lsls	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	2204      	movs	r2, #4
 80024be:	409a      	lsls	r2, r3
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f043 0204 	orr.w	r2, r3, #4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2210      	movs	r2, #16
 80024d6:	409a      	lsls	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d043      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03c      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2210      	movs	r2, #16
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d018      	beq.n	800253a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d108      	bne.n	8002528 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d024      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	4798      	blx	r3
 8002526:	e01f      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01b      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	4798      	blx	r3
 8002538:	e016      	b.n	8002568 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d107      	bne.n	8002558 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0208 	bic.w	r2, r2, #8
 8002556:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2220      	movs	r2, #32
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4013      	ands	r3, r2
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 808f 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8087 	beq.w	8002698 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258e:	2220      	movs	r2, #32
 8002590:	409a      	lsls	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d136      	bne.n	8002610 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x1da>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	409a      	lsls	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d07e      	beq.n	8002704 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
        }
        return;
 800260e:	e079      	b.n	8002704 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d01d      	beq.n	800265a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	2b00      	cmp	r3, #0
 8002632:	d031      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
 800263c:	e02c      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000
 8002644:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e01e      	b.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0210 	bic.w	r2, r2, #16
 8002676:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269c:	2b00      	cmp	r3, #0
 800269e:	d032      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d022      	beq.n	80026f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2205      	movs	r2, #5
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d307      	bcc.n	80026e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f2      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x2cc>
 80026de:	e000      	b.n	80026e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d005      	beq.n	8002706 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e000      	b.n	8002706 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002704:	bf00      	nop
    }
  }
}
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002728:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d108      	bne.n	800274c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800274a:	e007      	b.n	800275c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3b10      	subs	r3, #16
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <DMA_CalcBaseAndBitshift+0x64>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <DMA_CalcBaseAndBitshift+0x68>)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d909      	bls.n	80027aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800279e:	f023 0303 	bic.w	r3, r3, #3
 80027a2:	1d1a      	adds	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	; 0x58
 80027a8:	e007      	b.n	80027ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027b2:	f023 0303 	bic.w	r3, r3, #3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	aaaaaaab 	.word	0xaaaaaaab
 80027d0:	0800bc3c 	.word	0x0800bc3c

080027d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11f      	bne.n	800282e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d856      	bhi.n	80028a2 <DMA_CheckFifoParam+0xce>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <DMA_CheckFifoParam+0x28>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	0800281f 	.word	0x0800281f
 8002804:	0800280d 	.word	0x0800280d
 8002808:	080028a3 	.word	0x080028a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d046      	beq.n	80028a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800281c:	e043      	b.n	80028a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002826:	d140      	bne.n	80028aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800282c:	e03d      	b.n	80028aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002836:	d121      	bne.n	800287c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d837      	bhi.n	80028ae <DMA_CheckFifoParam+0xda>
 800283e:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <DMA_CheckFifoParam+0x70>)
 8002840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285b 	.word	0x0800285b
 800284c:	08002855 	.word	0x08002855
 8002850:	0800286d 	.word	0x0800286d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e030      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d025      	beq.n	80028b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800286a:	e022      	b.n	80028b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002874:	d11f      	bne.n	80028b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800287a:	e01c      	b.n	80028b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d903      	bls.n	800288a <DMA_CheckFifoParam+0xb6>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d003      	beq.n	8002890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002888:	e018      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      break;
 800288e:	e015      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00e      	beq.n	80028ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      break;
 80028a0:	e00b      	b.n	80028ba <DMA_CheckFifoParam+0xe6>
      break;
 80028a2:	bf00      	nop
 80028a4:	e00a      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
 80028a8:	e008      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028aa:	bf00      	nop
 80028ac:	e006      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ae:	bf00      	nop
 80028b0:	e004      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;   
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <DMA_CheckFifoParam+0xe8>
      break;
 80028ba:	bf00      	nop
    }
  } 
  
  return status; 
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	; 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e14d      	b.n	8002b84 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	f040 813c 	bne.w	8002b7e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	2b02      	cmp	r3, #2
 800291c:	d130      	bne.n	8002980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8096 	beq.w	8002b7e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b4e      	ldr	r3, [pc, #312]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6e:	4a4c      	ldr	r2, [pc, #304]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x1ea>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x1e6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a41      	ldr	r2, [pc, #260]	; (8002bac <HAL_GPIO_Init+0x2e0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002aae:	2307      	movs	r3, #7
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <HAL_GPIO_Init+0x2e4>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f aeae 	bls.w	80028e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cc      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d90c      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c12:	4b63      	ldr	r3, [pc, #396]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0b8      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d020      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c3c:	4b59      	ldr	r3, [pc, #356]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	494d      	ldr	r1, [pc, #308]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d044      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d119      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4934      	ldr	r1, [pc, #208]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f976 	bl	8001fc8 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f972 	bl	8001fc8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e04f      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d20c      	bcs.n	8002d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e032      	b.n	8002d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490e      	ldr	r1, [pc, #56]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 f821 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	490a      	ldr	r1, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	5ccb      	ldrb	r3, [r1, r3]
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fdfc 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023c00 	.word	0x40023c00
 8002da4:	40023800 	.word	0x40023800
 8002da8:	0800bc24 	.word	0x0800bc24
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db8:	b094      	sub	sp, #80	; 0x50
 8002dba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d00d      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	f200 80e1 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x34>
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x3a>
 8002de6:	e0db      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dec:	e0db      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002df2:	e0d8      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002df4:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dfe:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	099b      	lsrs	r3, r3, #6
 8002e10:	2200      	movs	r2, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1e:	2300      	movs	r3, #0
 8002e20:	637b      	str	r3, [r7, #52]	; 0x34
 8002e22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	0159      	lsls	r1, r3, #5
 8002e34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e38:	0150      	lsls	r0, r2, #5
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4621      	mov	r1, r4
 8002e40:	1a51      	subs	r1, r2, r1
 8002e42:	6139      	str	r1, [r7, #16]
 8002e44:	4629      	mov	r1, r5
 8002e46:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e58:	4659      	mov	r1, fp
 8002e5a:	018b      	lsls	r3, r1, #6
 8002e5c:	4651      	mov	r1, sl
 8002e5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e62:	4651      	mov	r1, sl
 8002e64:	018a      	lsls	r2, r1, #6
 8002e66:	4651      	mov	r1, sl
 8002e68:	ebb2 0801 	subs.w	r8, r2, r1
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e86:	4690      	mov	r8, r2
 8002e88:	4699      	mov	r9, r3
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	eb18 0303 	adds.w	r3, r8, r3
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	462b      	mov	r3, r5
 8002e94:	eb49 0303 	adc.w	r3, r9, r3
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ea6:	4629      	mov	r1, r5
 8002ea8:	024b      	lsls	r3, r1, #9
 8002eaa:	4621      	mov	r1, r4
 8002eac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	024a      	lsls	r2, r1, #9
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	2200      	movs	r2, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ec0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec4:	f7fd ff00 	bl	8000cc8 <__aeabi_uldivmod>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4613      	mov	r3, r2
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed0:	e058      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	4611      	mov	r1, r2
 8002ede:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efe:	0150      	lsls	r0, r2, #5
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4641      	mov	r1, r8
 8002f06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f0a:	4649      	mov	r1, r9
 8002f0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f24:	ebb2 040a 	subs.w	r4, r2, sl
 8002f28:	eb63 050b 	sbc.w	r5, r3, fp
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	00eb      	lsls	r3, r5, #3
 8002f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3a:	00e2      	lsls	r2, r4, #3
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	4643      	mov	r3, r8
 8002f42:	18e3      	adds	r3, r4, r3
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	464b      	mov	r3, r9
 8002f48:	eb45 0303 	adc.w	r3, r5, r3
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	028b      	lsls	r3, r1, #10
 8002f5e:	4621      	mov	r1, r4
 8002f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f64:	4621      	mov	r1, r4
 8002f66:	028a      	lsls	r2, r1, #10
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	61fa      	str	r2, [r7, #28]
 8002f74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f78:	f7fd fea6 	bl	8000cc8 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4613      	mov	r3, r2
 8002f82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	3301      	adds	r3, #1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3750      	adds	r7, #80	; 0x50
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	00f42400 	.word	0x00f42400
 8002fbc:	007a1200 	.word	0x007a1200

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000000 	.word	0x20000000

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a9b      	lsrs	r3, r3, #10
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	0800bc34 	.word	0x0800bc34

08003000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003004:	f7ff ffdc 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0b5b      	lsrs	r3, r3, #13
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	0800bc34 	.word	0x0800bc34

08003028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	220f      	movs	r2, #15
 8003036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_GetClockConfig+0x5c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_RCC_GetClockConfig+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0207 	and.w	r2, r3, #7
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e273      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d075      	beq.n	8003196 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d00c      	beq.n	80030d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d112      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ce:	d10b      	bne.n	80030e8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	4b7e      	ldr	r3, [pc, #504]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d05b      	beq.n	8003194 <HAL_RCC_OscConfig+0x108>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d157      	bne.n	8003194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e24e      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f0:	d106      	bne.n	8003100 <HAL_RCC_OscConfig+0x74>
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a75      	ldr	r2, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e01d      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x98>
 800310a:	4b70      	ldr	r3, [pc, #448]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6f      	ldr	r2, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b6d      	ldr	r3, [pc, #436]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0xb0>
 8003124:	4b69      	ldr	r3, [pc, #420]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a68      	ldr	r2, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800312a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	4b66      	ldr	r3, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe ff40 	bl	8001fc8 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe ff3c 	bl	8001fc8 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e213      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b5b      	ldr	r3, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0xc0>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe ff2c 	bl	8001fc8 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003174:	f7fe ff28 	bl	8001fc8 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b64      	cmp	r3, #100	; 0x64
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e1ff      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0xe8>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d063      	beq.n	800326a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d11c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b44      	ldr	r3, [pc, #272]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d116      	bne.n	80031f4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x152>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e1d3      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4937      	ldr	r1, [pc, #220]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f2:	e03a      	b.n	800326a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d020      	beq.n	800323e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x244>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe fee1 	bl	8001fc8 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fe fedd 	bl	8001fc8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e1b4      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003228:	4b28      	ldr	r3, [pc, #160]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4925      	ldr	r1, [pc, #148]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003238:	4313      	orrs	r3, r2
 800323a:	600b      	str	r3, [r1, #0]
 800323c:	e015      	b.n	800326a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323e:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <HAL_RCC_OscConfig+0x244>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe fec0 	bl	8001fc8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800324c:	f7fe febc 	bl	8001fc8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e193      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d036      	beq.n	80032e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d016      	beq.n	80032ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_RCC_OscConfig+0x248>)
 8003280:	2201      	movs	r2, #1
 8003282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fea0 	bl	8001fc8 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328c:	f7fe fe9c 	bl	8001fc8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e173      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x240>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x200>
 80032aa:	e01b      	b.n	80032e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ac:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_RCC_OscConfig+0x248>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fe89 	bl	8001fc8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	e00e      	b.n	80032d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fe fe85 	bl	8001fc8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d907      	bls.n	80032d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e15c      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	42470000 	.word	0x42470000
 80032d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d8:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1ea      	bne.n	80032ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8097 	beq.w	8003420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f6:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b7f      	ldr	r3, [pc, #508]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	4a7e      	ldr	r2, [pc, #504]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
 8003312:	4b7c      	ldr	r3, [pc, #496]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b79      	ldr	r3, [pc, #484]	; (8003508 <HAL_RCC_OscConfig+0x47c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x47c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a75      	ldr	r2, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x47c>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe fe45 	bl	8001fc8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe fe41 	bl	8001fc8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e118      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4b6c      	ldr	r3, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x47c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x2ea>
 8003368:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a65      	ldr	r2, [pc, #404]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	e01c      	b.n	80033b0 <HAL_RCC_OscConfig+0x324>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x30c>
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a60      	ldr	r2, [pc, #384]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	4b5e      	ldr	r3, [pc, #376]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	e00b      	b.n	80033b0 <HAL_RCC_OscConfig+0x324>
 8003398:	4b5a      	ldr	r3, [pc, #360]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a59      	ldr	r2, [pc, #356]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b57      	ldr	r3, [pc, #348]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80033aa:	f023 0304 	bic.w	r3, r3, #4
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe fe06 	bl	8001fc8 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe fe02 	bl	8001fc8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e0d7      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	4b4b      	ldr	r3, [pc, #300]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ee      	beq.n	80033c0 <HAL_RCC_OscConfig+0x334>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe fdf0 	bl	8001fc8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe fdec 	bl	8001fc8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0c1      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ee      	bne.n	80033ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b3b      	ldr	r3, [pc, #236]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80ad 	beq.w	8003584 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342a:	4b36      	ldr	r3, [pc, #216]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b08      	cmp	r3, #8
 8003434:	d060      	beq.n	80034f8 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d145      	bne.n	80034ca <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b33      	ldr	r3, [pc, #204]	; (800350c <HAL_RCC_OscConfig+0x480>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe fdc0 	bl	8001fc8 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fdbc 	bl	8001fc8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e093      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69da      	ldr	r2, [r3, #28]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	019b      	lsls	r3, r3, #6
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	3b01      	subs	r3, #1
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	071b      	lsls	r3, r3, #28
 8003496:	491b      	ldr	r1, [pc, #108]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x480>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fe fd91 	bl	8001fc8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fe fd8d 	bl	8001fc8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e064      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x41e>
 80034c8:	e05c      	b.n	8003584 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x480>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fd7a 	bl	8001fc8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fd76 	bl	8001fc8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e04d      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_OscConfig+0x478>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x44c>
 80034f6:	e045      	b.n	8003584 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e040      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000
 800350c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003510:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <HAL_RCC_OscConfig+0x504>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d030      	beq.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d129      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d122      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003546:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d119      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d10f      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f839 	bl	8003632 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 f9b6 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d001      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e035      	b.n	80036cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a16      	ldr	r2, [pc, #88]	; (80036d8 <HAL_TIM_Base_Start_IT+0x90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_TIM_Base_Start_IT+0x4e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_TIM_Base_Start_IT+0x94>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_TIM_Base_Start_IT+0x4e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_TIM_Base_Start_IT+0x98>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d111      	bne.n	80036ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d010      	beq.n	80036ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b8:	e007      	b.n	80036ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40014000 	.word	0x40014000

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8ee 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8e0 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8f1 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8c4 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8b6 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8c7 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f89a 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f88c 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f89d 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f870 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f862 	bl	80038f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f873 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fe f84e 	bl	8001904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8c0 	bl	8003a14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f838 	bl	8003930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0220 	mvn.w	r2, #32
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f88a 	bl	8003a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <TIM_Base_SetConfig+0xac>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_Base_SetConfig+0x20>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <TIM_Base_SetConfig+0xb0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d108      	bne.n	8003976 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1d      	ldr	r2, [pc, #116]	; (80039f0 <TIM_Base_SetConfig+0xac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_Base_SetConfig+0x52>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <TIM_Base_SetConfig+0xb0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x52>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <TIM_Base_SetConfig+0xb4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x52>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a1a      	ldr	r2, [pc, #104]	; (80039fc <TIM_Base_SetConfig+0xb8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <TIM_Base_SetConfig+0xac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d103      	bne.n	80039dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	615a      	str	r2, [r3, #20]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40010000 	.word	0x40010000
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40014800 	.word	0x40014800

08003a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e03f      	b.n	8003aba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe f978 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	; 0x24
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fdd3 	bl	8004618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b08a      	sub	sp, #40	; 0x28
 8003ac6:	af02      	add	r7, sp, #8
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d17c      	bne.n	8003bdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_UART_Transmit+0x2c>
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e075      	b.n	8003bde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_UART_Transmit+0x3e>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e06e      	b.n	8003bde <HAL_UART_Transmit+0x11c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b16:	f7fe fa57 	bl	8001fc8 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	88fa      	ldrh	r2, [r7, #6]
 8003b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	d108      	bne.n	8003b44 <HAL_UART_Transmit+0x82>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	61bb      	str	r3, [r7, #24]
 8003b42:	e003      	b.n	8003b4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b54:	e02a      	b.n	8003bac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fb82 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e036      	b.n	8003bde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	3302      	adds	r3, #2
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e007      	b.n	8003b9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1cf      	bne.n	8003b56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fb52 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e006      	b.n	8003bde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	; 0x28
 8003bea:	af02      	add	r7, sp, #8
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f040 808c 	bne.w	8003d20 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Receive+0x2e>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e084      	b.n	8003d22 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Receive+0x40>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e07d      	b.n	8003d22 <HAL_UART_Receive+0x13c>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2222      	movs	r2, #34	; 0x22
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fe f9c1 	bl	8001fc8 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Receive+0x8a>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c80:	e043      	b.n	8003d0a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2120      	movs	r1, #32
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 faec 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e042      	b.n	8003d22 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e01f      	b.n	8003cfc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc4:	d007      	beq.n	8003cd6 <HAL_UART_Receive+0xf0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10a      	bne.n	8003ce4 <HAL_UART_Receive+0xfe>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e008      	b.n	8003cf6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1b6      	bne.n	8003c82 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	4613      	mov	r3, r2
 8003d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d130      	bne.n	8003da6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_UART_Transmit_IT+0x26>
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e029      	b.n	8003da8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_UART_Transmit_IT+0x38>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e022      	b.n	8003da8 <HAL_UART_Transmit_IT+0x7e>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	88fa      	ldrh	r2, [r7, #6]
 8003d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	88fa      	ldrh	r2, [r7, #6]
 8003d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003da0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	e000      	b.n	8003da8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003da6:	2302      	movs	r3, #2
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d11d      	bne.n	8003e0a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_UART_Receive_IT+0x26>
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e016      	b.n	8003e0c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive_IT+0x38>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e00f      	b.n	8003e0c <HAL_UART_Receive_IT+0x58>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 faa0 	bl	8004346 <UART_Start_Receive_IT>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e000      	b.n	8003e0c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d165      	bne.n	8003efa <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <HAL_UART_Transmit_DMA+0x26>
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e05e      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UART_Transmit_DMA+0x38>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e057      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2221      	movs	r2, #33	; 0x21
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_UART_Transmit_DMA+0xf0>)
 8003e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <HAL_UART_Transmit_DMA+0xf4>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <HAL_UART_Transmit_DMA+0xf8>)
 8003e8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2200      	movs	r2, #0
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003e94:	f107 0308 	add.w	r3, r7, #8
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f7fe fa4c 	bl	8002348 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ee4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3730      	adds	r7, #48	; 0x30
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	08003fc5 	.word	0x08003fc5
 8003f08:	0800405f 	.word	0x0800405f
 8003f0c:	080041d7 	.word	0x080041d7

08003f10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d11d      	bne.n	8003f66 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <HAL_UART_Receive_DMA+0x26>
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e016      	b.n	8003f68 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Receive_DMA+0x38>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e00f      	b.n	8003f68 <HAL_UART_Receive_DMA+0x58>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa31 	bl	80043c4 <UART_Start_Receive_DMA>
 8003f62:	4603      	mov	r3, r0
 8003f64:	e000      	b.n	8003f68 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b090      	sub	sp, #64	; 0x40
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d137      	bne.n	8004050 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3314      	adds	r3, #20
 8004004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004006:	633a      	str	r2, [r7, #48]	; 0x30
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e5      	bne.n	8003fe6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	60fb      	str	r3, [r7, #12]
   return(result);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800403a:	61fa      	str	r2, [r7, #28]
 800403c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	617b      	str	r3, [r7, #20]
   return(result);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e5      	bne.n	800401a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800404e:	e002      	b.n	8004056 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004052:	f7ff ff8d 	bl	8003f70 <HAL_UART_TxCpltCallback>
}
 8004056:	bf00      	nop
 8004058:	3740      	adds	r7, #64	; 0x40
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff ff89 	bl	8003f84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b09c      	sub	sp, #112	; 0x70
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d172      	bne.n	800417c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004098:	2200      	movs	r2, #0
 800409a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80040be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	667b      	str	r3, [r7, #100]	; 0x64
 80040e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040f0:	647a      	str	r2, [r7, #68]	; 0x44
 80040f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3314      	adds	r3, #20
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	623b      	str	r3, [r7, #32]
   return(result);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	663b      	str	r3, [r7, #96]	; 0x60
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3314      	adds	r3, #20
 8004122:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004124:	633a      	str	r2, [r7, #48]	; 0x30
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e5      	bne.n	8004104 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b01      	cmp	r3, #1
 8004146:	d119      	bne.n	800417c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	60fb      	str	r3, [r7, #12]
   return(result);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0310 	bic.w	r3, r3, #16
 800415e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004168:	61fa      	str	r2, [r7, #28]
 800416a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	69b9      	ldr	r1, [r7, #24]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	617b      	str	r3, [r7, #20]
   return(result);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	d106      	bne.n	8004192 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004186:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004188:	4619      	mov	r1, r3
 800418a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800418c:	f7ff ff0e 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004190:	e002      	b.n	8004198 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004192:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004194:	f7fd fb94 	bl	80018c0 <HAL_UART_RxCpltCallback>
}
 8004198:	bf00      	nop
 800419a:	3770      	adds	r7, #112	; 0x70
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff fef3 	bl	8003fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c6:	e002      	b.n	80041ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7fd fb57 	bl	800187c <HAL_UART_RxHalfCpltCallback>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	bf0c      	ite	eq
 80041f6:	2301      	moveq	r3, #1
 80041f8:	2300      	movne	r3, #0
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b21      	cmp	r3, #33	; 0x21
 8004208:	d108      	bne.n	800421c <UART_DMAError+0x46>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2200      	movs	r2, #0
 8004214:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004216:	68b8      	ldr	r0, [r7, #8]
 8004218:	f000 f972 	bl	8004500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b22      	cmp	r3, #34	; 0x22
 800423c:	d108      	bne.n	8004250 <UART_DMAError+0x7a>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800424a:	68b8      	ldr	r0, [r7, #8]
 800424c:	f000 f980 	bl	8004550 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	f043 0210 	orr.w	r2, r3, #16
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425c:	68b8      	ldr	r0, [r7, #8]
 800425e:	f7ff fe9b 	bl	8003f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b090      	sub	sp, #64	; 0x40
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427a:	e050      	b.n	800431e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	d04c      	beq.n	800431e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x30>
 800428a:	f7fd fe9d 	bl	8001fc8 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004296:	429a      	cmp	r2, r3
 8004298:	d241      	bcs.n	800431e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ba:	637a      	str	r2, [r7, #52]	; 0x34
 80042bc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e5      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	613b      	str	r3, [r7, #16]
   return(result);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ee:	623a      	str	r2, [r7, #32]
 80042f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	69f9      	ldr	r1, [r7, #28]
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e00f      	b.n	800433e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	429a      	cmp	r2, r3
 800433a:	d09f      	beq.n	800427c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3740      	adds	r7, #64	; 0x40
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	4613      	mov	r3, r2
 8004352:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	88fa      	ldrh	r2, [r7, #6]
 800435e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	88fa      	ldrh	r2, [r7, #6]
 8004364:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2222      	movs	r2, #34	; 0x22
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004392:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0220 	orr.w	r2, r2, #32
 80043b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b098      	sub	sp, #96	; 0x60
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	4613      	mov	r3, r2
 80043d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2222      	movs	r2, #34	; 0x22
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <UART_Start_Receive_DMA+0x130>)
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <UART_Start_Receive_DMA+0x134>)
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	4a3e      	ldr	r2, [pc, #248]	; (80044fc <UART_Start_Receive_DMA+0x138>)
 8004402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800440c:	f107 0308 	add.w	r3, r7, #8
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	f7fd ff90 	bl	8002348 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d019      	beq.n	8004482 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	65bb      	str	r3, [r7, #88]	; 0x58
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004470:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	657b      	str	r3, [r7, #84]	; 0x54
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3314      	adds	r3, #20
 80044a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80044a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3314      	adds	r3, #20
 80044bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	617b      	str	r3, [r7, #20]
   return(result);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3314      	adds	r3, #20
 80044d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044d6:	627a      	str	r2, [r7, #36]	; 0x24
 80044d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044da:	6a39      	ldr	r1, [r7, #32]
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	e841 2300 	strex	r3, r2, [r1]
 80044e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1e5      	bne.n	80044b6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3760      	adds	r7, #96	; 0x60
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	0800407b 	.word	0x0800407b
 80044f8:	080041a1 	.word	0x080041a1
 80044fc:	080041d7 	.word	0x080041d7

08004500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	; 0x24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	61ba      	str	r2, [r7, #24]
 800452a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	613b      	str	r3, [r7, #16]
   return(result);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004544:	bf00      	nop
 8004546:	3724      	adds	r7, #36	; 0x24
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b095      	sub	sp, #84	; 0x54
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800456e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004578:	643a      	str	r2, [r7, #64]	; 0x40
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800457e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	61fb      	str	r3, [r7, #28]
   return(result);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d119      	bne.n	80045fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	647b      	str	r3, [r7, #68]	; 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e8:	61ba      	str	r2, [r7, #24]
 80045ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
}
 800460a:	bf00      	nop
 800460c:	3754      	adds	r7, #84	; 0x54
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b0c0      	sub	sp, #256	; 0x100
 800461e:	af00      	add	r7, sp, #0
 8004620:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	ea40 0301 	orr.w	r3, r0, r1
 8004640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	431a      	orrs	r2, r3
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004670:	f021 010c 	bic.w	r1, r1, #12
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800467e:	430b      	orrs	r3, r1
 8004680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004692:	6999      	ldr	r1, [r3, #24]
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	ea40 0301 	orr.w	r3, r0, r1
 800469e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b8f      	ldr	r3, [pc, #572]	; (80048e4 <UART_SetConfig+0x2cc>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d005      	beq.n	80046b8 <UART_SetConfig+0xa0>
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b8d      	ldr	r3, [pc, #564]	; (80048e8 <UART_SetConfig+0x2d0>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d104      	bne.n	80046c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046b8:	f7fe fca2 	bl	8003000 <HAL_RCC_GetPCLK2Freq>
 80046bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046c0:	e003      	b.n	80046ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c2:	f7fe fc89 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80046c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d4:	f040 810c 	bne.w	80048f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80046f2:	415b      	adcs	r3, r3
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046fa:	4621      	mov	r1, r4
 80046fc:	eb12 0801 	adds.w	r8, r2, r1
 8004700:	4629      	mov	r1, r5
 8004702:	eb43 0901 	adc.w	r9, r3, r1
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800471a:	4690      	mov	r8, r2
 800471c:	4699      	mov	r9, r3
 800471e:	4623      	mov	r3, r4
 8004720:	eb18 0303 	adds.w	r3, r8, r3
 8004724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004728:	462b      	mov	r3, r5
 800472a:	eb49 0303 	adc.w	r3, r9, r3
 800472e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800473e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004746:	460b      	mov	r3, r1
 8004748:	18db      	adds	r3, r3, r3
 800474a:	653b      	str	r3, [r7, #80]	; 0x50
 800474c:	4613      	mov	r3, r2
 800474e:	eb42 0303 	adc.w	r3, r2, r3
 8004752:	657b      	str	r3, [r7, #84]	; 0x54
 8004754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800475c:	f7fc fab4 	bl	8000cc8 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4b61      	ldr	r3, [pc, #388]	; (80048ec <UART_SetConfig+0x2d4>)
 8004766:	fba3 2302 	umull	r2, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004778:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800477c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	64b9      	str	r1, [r7, #72]	; 0x48
 8004788:	415b      	adcs	r3, r3
 800478a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004790:	4641      	mov	r1, r8
 8004792:	eb12 0a01 	adds.w	sl, r2, r1
 8004796:	4649      	mov	r1, r9
 8004798:	eb43 0b01 	adc.w	fp, r3, r1
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b0:	4692      	mov	sl, r2
 80047b2:	469b      	mov	fp, r3
 80047b4:	4643      	mov	r3, r8
 80047b6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047be:	464b      	mov	r3, r9
 80047c0:	eb4b 0303 	adc.w	r3, fp, r3
 80047c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047dc:	460b      	mov	r3, r1
 80047de:	18db      	adds	r3, r3, r3
 80047e0:	643b      	str	r3, [r7, #64]	; 0x40
 80047e2:	4613      	mov	r3, r2
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047f2:	f7fc fa69 	bl	8000cc8 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <UART_SetConfig+0x2d4>)
 80047fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2264      	movs	r2, #100	; 0x64
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	1acb      	subs	r3, r1, r3
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <UART_SetConfig+0x2d4>)
 8004814:	fba3 2302 	umull	r2, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004820:	441c      	add	r4, r3
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800482c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	63b9      	str	r1, [r7, #56]	; 0x38
 800483c:	415b      	adcs	r3, r3
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004844:	4641      	mov	r1, r8
 8004846:	1851      	adds	r1, r2, r1
 8004848:	6339      	str	r1, [r7, #48]	; 0x30
 800484a:	4649      	mov	r1, r9
 800484c:	414b      	adcs	r3, r1
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800485c:	4659      	mov	r1, fp
 800485e:	00cb      	lsls	r3, r1, #3
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004866:	4651      	mov	r1, sl
 8004868:	00ca      	lsls	r2, r1, #3
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	4603      	mov	r3, r0
 8004870:	4642      	mov	r2, r8
 8004872:	189b      	adds	r3, r3, r2
 8004874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004890:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004898:	460b      	mov	r3, r1
 800489a:	18db      	adds	r3, r3, r3
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
 800489e:	4613      	mov	r3, r2
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048ae:	f7fc fa0b 	bl	8000cc8 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <UART_SetConfig+0x2d4>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	; 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3332      	adds	r3, #50	; 0x32
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <UART_SetConfig+0x2d4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 0207 	and.w	r2, r3, #7
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4422      	add	r2, r4
 80048de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e0:	e106      	b.n	8004af0 <UART_SetConfig+0x4d8>
 80048e2:	bf00      	nop
 80048e4:	40011000 	.word	0x40011000
 80048e8:	40011400 	.word	0x40011400
 80048ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004902:	4642      	mov	r2, r8
 8004904:	464b      	mov	r3, r9
 8004906:	1891      	adds	r1, r2, r2
 8004908:	6239      	str	r1, [r7, #32]
 800490a:	415b      	adcs	r3, r3
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004912:	4641      	mov	r1, r8
 8004914:	1854      	adds	r4, r2, r1
 8004916:	4649      	mov	r1, r9
 8004918:	eb43 0501 	adc.w	r5, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	00eb      	lsls	r3, r5, #3
 8004926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492a:	00e2      	lsls	r2, r4, #3
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	4643      	mov	r3, r8
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004938:	464b      	mov	r3, r9
 800493a:	eb45 0303 	adc.w	r3, r5, r3
 800493e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800495e:	4629      	mov	r1, r5
 8004960:	008b      	lsls	r3, r1, #2
 8004962:	4621      	mov	r1, r4
 8004964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004968:	4621      	mov	r1, r4
 800496a:	008a      	lsls	r2, r1, #2
 800496c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004970:	f7fc f9aa 	bl	8000cc8 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4b60      	ldr	r3, [pc, #384]	; (8004afc <UART_SetConfig+0x4e4>)
 800497a:	fba3 2302 	umull	r2, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	011c      	lsls	r4, r3, #4
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800498c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	61b9      	str	r1, [r7, #24]
 800499c:	415b      	adcs	r3, r3
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a4:	4641      	mov	r1, r8
 80049a6:	1851      	adds	r1, r2, r1
 80049a8:	6139      	str	r1, [r7, #16]
 80049aa:	4649      	mov	r1, r9
 80049ac:	414b      	adcs	r3, r1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049bc:	4659      	mov	r1, fp
 80049be:	00cb      	lsls	r3, r1, #3
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c6:	4651      	mov	r1, sl
 80049c8:	00ca      	lsls	r2, r1, #3
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	4642      	mov	r2, r8
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049d8:	464b      	mov	r3, r9
 80049da:	460a      	mov	r2, r1
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049fc:	4649      	mov	r1, r9
 80049fe:	008b      	lsls	r3, r1, #2
 8004a00:	4641      	mov	r1, r8
 8004a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a06:	4641      	mov	r1, r8
 8004a08:	008a      	lsls	r2, r1, #2
 8004a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a0e:	f7fc f95b 	bl	8000cc8 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	4b38      	ldr	r3, [pc, #224]	; (8004afc <UART_SetConfig+0x4e4>)
 8004a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2264      	movs	r2, #100	; 0x64
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	1acb      	subs	r3, r1, r3
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	3332      	adds	r3, #50	; 0x32
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <UART_SetConfig+0x4e4>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a38:	441c      	add	r4, r3
 8004a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3e:	2200      	movs	r2, #0
 8004a40:	673b      	str	r3, [r7, #112]	; 0x70
 8004a42:	677a      	str	r2, [r7, #116]	; 0x74
 8004a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	415b      	adcs	r3, r3
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	eb42 0303 	adc.w	r3, r2, r3
 8004a92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9e:	667a      	str	r2, [r7, #100]	; 0x64
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004aac:	4649      	mov	r1, r9
 8004aae:	008b      	lsls	r3, r1, #2
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	008a      	lsls	r2, r1, #2
 8004aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004abe:	f7fc f903 	bl	8000cc8 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <UART_SetConfig+0x4e4>)
 8004ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2164      	movs	r1, #100	; 0x64
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	3332      	adds	r3, #50	; 0x32
 8004ada:	4a08      	ldr	r2, [pc, #32]	; (8004afc <UART_SetConfig+0x4e4>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4422      	add	r2, r4
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004af6:	46bd      	mov	sp, r7
 8004af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afc:	51eb851f 	.word	0x51eb851f

08004b00 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b12:	2b84      	cmp	r3, #132	; 0x84
 8004b14:	d005      	beq.n	8004b22 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b16:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3303      	adds	r3, #3
 8004b20:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b22:	68fb      	ldr	r3, [r7, #12]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b34:	f000 fdba 	bl	80056ac <vTaskStartScheduler>
  
  return osOK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b40:	b089      	sub	sp, #36	; 0x24
 8004b42:	af04      	add	r7, sp, #16
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <osThreadCreate+0x54>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01c      	beq.n	8004b92 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685c      	ldr	r4, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691e      	ldr	r6, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ffc8 	bl	8004b00 <makeFreeRtosPriority>
 8004b70:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b7a:	9202      	str	r2, [sp, #8]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	9100      	str	r1, [sp, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	4632      	mov	r2, r6
 8004b84:	4629      	mov	r1, r5
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 fbc8 	bl	800531c <xTaskCreateStatic>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e01c      	b.n	8004bcc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685c      	ldr	r4, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b9e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ffaa 	bl	8004b00 <makeFreeRtosPriority>
 8004bac:	4602      	mov	r2, r0
 8004bae:	f107 030c 	add.w	r3, r7, #12
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	9200      	str	r2, [sp, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	4632      	mov	r2, r6
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f000 fc0a 	bl	80053d6 <xTaskCreate>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d001      	beq.n	8004bcc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bd6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <osDelay+0x16>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e000      	b.n	8004bee <osDelay+0x18>
 8004bec:	2301      	movs	r3, #1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fd28 	bl	8005644 <vTaskDelay>
  
  return osOK;
 8004bf4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f103 0208 	add.w	r2, r3, #8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0208 	add.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f103 0208 	add.w	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d103      	bne.n	8004cc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e00c      	b.n	8004cda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e002      	b.n	8004cce <vListInsert+0x2e>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d2f6      	bcs.n	8004cc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6892      	ldr	r2, [r2, #8]
 8004d28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6852      	ldr	r2, [r2, #4]
 8004d32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d103      	bne.n	8004d46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1e5a      	subs	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d92:	f001 fb4f 	bl	8006434 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004da2:	fb01 f303 	mul.w	r3, r1, r3
 8004da6:	441a      	add	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	68f9      	ldr	r1, [r7, #12]
 8004dc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d114      	bne.n	8004e12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01a      	beq.n	8004e26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3310      	adds	r3, #16
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fe9b 	bl	8005b30 <xTaskRemoveFromEventList>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <xQueueGenericReset+0xcc>)
 8004e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	e009      	b.n	8004e26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3310      	adds	r3, #16
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fef1 	bl	8004bfe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3324      	adds	r3, #36	; 0x24
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff feec 	bl	8004bfe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e26:	f001 fb35 	bl	8006494 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	613b      	str	r3, [r7, #16]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3348      	adds	r3, #72	; 0x48
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fc01 	bl	8006678 <pvPortMalloc>
 8004e76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d011      	beq.n	8004ea2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	3348      	adds	r3, #72	; 0x48
 8004e86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e90:	79fa      	ldrb	r2, [r7, #7]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4613      	mov	r3, r2
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f805 	bl	8004eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eda:	2101      	movs	r1, #1
 8004edc:	69b8      	ldr	r0, [r7, #24]
 8004ede:	f7ff ff43 	bl	8004d68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b08e      	sub	sp, #56	; 0x38
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	623b      	str	r3, [r7, #32]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	61fb      	str	r3, [r7, #28]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <xQueueGiveFromISR+0x58>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <xQueueGiveFromISR+0x5c>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <xQueueGiveFromISR+0x5e>
 8004f46:	2300      	movs	r3, #0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	61bb      	str	r3, [r7, #24]
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f62:	f001 fb49 	bl	80065f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f66:	f3ef 8211 	mrs	r2, BASEPRI
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	617a      	str	r2, [r7, #20]
 8004f7c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d22b      	bcs.n	8004fea <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d112      	bne.n	8004fd4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3324      	adds	r3, #36	; 0x24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fdb8 	bl	8005b30 <xTaskRemoveFromEventList>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e007      	b.n	8004fe4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd8:	3301      	adds	r3, #1
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	b25a      	sxtb	r2, r3
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe8:	e001      	b.n	8004fee <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3738      	adds	r7, #56	; 0x38
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08e      	sub	sp, #56	; 0x38
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	623b      	str	r3, [r7, #32]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	61fb      	str	r3, [r7, #28]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005054:	f000 ff28 	bl	8005ea8 <xTaskGetSchedulerState>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <xQueueSemaphoreTake+0x60>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <xQueueSemaphoreTake+0x64>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <xQueueSemaphoreTake+0x66>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	61bb      	str	r3, [r7, #24]
}
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005084:	f001 f9d6 	bl	8006434 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	2b00      	cmp	r3, #0
 8005092:	d024      	beq.n	80050de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	1e5a      	subs	r2, r3, #1
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050a4:	f001 f822 	bl	80060ec <pvTaskIncrementMutexHeldCount>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00f      	beq.n	80050d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	3310      	adds	r3, #16
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fd38 	bl	8005b30 <xTaskRemoveFromEventList>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050c6:	4b54      	ldr	r3, [pc, #336]	; (8005218 <xQueueSemaphoreTake+0x214>)
 80050c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050d6:	f001 f9dd 	bl	8006494 <vPortExitCritical>
				return pdPASS;
 80050da:	2301      	movs	r3, #1
 80050dc:	e097      	b.n	800520e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d111      	bne.n	8005108 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	617b      	str	r3, [r7, #20]
}
 80050fc:	bf00      	nop
 80050fe:	e7fe      	b.n	80050fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005100:	f001 f9c8 	bl	8006494 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005104:	2300      	movs	r3, #0
 8005106:	e082      	b.n	800520e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fd6e 	bl	8005bf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511c:	f001 f9ba 	bl	8006494 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005120:	f000 fb24 	bl	800576c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005124:	f001 f986 	bl	8006434 <vPortEnterCritical>
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d103      	bne.n	800513e <xQueueSemaphoreTake+0x13a>
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005144:	b25b      	sxtb	r3, r3
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d103      	bne.n	8005154 <xQueueSemaphoreTake+0x150>
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005154:	f001 f99e 	bl	8006494 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005158:	463a      	mov	r2, r7
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fd5d 	bl	8005c20 <xTaskCheckForTimeOut>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d132      	bne.n	80051d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516e:	f000 f8bf 	bl	80052f0 <prvIsQueueEmpty>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d026      	beq.n	80051c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005180:	f001 f958 	bl	8006434 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 feab 	bl	8005ee4 <xTaskPriorityInherit>
 800518e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005190:	f001 f980 	bl	8006494 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fca3 	bl	8005ae8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051a4:	f000 f852 	bl	800524c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051a8:	f000 faee 	bl	8005788 <xTaskResumeAll>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f47f af68 	bne.w	8005084 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80051b4:	4b18      	ldr	r3, [pc, #96]	; (8005218 <xQueueSemaphoreTake+0x214>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	e75e      	b.n	8005084 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c8:	f000 f840 	bl	800524c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051cc:	f000 fadc 	bl	8005788 <xTaskResumeAll>
 80051d0:	e758      	b.n	8005084 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80051d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051d4:	f000 f83a 	bl	800524c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051d8:	f000 fad6 	bl	8005788 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051de:	f000 f887 	bl	80052f0 <prvIsQueueEmpty>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f43f af4d 	beq.w	8005084 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00d      	beq.n	800520c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80051f0:	f001 f920 	bl	8006434 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80051f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f6:	f000 f811 	bl	800521c <prvGetDisinheritPriorityAfterTimeout>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fee4 	bl	8005fd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005208:	f001 f944 	bl	8006494 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800520c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800520e:	4618      	mov	r0, r3
 8005210:	3738      	adds	r7, #56	; 0x38
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1c3 0307 	rsb	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e001      	b.n	800523e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800523e:	68fb      	ldr	r3, [r7, #12]
	}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005254:	f001 f8ee 	bl	8006434 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005260:	e011      	b.n	8005286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3324      	adds	r3, #36	; 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fc5e 	bl	8005b30 <xTaskRemoveFromEventList>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800527a:	f000 fd33 	bl	8005ce4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800527e:	7bfb      	ldrb	r3, [r7, #15]
 8005280:	3b01      	subs	r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	dce9      	bgt.n	8005262 <prvUnlockQueue+0x16>
 800528e:	e000      	b.n	8005292 <prvUnlockQueue+0x46>
					break;
 8005290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	22ff      	movs	r2, #255	; 0xff
 8005296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800529a:	f001 f8fb 	bl	8006494 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800529e:	f001 f8c9 	bl	8006434 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052aa:	e011      	b.n	80052d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d012      	beq.n	80052da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fc39 	bl	8005b30 <xTaskRemoveFromEventList>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052c4:	f000 fd0e 	bl	8005ce4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	dce9      	bgt.n	80052ac <prvUnlockQueue+0x60>
 80052d8:	e000      	b.n	80052dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	22ff      	movs	r2, #255	; 0xff
 80052e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052e4:	f001 f8d6 	bl	8006494 <vPortExitCritical>
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052f8:	f001 f89c 	bl	8006434 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e001      	b.n	800530e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800530e:	f001 f8c1 	bl	8006494 <vPortExitCritical>

	return xReturn;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08e      	sub	sp, #56	; 0x38
 8005320:	af04      	add	r7, sp, #16
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	623b      	str	r3, [r7, #32]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xTaskCreateStatic+0x46>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005362:	2354      	movs	r3, #84	; 0x54
 8005364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b54      	cmp	r3, #84	; 0x54
 800536a:	d00a      	beq.n	8005382 <xTaskCreateStatic+0x66>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	61bb      	str	r3, [r7, #24]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01e      	beq.n	80053c8 <xTaskCreateStatic+0xac>
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053a2:	2300      	movs	r3, #0
 80053a4:	9303      	str	r3, [sp, #12]
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	f107 0314 	add.w	r3, r7, #20
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f850 	bl	8005460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053c2:	f000 f8d5 	bl	8005570 <prvAddNewTaskToReadyList>
 80053c6:	e001      	b.n	80053cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053cc:	697b      	ldr	r3, [r7, #20]
	}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08c      	sub	sp, #48	; 0x30
 80053da:	af04      	add	r7, sp, #16
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 f944 	bl	8006678 <pvPortMalloc>
 80053f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00e      	beq.n	8005416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053f8:	2054      	movs	r0, #84	; 0x54
 80053fa:	f001 f93d 	bl	8006678 <pvPortMalloc>
 80053fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
 800540c:	e005      	b.n	800541a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800540e:	6978      	ldr	r0, [r7, #20]
 8005410:	f001 f9fe 	bl	8006810 <vPortFree>
 8005414:	e001      	b.n	800541a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d017      	beq.n	8005450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	2300      	movs	r3, #0
 800542c:	9303      	str	r3, [sp, #12]
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	9302      	str	r3, [sp, #8]
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	9301      	str	r3, [sp, #4]
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f80e 	bl	8005460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005444:	69f8      	ldr	r0, [r7, #28]
 8005446:	f000 f893 	bl	8005570 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800544a:	2301      	movs	r3, #1
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e002      	b.n	8005456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005456:	69bb      	ldr	r3, [r7, #24]
	}
 8005458:	4618      	mov	r0, r3
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005478:	3b01      	subs	r3, #1
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f023 0307 	bic.w	r3, r3, #7
 8005486:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	617b      	str	r3, [r7, #20]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01f      	beq.n	80054ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e012      	b.n	80054da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	7819      	ldrb	r1, [r3, #0]
 80054bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	3334      	adds	r3, #52	; 0x34
 80054c4:	460a      	mov	r2, r1
 80054c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b0f      	cmp	r3, #15
 80054de:	d9e9      	bls.n	80054b4 <prvInitialiseNewTask+0x54>
 80054e0:	e000      	b.n	80054e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80054e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054ec:	e003      	b.n	80054f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	2b06      	cmp	r3, #6
 80054fa:	d901      	bls.n	8005500 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054fc:	2306      	movs	r3, #6
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005504:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	3304      	adds	r3, #4
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fb91 	bl	8004c3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	3318      	adds	r3, #24
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fb8c 	bl	8004c3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	f1c3 0207 	rsb	r2, r3, #7
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	2200      	movs	r2, #0
 8005540:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	69b8      	ldr	r0, [r7, #24]
 8005550:	f000 fe46 	bl	80061e0 <pxPortInitialiseStack>
 8005554:	4602      	mov	r2, r0
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	bf00      	nop
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005578:	f000 ff5c 	bl	8006434 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800557c:	4b2a      	ldr	r3, [pc, #168]	; (8005628 <prvAddNewTaskToReadyList+0xb8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a29      	ldr	r2, [pc, #164]	; (8005628 <prvAddNewTaskToReadyList+0xb8>)
 8005584:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005586:	4b29      	ldr	r3, [pc, #164]	; (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800558e:	4a27      	ldr	r2, [pc, #156]	; (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005594:	4b24      	ldr	r3, [pc, #144]	; (8005628 <prvAddNewTaskToReadyList+0xb8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d110      	bne.n	80055be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800559c:	f000 fbc6 	bl	8005d2c <prvInitialiseTaskLists>
 80055a0:	e00d      	b.n	80055be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <prvAddNewTaskToReadyList+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d109      	bne.n	80055be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <prvAddNewTaskToReadyList+0xbc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d802      	bhi.n	80055be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055b8:	4a1c      	ldr	r2, [pc, #112]	; (800562c <prvAddNewTaskToReadyList+0xbc>)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055be:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <prvAddNewTaskToReadyList+0xc4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <prvAddNewTaskToReadyList+0xc4>)
 80055c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	2201      	movs	r2, #1
 80055ce:	409a      	lsls	r2, r3
 80055d0:	4b19      	ldr	r3, [pc, #100]	; (8005638 <prvAddNewTaskToReadyList+0xc8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <prvAddNewTaskToReadyList+0xc8>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4a15      	ldr	r2, [pc, #84]	; (800563c <prvAddNewTaskToReadyList+0xcc>)
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4610      	mov	r0, r2
 80055f2:	f7ff fb31 	bl	8004c58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055f6:	f000 ff4d 	bl	8006494 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <prvAddNewTaskToReadyList+0xc0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <prvAddNewTaskToReadyList+0xbc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d207      	bcs.n	8005620 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <prvAddNewTaskToReadyList+0xd0>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	2000250c 	.word	0x2000250c
 800562c:	2000240c 	.word	0x2000240c
 8005630:	20002518 	.word	0x20002518
 8005634:	20002528 	.word	0x20002528
 8005638:	20002514 	.word	0x20002514
 800563c:	20002410 	.word	0x20002410
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d017      	beq.n	8005686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005656:	4b13      	ldr	r3, [pc, #76]	; (80056a4 <vTaskDelay+0x60>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <vTaskDelay+0x30>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	60bb      	str	r3, [r7, #8]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005674:	f000 f87a 	bl	800576c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005678:	2100      	movs	r1, #0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fd4a 	bl	8006114 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005680:	f000 f882 	bl	8005788 <xTaskResumeAll>
 8005684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d107      	bne.n	800569c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <vTaskDelay+0x64>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20002534 	.word	0x20002534
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056ba:	463a      	mov	r2, r7
 80056bc:	1d39      	adds	r1, r7, #4
 80056be:	f107 0308 	add.w	r3, r7, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fb fcea 	bl	800109c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	9202      	str	r2, [sp, #8]
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	2300      	movs	r3, #0
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	2300      	movs	r3, #0
 80056d8:	460a      	mov	r2, r1
 80056da:	491e      	ldr	r1, [pc, #120]	; (8005754 <vTaskStartScheduler+0xa8>)
 80056dc:	481e      	ldr	r0, [pc, #120]	; (8005758 <vTaskStartScheduler+0xac>)
 80056de:	f7ff fe1d 	bl	800531c <xTaskCreateStatic>
 80056e2:	4603      	mov	r3, r0
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <vTaskStartScheduler+0xb0>)
 80056e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <vTaskStartScheduler+0xb0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e001      	b.n	80056fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d116      	bne.n	800572e <vTaskStartScheduler+0x82>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	613b      	str	r3, [r7, #16]
}
 8005712:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <vTaskStartScheduler+0xb4>)
 8005716:	f04f 32ff 	mov.w	r2, #4294967295
 800571a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <vTaskStartScheduler+0xb8>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <vTaskStartScheduler+0xbc>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005728:	f000 fde2 	bl	80062f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800572c:	e00e      	b.n	800574c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d10a      	bne.n	800574c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60fb      	str	r3, [r7, #12]
}
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <vTaskStartScheduler+0x9e>
}
 800574c:	bf00      	nop
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	0800bb30 	.word	0x0800bb30
 8005758:	08005cfd 	.word	0x08005cfd
 800575c:	20002530 	.word	0x20002530
 8005760:	2000252c 	.word	0x2000252c
 8005764:	20002518 	.word	0x20002518
 8005768:	20002510 	.word	0x20002510

0800576c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <vTaskSuspendAll+0x18>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	4a03      	ldr	r2, [pc, #12]	; (8005784 <vTaskSuspendAll+0x18>)
 8005778:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800577a:	bf00      	nop
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20002534 	.word	0x20002534

08005788 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <xTaskResumeAll+0x114>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	603b      	str	r3, [r7, #0]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057b4:	f000 fe3e 	bl	8006434 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057b8:	4b38      	ldr	r3, [pc, #224]	; (800589c <xTaskResumeAll+0x114>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3b01      	subs	r3, #1
 80057be:	4a37      	ldr	r2, [pc, #220]	; (800589c <xTaskResumeAll+0x114>)
 80057c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c2:	4b36      	ldr	r3, [pc, #216]	; (800589c <xTaskResumeAll+0x114>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d161      	bne.n	800588e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ca:	4b35      	ldr	r3, [pc, #212]	; (80058a0 <xTaskResumeAll+0x118>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d05d      	beq.n	800588e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d2:	e02e      	b.n	8005832 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d4:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <xTaskResumeAll+0x11c>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3318      	adds	r3, #24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7ff fa96 	bl	8004d12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff fa91 	bl	8004d12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	2201      	movs	r2, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <xTaskResumeAll+0x120>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <xTaskResumeAll+0x120>)
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4a27      	ldr	r2, [pc, #156]	; (80058ac <xTaskResumeAll+0x124>)
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3304      	adds	r3, #4
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f7ff fa1d 	bl	8004c58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <xTaskResumeAll+0x128>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <xTaskResumeAll+0x12c>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005832:	4b1c      	ldr	r3, [pc, #112]	; (80058a4 <xTaskResumeAll+0x11c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1cc      	bne.n	80057d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005840:	f000 fb12 	bl	8005e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005844:	4b1c      	ldr	r3, [pc, #112]	; (80058b8 <xTaskResumeAll+0x130>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d010      	beq.n	8005872 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005850:	f000 f836 	bl	80058c0 <xTaskIncrementTick>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <xTaskResumeAll+0x12c>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3b01      	subs	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f1      	bne.n	8005850 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800586c:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <xTaskResumeAll+0x130>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <xTaskResumeAll+0x12c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <xTaskResumeAll+0x134>)
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f000 fe01 	bl	8006494 <vPortExitCritical>

	return xAlreadyYielded;
 8005892:	68bb      	ldr	r3, [r7, #8]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20002534 	.word	0x20002534
 80058a0:	2000250c 	.word	0x2000250c
 80058a4:	200024cc 	.word	0x200024cc
 80058a8:	20002514 	.word	0x20002514
 80058ac:	20002410 	.word	0x20002410
 80058b0:	2000240c 	.word	0x2000240c
 80058b4:	20002520 	.word	0x20002520
 80058b8:	2000251c 	.word	0x2000251c
 80058bc:	e000ed04 	.word	0xe000ed04

080058c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ca:	4b4e      	ldr	r3, [pc, #312]	; (8005a04 <xTaskIncrementTick+0x144>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 808e 	bne.w	80059f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058d4:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <xTaskIncrementTick+0x148>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058dc:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <xTaskIncrementTick+0x148>)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d120      	bne.n	800592a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058e8:	4b48      	ldr	r3, [pc, #288]	; (8005a0c <xTaskIncrementTick+0x14c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <xTaskIncrementTick+0x48>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	603b      	str	r3, [r7, #0]
}
 8005904:	bf00      	nop
 8005906:	e7fe      	b.n	8005906 <xTaskIncrementTick+0x46>
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <xTaskIncrementTick+0x14c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b40      	ldr	r3, [pc, #256]	; (8005a10 <xTaskIncrementTick+0x150>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a3e      	ldr	r2, [pc, #248]	; (8005a0c <xTaskIncrementTick+0x14c>)
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <xTaskIncrementTick+0x150>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6013      	str	r3, [r2, #0]
 800591c:	4b3d      	ldr	r3, [pc, #244]	; (8005a14 <xTaskIncrementTick+0x154>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	4a3c      	ldr	r2, [pc, #240]	; (8005a14 <xTaskIncrementTick+0x154>)
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	f000 fa9f 	bl	8005e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800592a:	4b3b      	ldr	r3, [pc, #236]	; (8005a18 <xTaskIncrementTick+0x158>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d348      	bcc.n	80059c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005934:	4b35      	ldr	r3, [pc, #212]	; (8005a0c <xTaskIncrementTick+0x14c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800593e:	4b36      	ldr	r3, [pc, #216]	; (8005a18 <xTaskIncrementTick+0x158>)
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	601a      	str	r2, [r3, #0]
					break;
 8005946:	e03e      	b.n	80059c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <xTaskIncrementTick+0x14c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d203      	bcs.n	8005968 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005960:	4a2d      	ldr	r2, [pc, #180]	; (8005a18 <xTaskIncrementTick+0x158>)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005966:	e02e      	b.n	80059c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	3304      	adds	r3, #4
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f9d0 	bl	8004d12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	3318      	adds	r3, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff f9c7 	bl	8004d12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	409a      	lsls	r2, r3
 800598c:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <xTaskIncrementTick+0x15c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <xTaskIncrementTick+0x15c>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a1f      	ldr	r2, [pc, #124]	; (8005a20 <xTaskIncrementTick+0x160>)
 80059a4:	441a      	add	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7ff f953 	bl	8004c58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <xTaskIncrementTick+0x164>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d3b9      	bcc.n	8005934 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059c0:	2301      	movs	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c4:	e7b6      	b.n	8005934 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059c6:	4b17      	ldr	r3, [pc, #92]	; (8005a24 <xTaskIncrementTick+0x164>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	4914      	ldr	r1, [pc, #80]	; (8005a20 <xTaskIncrementTick+0x160>)
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d901      	bls.n	80059e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <xTaskIncrementTick+0x168>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	e004      	b.n	80059fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <xTaskIncrementTick+0x16c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a0d      	ldr	r2, [pc, #52]	; (8005a2c <xTaskIncrementTick+0x16c>)
 80059f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059fa:	697b      	ldr	r3, [r7, #20]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20002534 	.word	0x20002534
 8005a08:	20002510 	.word	0x20002510
 8005a0c:	200024c4 	.word	0x200024c4
 8005a10:	200024c8 	.word	0x200024c8
 8005a14:	20002524 	.word	0x20002524
 8005a18:	2000252c 	.word	0x2000252c
 8005a1c:	20002514 	.word	0x20002514
 8005a20:	20002410 	.word	0x20002410
 8005a24:	2000240c 	.word	0x2000240c
 8005a28:	20002520 	.word	0x20002520
 8005a2c:	2000251c 	.word	0x2000251c

08005a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a30:	b480      	push	{r7}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a36:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <vTaskSwitchContext+0xa4>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a3e:	4b26      	ldr	r3, [pc, #152]	; (8005ad8 <vTaskSwitchContext+0xa8>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a44:	e03f      	b.n	8005ac6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <vTaskSwitchContext+0xa8>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <vTaskSwitchContext+0xac>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	fab3 f383 	clz	r3, r3
 8005a58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a5a:	7afb      	ldrb	r3, [r7, #11]
 8005a5c:	f1c3 031f 	rsb	r3, r3, #31
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	491f      	ldr	r1, [pc, #124]	; (8005ae0 <vTaskSwitchContext+0xb0>)
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	607b      	str	r3, [r7, #4]
}
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vTaskSwitchContext+0x5a>
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <vTaskSwitchContext+0xb0>)
 8005a98:	4413      	add	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	685a      	ldr	r2, [r3, #4]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	3308      	adds	r3, #8
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d104      	bne.n	8005abc <vTaskSwitchContext+0x8c>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <vTaskSwitchContext+0xb4>)
 8005ac4:	6013      	str	r3, [r2, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20002534 	.word	0x20002534
 8005ad8:	20002520 	.word	0x20002520
 8005adc:	20002514 	.word	0x20002514
 8005ae0:	20002410 	.word	0x20002410
 8005ae4:	2000240c 	.word	0x2000240c

08005ae8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	60fb      	str	r3, [r7, #12]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b0e:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <vTaskPlaceOnEventList+0x44>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3318      	adds	r3, #24
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff f8c2 	bl	8004ca0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	6838      	ldr	r0, [r7, #0]
 8005b20:	f000 faf8 	bl	8006114 <prvAddCurrentTaskToDelayedList>
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	2000240c 	.word	0x2000240c

08005b30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	e7fe      	b.n	8005b5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	3318      	adds	r3, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff f8d6 	bl	8004d12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <xTaskRemoveFromEventList+0xac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11c      	bne.n	8005ba8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3304      	adds	r3, #4
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff f8cd 	bl	8004d12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	409a      	lsls	r2, r3
 8005b80:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <xTaskRemoveFromEventList+0xb0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <xTaskRemoveFromEventList+0xb0>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <xTaskRemoveFromEventList+0xb4>)
 8005b98:	441a      	add	r2, r3
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	f7ff f859 	bl	8004c58 <vListInsertEnd>
 8005ba6:	e005      	b.n	8005bb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3318      	adds	r3, #24
 8005bac:	4619      	mov	r1, r3
 8005bae:	480e      	ldr	r0, [pc, #56]	; (8005be8 <xTaskRemoveFromEventList+0xb8>)
 8005bb0:	f7ff f852 	bl	8004c58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <xTaskRemoveFromEventList+0xbc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d905      	bls.n	8005bce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <xTaskRemoveFromEventList+0xc0>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e001      	b.n	8005bd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005bd2:	697b      	ldr	r3, [r7, #20]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20002534 	.word	0x20002534
 8005be0:	20002514 	.word	0x20002514
 8005be4:	20002410 	.word	0x20002410
 8005be8:	200024cc 	.word	0x200024cc
 8005bec:	2000240c 	.word	0x2000240c
 8005bf0:	20002520 	.word	0x20002520

08005bf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <vTaskInternalSetTimeOutState+0x24>)
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <vTaskInternalSetTimeOutState+0x28>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	605a      	str	r2, [r3, #4]
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	20002524 	.word	0x20002524
 8005c1c:	20002510 	.word	0x20002510

08005c20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60fb      	str	r3, [r7, #12]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c62:	f000 fbe7 	bl	8006434 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c66:	4b1d      	ldr	r3, [pc, #116]	; (8005cdc <xTaskCheckForTimeOut+0xbc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d102      	bne.n	8005c86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	e023      	b.n	8005cce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <xTaskCheckForTimeOut+0xc0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d007      	beq.n	8005ca2 <xTaskCheckForTimeOut+0x82>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d302      	bcc.n	8005ca2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e015      	b.n	8005cce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d20b      	bcs.n	8005cc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff9b 	bl	8005bf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	e004      	b.n	8005cce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cce:	f000 fbe1 	bl	8006494 <vPortExitCritical>

	return xReturn;
 8005cd2:	69fb      	ldr	r3, [r7, #28]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20002510 	.word	0x20002510
 8005ce0:	20002524 	.word	0x20002524

08005ce4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <vTaskMissedYield+0x14>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	20002520 	.word	0x20002520

08005cfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d04:	f000 f852 	bl	8005dac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <prvIdleTask+0x28>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d9f9      	bls.n	8005d04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d10:	4b05      	ldr	r3, [pc, #20]	; (8005d28 <prvIdleTask+0x2c>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d20:	e7f0      	b.n	8005d04 <prvIdleTask+0x8>
 8005d22:	bf00      	nop
 8005d24:	20002410 	.word	0x20002410
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d32:	2300      	movs	r3, #0
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e00c      	b.n	8005d52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4a12      	ldr	r2, [pc, #72]	; (8005d8c <prvInitialiseTaskLists+0x60>)
 8005d44:	4413      	add	r3, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe ff59 	bl	8004bfe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b06      	cmp	r3, #6
 8005d56:	d9ef      	bls.n	8005d38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d58:	480d      	ldr	r0, [pc, #52]	; (8005d90 <prvInitialiseTaskLists+0x64>)
 8005d5a:	f7fe ff50 	bl	8004bfe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d5e:	480d      	ldr	r0, [pc, #52]	; (8005d94 <prvInitialiseTaskLists+0x68>)
 8005d60:	f7fe ff4d 	bl	8004bfe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d64:	480c      	ldr	r0, [pc, #48]	; (8005d98 <prvInitialiseTaskLists+0x6c>)
 8005d66:	f7fe ff4a 	bl	8004bfe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d6a:	480c      	ldr	r0, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x70>)
 8005d6c:	f7fe ff47 	bl	8004bfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d70:	480b      	ldr	r0, [pc, #44]	; (8005da0 <prvInitialiseTaskLists+0x74>)
 8005d72:	f7fe ff44 	bl	8004bfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d76:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <prvInitialiseTaskLists+0x78>)
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <prvInitialiseTaskLists+0x64>)
 8005d7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvInitialiseTaskLists+0x7c>)
 8005d7e:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <prvInitialiseTaskLists+0x68>)
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20002410 	.word	0x20002410
 8005d90:	2000249c 	.word	0x2000249c
 8005d94:	200024b0 	.word	0x200024b0
 8005d98:	200024cc 	.word	0x200024cc
 8005d9c:	200024e0 	.word	0x200024e0
 8005da0:	200024f8 	.word	0x200024f8
 8005da4:	200024c4 	.word	0x200024c4
 8005da8:	200024c8 	.word	0x200024c8

08005dac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005db2:	e019      	b.n	8005de8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005db4:	f000 fb3e 	bl	8006434 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db8:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <prvCheckTasksWaitingTermination+0x50>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fe ffa4 	bl	8004d12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dca:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <prvCheckTasksWaitingTermination+0x54>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4a0b      	ldr	r2, [pc, #44]	; (8005e00 <prvCheckTasksWaitingTermination+0x54>)
 8005dd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005ddc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dde:	f000 fb59 	bl	8006494 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f810 	bl	8005e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <prvCheckTasksWaitingTermination+0x58>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e1      	bne.n	8005db4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200024e0 	.word	0x200024e0
 8005e00:	2000250c 	.word	0x2000250c
 8005e04:	200024f4 	.word	0x200024f4

08005e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d108      	bne.n	8005e2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fcf6 	bl	8006810 <vPortFree>
				vPortFree( pxTCB );
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fcf3 	bl	8006810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e2a:	e018      	b.n	8005e5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d103      	bne.n	8005e3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fcea 	bl	8006810 <vPortFree>
	}
 8005e3c:	e00f      	b.n	8005e5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d00a      	beq.n	8005e5e <prvDeleteTCB+0x56>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <prvDeleteTCB+0x54>
	}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <prvResetNextTaskUnblockTime+0x38>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d104      	bne.n	8005e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e80:	e008      	b.n	8005e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e82:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <prvResetNextTaskUnblockTime+0x38>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200024c4 	.word	0x200024c4
 8005ea4:	2000252c 	.word	0x2000252c

08005ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <xTaskGetSchedulerState+0x34>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	e008      	b.n	8005ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebc:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <xTaskGetSchedulerState+0x38>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e001      	b.n	8005ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ece:	687b      	ldr	r3, [r7, #4]
	}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20002518 	.word	0x20002518
 8005ee0:	20002534 	.word	0x20002534

08005ee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d05e      	beq.n	8005fb8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efe:	4b31      	ldr	r3, [pc, #196]	; (8005fc4 <xTaskPriorityInherit+0xe0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d24e      	bcs.n	8005fa6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	db06      	blt.n	8005f1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <xTaskPriorityInherit+0xe0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	f1c3 0207 	rsb	r2, r3, #7
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	6959      	ldr	r1, [r3, #20]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <xTaskPriorityInherit+0xe4>)
 8005f30:	4413      	add	r3, r2
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d12f      	bne.n	8005f96 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fee9 	bl	8004d12 <uxListRemove>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43da      	mvns	r2, r3
 8005f52:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <xTaskPriorityInherit+0xe8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4013      	ands	r3, r2
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <xTaskPriorityInherit+0xe8>)
 8005f5a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f5c:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <xTaskPriorityInherit+0xe0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <xTaskPriorityInherit+0xe8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <xTaskPriorityInherit+0xe8>)
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <xTaskPriorityInherit+0xe4>)
 8005f86:	441a      	add	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f7fe fe62 	bl	8004c58 <vListInsertEnd>
 8005f94:	e004      	b.n	8005fa0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <xTaskPriorityInherit+0xe0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e008      	b.n	8005fb8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <xTaskPriorityInherit+0xe0>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d201      	bcs.n	8005fb8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
	}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000240c 	.word	0x2000240c
 8005fc8:	20002410 	.word	0x20002410
 8005fcc:	20002514 	.word	0x20002514

08005fd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d077      	beq.n	80060d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10a      	bne.n	8006006 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	60fb      	str	r3, [r7, #12]
}
 8006002:	bf00      	nop
 8006004:	e7fe      	b.n	8006004 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d902      	bls.n	8006016 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	e002      	b.n	800601c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	429a      	cmp	r2, r3
 8006024:	d058      	beq.n	80060d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	429a      	cmp	r2, r3
 800602e:	d153      	bne.n	80060d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006030:	4b2b      	ldr	r3, [pc, #172]	; (80060e0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	429a      	cmp	r2, r3
 8006038:	d10a      	bne.n	8006050 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	60bb      	str	r3, [r7, #8]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	db04      	blt.n	800606e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f1c3 0207 	rsb	r2, r3, #7
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a19      	ldr	r2, [pc, #100]	; (80060e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800607e:	4413      	add	r3, r2
 8006080:	4299      	cmp	r1, r3
 8006082:	d129      	bne.n	80060d8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	3304      	adds	r3, #4
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fe42 	bl	8004d12 <uxListRemove>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2201      	movs	r2, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43da      	mvns	r2, r3
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4013      	ands	r3, r2
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	2201      	movs	r2, #1
 80060b0:	409a      	lsls	r2, r3
 80060b2:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	4a0b      	ldr	r2, [pc, #44]	; (80060e8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a06      	ldr	r2, [pc, #24]	; (80060e4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80060ca:	441a      	add	r2, r3
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fdc0 	bl	8004c58 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060d8:	bf00      	nop
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2000240c 	.word	0x2000240c
 80060e4:	20002410 	.word	0x20002410
 80060e8:	20002514 	.word	0x20002514

080060ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <pvTaskIncrementMutexHeldCount+0x24>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d004      	beq.n	8006102 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <pvTaskIncrementMutexHeldCount+0x24>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060fe:	3201      	adds	r2, #1
 8006100:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <pvTaskIncrementMutexHeldCount+0x24>)
 8006104:	681b      	ldr	r3, [r3, #0]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	2000240c 	.word	0x2000240c

08006114 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800611e:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006124:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fdf1 	bl	8004d12 <uxListRemove>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2201      	movs	r2, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	4b21      	ldr	r3, [pc, #132]	; (80061cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4013      	ands	r3, r2
 800614a:	4a20      	ldr	r2, [pc, #128]	; (80061cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800614c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d10a      	bne.n	800616c <prvAddCurrentTaskToDelayedList+0x58>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615c:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3304      	adds	r3, #4
 8006162:	4619      	mov	r1, r3
 8006164:	481a      	ldr	r0, [pc, #104]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006166:	f7fe fd77 	bl	8004c58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800616a:	e026      	b.n	80061ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006174:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d209      	bcs.n	8006198 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006184:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7fe fd85 	bl	8004ca0 <vListInsert>
}
 8006196:	e010      	b.n	80061ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fe fd7b 	bl	8004ca0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061aa:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d202      	bcs.n	80061ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80061b4:	4a09      	ldr	r2, [pc, #36]	; (80061dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	6013      	str	r3, [r2, #0]
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20002510 	.word	0x20002510
 80061c8:	2000240c 	.word	0x2000240c
 80061cc:	20002514 	.word	0x20002514
 80061d0:	200024f8 	.word	0x200024f8
 80061d4:	200024c8 	.word	0x200024c8
 80061d8:	200024c4 	.word	0x200024c4
 80061dc:	2000252c 	.word	0x2000252c

080061e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3b04      	subs	r3, #4
 80061f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b04      	subs	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f023 0201 	bic.w	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b04      	subs	r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <pxPortInitialiseStack+0x64>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3b14      	subs	r3, #20
 800621a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b04      	subs	r3, #4
 8006226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f06f 0202 	mvn.w	r2, #2
 800622e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3b20      	subs	r3, #32
 8006234:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006236:	68fb      	ldr	r3, [r7, #12]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	08006249 	.word	0x08006249

08006248 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <prvTaskExitError+0x54>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d00a      	beq.n	8006272 <prvTaskExitError+0x2a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <prvTaskExitError+0x28>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	60bb      	str	r3, [r7, #8]
}
 8006284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006286:	bf00      	nop
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0fc      	beq.n	8006288 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	2000000c 	.word	0x2000000c

080062a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <pxCurrentTCBConst2>)
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	6808      	ldr	r0, [r1, #0]
 80062a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	f380 8809 	msr	PSP, r0
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f04f 0000 	mov.w	r0, #0
 80062b6:	f380 8811 	msr	BASEPRI, r0
 80062ba:	4770      	bx	lr
 80062bc:	f3af 8000 	nop.w

080062c0 <pxCurrentTCBConst2>:
 80062c0:	2000240c 	.word	0x2000240c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop

080062c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062c8:	4808      	ldr	r0, [pc, #32]	; (80062ec <prvPortStartFirstTask+0x24>)
 80062ca:	6800      	ldr	r0, [r0, #0]
 80062cc:	6800      	ldr	r0, [r0, #0]
 80062ce:	f380 8808 	msr	MSP, r0
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8814 	msr	CONTROL, r0
 80062da:	b662      	cpsie	i
 80062dc:	b661      	cpsie	f
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	df00      	svc	0
 80062e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ea:	bf00      	nop
 80062ec:	e000ed08 	.word	0xe000ed08

080062f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062f6:	4b46      	ldr	r3, [pc, #280]	; (8006410 <xPortStartScheduler+0x120>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a46      	ldr	r2, [pc, #280]	; (8006414 <xPortStartScheduler+0x124>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d10a      	bne.n	8006316 <xPortStartScheduler+0x26>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	613b      	str	r3, [r7, #16]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006316:	4b3e      	ldr	r3, [pc, #248]	; (8006410 <xPortStartScheduler+0x120>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a3f      	ldr	r2, [pc, #252]	; (8006418 <xPortStartScheduler+0x128>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10a      	bne.n	8006336 <xPortStartScheduler+0x46>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006336:	4b39      	ldr	r3, [pc, #228]	; (800641c <xPortStartScheduler+0x12c>)
 8006338:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b2db      	uxtb	r3, r3
 8006340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	22ff      	movs	r2, #255	; 0xff
 8006346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006358:	b2da      	uxtb	r2, r3
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <xPortStartScheduler+0x130>)
 800635c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800635e:	4b31      	ldr	r3, [pc, #196]	; (8006424 <xPortStartScheduler+0x134>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006364:	e009      	b.n	800637a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006366:	4b2f      	ldr	r3, [pc, #188]	; (8006424 <xPortStartScheduler+0x134>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3b01      	subs	r3, #1
 800636c:	4a2d      	ldr	r2, [pc, #180]	; (8006424 <xPortStartScheduler+0x134>)
 800636e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	b2db      	uxtb	r3, r3
 8006378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006382:	2b80      	cmp	r3, #128	; 0x80
 8006384:	d0ef      	beq.n	8006366 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006386:	4b27      	ldr	r3, [pc, #156]	; (8006424 <xPortStartScheduler+0x134>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1c3 0307 	rsb	r3, r3, #7
 800638e:	2b04      	cmp	r3, #4
 8006390:	d00a      	beq.n	80063a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60bb      	str	r3, [r7, #8]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063a8:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <xPortStartScheduler+0x134>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	021b      	lsls	r3, r3, #8
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <xPortStartScheduler+0x134>)
 80063b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063b2:	4b1c      	ldr	r3, [pc, #112]	; (8006424 <xPortStartScheduler+0x134>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063ba:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <xPortStartScheduler+0x134>)
 80063bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063c6:	4b18      	ldr	r3, [pc, #96]	; (8006428 <xPortStartScheduler+0x138>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <xPortStartScheduler+0x138>)
 80063cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <xPortStartScheduler+0x138>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a14      	ldr	r2, [pc, #80]	; (8006428 <xPortStartScheduler+0x138>)
 80063d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063de:	f000 f8dd 	bl	800659c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <xPortStartScheduler+0x13c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063e8:	f000 f8fc 	bl	80065e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063ec:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xPortStartScheduler+0x140>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <xPortStartScheduler+0x140>)
 80063f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063f8:	f7ff ff66 	bl	80062c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063fc:	f7ff fb18 	bl	8005a30 <vTaskSwitchContext>
	prvTaskExitError();
 8006400:	f7ff ff22 	bl	8006248 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	e000ed00 	.word	0xe000ed00
 8006414:	410fc271 	.word	0x410fc271
 8006418:	410fc270 	.word	0x410fc270
 800641c:	e000e400 	.word	0xe000e400
 8006420:	20002538 	.word	0x20002538
 8006424:	2000253c 	.word	0x2000253c
 8006428:	e000ed20 	.word	0xe000ed20
 800642c:	2000000c 	.word	0x2000000c
 8006430:	e000ef34 	.word	0xe000ef34

08006434 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	607b      	str	r3, [r7, #4]
}
 800644c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <vPortEnterCritical+0x58>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <vPortEnterCritical+0x58>)
 8006456:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <vPortEnterCritical+0x58>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d10f      	bne.n	8006480 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <vPortEnterCritical+0x5c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00a      	beq.n	8006480 <vPortEnterCritical+0x4c>
	__asm volatile
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	603b      	str	r3, [r7, #0]
}
 800647c:	bf00      	nop
 800647e:	e7fe      	b.n	800647e <vPortEnterCritical+0x4a>
	}
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	2000000c 	.word	0x2000000c
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <vPortExitCritical+0x50>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <vPortExitCritical+0x24>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <vPortExitCritical+0x50>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3b01      	subs	r3, #1
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <vPortExitCritical+0x50>)
 80064c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064c2:	4b08      	ldr	r3, [pc, #32]	; (80064e4 <vPortExitCritical+0x50>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <vPortExitCritical+0x42>
 80064ca:	2300      	movs	r3, #0
 80064cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	f383 8811 	msr	BASEPRI, r3
}
 80064d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000000c 	.word	0x2000000c
	...

080064f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064f0:	f3ef 8009 	mrs	r0, PSP
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4b15      	ldr	r3, [pc, #84]	; (8006550 <pxCurrentTCBConst>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f01e 0f10 	tst.w	lr, #16
 8006500:	bf08      	it	eq
 8006502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006514:	f380 8811 	msr	BASEPRI, r0
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f7ff fa86 	bl	8005a30 <vTaskSwitchContext>
 8006524:	f04f 0000 	mov.w	r0, #0
 8006528:	f380 8811 	msr	BASEPRI, r0
 800652c:	bc09      	pop	{r0, r3}
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006536:	f01e 0f10 	tst.w	lr, #16
 800653a:	bf08      	it	eq
 800653c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006540:	f380 8809 	msr	PSP, r0
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst>:
 8006550:	2000240c 	.word	0x2000240c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	607b      	str	r3, [r7, #4]
}
 8006570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006572:	f7ff f9a5 	bl	80058c0 <xTaskIncrementTick>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <SysTick_Handler+0x40>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	2300      	movs	r3, #0
 8006586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <vPortSetupTimerInterrupt+0x34>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <vPortSetupTimerInterrupt+0x38>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <vPortSetupTimerInterrupt+0x3c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <vPortSetupTimerInterrupt+0x40>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	099b      	lsrs	r3, r3, #6
 80065b8:	4a09      	ldr	r2, [pc, #36]	; (80065e0 <vPortSetupTimerInterrupt+0x44>)
 80065ba:	3b01      	subs	r3, #1
 80065bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <vPortSetupTimerInterrupt+0x34>)
 80065c0:	2207      	movs	r2, #7
 80065c2:	601a      	str	r2, [r3, #0]
}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	e000e010 	.word	0xe000e010
 80065d4:	e000e018 	.word	0xe000e018
 80065d8:	20000000 	.word	0x20000000
 80065dc:	10624dd3 	.word	0x10624dd3
 80065e0:	e000e014 	.word	0xe000e014

080065e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065f4 <vPortEnableVFP+0x10>
 80065e8:	6801      	ldr	r1, [r0, #0]
 80065ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065ee:	6001      	str	r1, [r0, #0]
 80065f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065f2:	bf00      	nop
 80065f4:	e000ed88 	.word	0xe000ed88

080065f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065fe:	f3ef 8305 	mrs	r3, IPSR
 8006602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	d914      	bls.n	8006634 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <vPortValidateInterruptPriority+0x70>)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006614:	4b15      	ldr	r3, [pc, #84]	; (800666c <vPortValidateInterruptPriority+0x74>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	7afa      	ldrb	r2, [r7, #11]
 800661a:	429a      	cmp	r2, r3
 800661c:	d20a      	bcs.n	8006634 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <vPortValidateInterruptPriority+0x78>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <vPortValidateInterruptPriority+0x7c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d90a      	bls.n	800665a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	603b      	str	r3, [r7, #0]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <vPortValidateInterruptPriority+0x60>
	}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	e000e3f0 	.word	0xe000e3f0
 800666c:	20002538 	.word	0x20002538
 8006670:	e000ed0c 	.word	0xe000ed0c
 8006674:	2000253c 	.word	0x2000253c

08006678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006684:	f7ff f872 	bl	800576c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006688:	4b5b      	ldr	r3, [pc, #364]	; (80067f8 <pvPortMalloc+0x180>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006690:	f000 f920 	bl	80068d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006694:	4b59      	ldr	r3, [pc, #356]	; (80067fc <pvPortMalloc+0x184>)
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 8093 	bne.w	80067c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01d      	beq.n	80066e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80066a8:	2208      	movs	r2, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f003 0307 	and.w	r3, r3, #7
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d014      	beq.n	80066e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <pvPortMalloc+0x6c>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	617b      	str	r3, [r7, #20]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d06e      	beq.n	80067c8 <pvPortMalloc+0x150>
 80066ea:	4b45      	ldr	r3, [pc, #276]	; (8006800 <pvPortMalloc+0x188>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d869      	bhi.n	80067c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066f4:	4b43      	ldr	r3, [pc, #268]	; (8006804 <pvPortMalloc+0x18c>)
 80066f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066f8:	4b42      	ldr	r3, [pc, #264]	; (8006804 <pvPortMalloc+0x18c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066fe:	e004      	b.n	800670a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	429a      	cmp	r2, r3
 8006712:	d903      	bls.n	800671c <pvPortMalloc+0xa4>
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d1f1      	bne.n	8006700 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800671c:	4b36      	ldr	r3, [pc, #216]	; (80067f8 <pvPortMalloc+0x180>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006722:	429a      	cmp	r2, r3
 8006724:	d050      	beq.n	80067c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2208      	movs	r2, #8
 800672c:	4413      	add	r3, r2
 800672e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	2308      	movs	r3, #8
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	429a      	cmp	r2, r3
 8006746:	d91f      	bls.n	8006788 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <pvPortMalloc+0xf8>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	613b      	str	r3, [r7, #16]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006782:	69b8      	ldr	r0, [r7, #24]
 8006784:	f000 f908 	bl	8006998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <pvPortMalloc+0x188>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <pvPortMalloc+0x188>)
 8006794:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <pvPortMalloc+0x188>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <pvPortMalloc+0x190>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d203      	bcs.n	80067aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067a2:	4b17      	ldr	r3, [pc, #92]	; (8006800 <pvPortMalloc+0x188>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a18      	ldr	r2, [pc, #96]	; (8006808 <pvPortMalloc+0x190>)
 80067a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4b13      	ldr	r3, [pc, #76]	; (80067fc <pvPortMalloc+0x184>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067be:	4b13      	ldr	r3, [pc, #76]	; (800680c <pvPortMalloc+0x194>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3301      	adds	r3, #1
 80067c4:	4a11      	ldr	r2, [pc, #68]	; (800680c <pvPortMalloc+0x194>)
 80067c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067c8:	f7fe ffde 	bl	8005788 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <pvPortMalloc+0x174>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <pvPortMalloc+0x172>
	return pvReturn;
 80067ec:	69fb      	ldr	r3, [r7, #28]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3728      	adds	r7, #40	; 0x28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20007368 	.word	0x20007368
 80067fc:	2000737c 	.word	0x2000737c
 8006800:	2000736c 	.word	0x2000736c
 8006804:	20007360 	.word	0x20007360
 8006808:	20007370 	.word	0x20007370
 800680c:	20007374 	.word	0x20007374

08006810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04d      	beq.n	80068be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006822:	2308      	movs	r3, #8
 8006824:	425b      	negs	r3, r3
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4413      	add	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <vPortFree+0xb8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10a      	bne.n	8006854 <vPortFree+0x44>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	60fb      	str	r3, [r7, #12]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00a      	beq.n	8006872 <vPortFree+0x62>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	60bb      	str	r3, [r7, #8]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <vPortFree+0xb8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01e      	beq.n	80068be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11a      	bne.n	80068be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	4b0e      	ldr	r3, [pc, #56]	; (80068c8 <vPortFree+0xb8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	43db      	mvns	r3, r3
 8006892:	401a      	ands	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006898:	f7fe ff68 	bl	800576c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <vPortFree+0xbc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	4a09      	ldr	r2, [pc, #36]	; (80068cc <vPortFree+0xbc>)
 80068a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068aa:	6938      	ldr	r0, [r7, #16]
 80068ac:	f000 f874 	bl	8006998 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <vPortFree+0xc0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a06      	ldr	r2, [pc, #24]	; (80068d0 <vPortFree+0xc0>)
 80068b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068ba:	f7fe ff65 	bl	8005788 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000737c 	.word	0x2000737c
 80068cc:	2000736c 	.word	0x2000736c
 80068d0:	20007378 	.word	0x20007378

080068d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068da:	f644 6320 	movw	r3, #20000	; 0x4e20
 80068de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068e0:	4b27      	ldr	r3, [pc, #156]	; (8006980 <prvHeapInit+0xac>)
 80068e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00c      	beq.n	8006908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3307      	adds	r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0307 	bic.w	r3, r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <prvHeapInit+0xac>)
 8006904:	4413      	add	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <prvHeapInit+0xb0>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006912:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <prvHeapInit+0xb0>)
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	4413      	add	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006920:	2208      	movs	r2, #8
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1a9b      	subs	r3, r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a15      	ldr	r2, [pc, #84]	; (8006988 <prvHeapInit+0xb4>)
 8006934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006936:	4b14      	ldr	r3, [pc, #80]	; (8006988 <prvHeapInit+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <prvHeapInit+0xb4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <prvHeapInit+0xb4>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	4a0a      	ldr	r2, [pc, #40]	; (800698c <prvHeapInit+0xb8>)
 8006962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a09      	ldr	r2, [pc, #36]	; (8006990 <prvHeapInit+0xbc>)
 800696a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800696c:	4b09      	ldr	r3, [pc, #36]	; (8006994 <prvHeapInit+0xc0>)
 800696e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20002540 	.word	0x20002540
 8006984:	20007360 	.word	0x20007360
 8006988:	20007368 	.word	0x20007368
 800698c:	20007370 	.word	0x20007370
 8006990:	2000736c 	.word	0x2000736c
 8006994:	2000737c 	.word	0x2000737c

08006998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069a0:	4b28      	ldr	r3, [pc, #160]	; (8006a44 <prvInsertBlockIntoFreeList+0xac>)
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <prvInsertBlockIntoFreeList+0x14>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d8f7      	bhi.n	80069a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	4413      	add	r3, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d108      	bne.n	80069da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	441a      	add	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d118      	bne.n	8006a20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <prvInsertBlockIntoFreeList+0xb0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d00d      	beq.n	8006a16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	441a      	add	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e008      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <prvInsertBlockIntoFreeList+0xb0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e003      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d002      	beq.n	8006a36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a36:	bf00      	nop
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20007360 	.word	0x20007360
 8006a48:	20007368 	.word	0x20007368

08006a4c <LIDAR_start>:
#include "drv_LIDAR.h"
#include "stdio.h"

//Start scanning and export point cloud data
//Sustained response
int LIDAR_start(h_LIDAR_t * h_LIDAR){
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_START};
 8006a54:	f246 03a5 	movw	r3, #24741	; 0x60a5
 8006a58:	81bb      	strh	r3, [r7, #12]
	h_LIDAR->serial_drv.dma_receive(h_LIDAR->data_buff,DATA_BUFF_SIZE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	3271      	adds	r2, #113	; 0x71
 8006a62:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006a66:	4610      	mov	r0, r2
 8006a68:	4798      	blx	r3
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f107 020c 	add.w	r2, r7, #12
 8006a72:	2102      	movs	r1, #2
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
	return 0;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <LIDAR_stop>:

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 8006a8a:	f246 53a5 	movw	r3, #26021	; 0x65a5
 8006a8e:	81bb      	strh	r3, [r7, #12]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f107 020c 	add.w	r2, r7, #12
 8006a98:	2102      	movs	r1, #2
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	4798      	blx	r3
	return 0;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <LIDAR_get_info>:

//Get device information
//Single response
int LIDAR_get_info(h_LIDAR_t * h_LIDAR){
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b09d      	sub	sp, #116	; 0x74
 8006aac:	af10      	add	r7, sp, #64	; 0x40
 8006aae:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_INFO}; //Buffer de commande
 8006ab0:	f249 03a5 	movw	r3, #37029	; 0x90a5
 8006ab4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006abe:	2102      	movs	r1, #2
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff,INFO_BUFF_SIZE);
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aca:	324c      	adds	r2, #76	; 0x4c
 8006acc:	211b      	movs	r1, #27
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3

	h_LIDAR->device_info.start_sign=(h_LIDAR->info_buff[0]<<8)|h_LIDAR->info_buff[1];
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	b21a      	sxth	r2, r3
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006ae2:	b21b      	sxth	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b21b      	sxth	r3, r3
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	851a      	strh	r2, [r3, #40]	; 0x28
	h_LIDAR->device_info.lenght=(h_LIDAR->info_buff[2])|(h_LIDAR->info_buff[3]<<8)|(h_LIDAR->info_buff[4]<<16);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006af4:	461a      	mov	r2, r3
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	431a      	orrs	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b06:	041b      	lsls	r3, r3, #16
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
	h_LIDAR->device_info.mode=h_LIDAR->info_buff[5];
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	h_LIDAR->device_info.type_code=h_LIDAR->info_buff[6];
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	h_LIDAR->device_info.model=h_LIDAR->info_buff[7];
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	snprintf(h_LIDAR->device_info.firmware,6,"%d.%d",h_LIDAR->info_buff[8],h_LIDAR->info_buff[9]);
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	f103 0033 	add.w	r0, r3, #51	; 0x33
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b40:	461a      	mov	r2, r3
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	4a50      	ldr	r2, [pc, #320]	; (8006c90 <LIDAR_get_info+0x1e8>)
 8006b4e:	2106      	movs	r1, #6
 8006b50:	f001 fac4 	bl	80080dc <sniprintf>
	h_LIDAR->device_info.hardware=h_LIDAR->info_buff[10];
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	snprintf(h_LIDAR->device_info.serial,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",h_LIDAR->info_buff[11],h_LIDAR->info_buff[12],h_LIDAR->info_buff[13],h_LIDAR->info_buff[14],h_LIDAR->info_buff[15],h_LIDAR->info_buff[16],h_LIDAR->info_buff[17],h_LIDAR->info_buff[18],h_LIDAR->info_buff[19],h_LIDAR->info_buff[20],h_LIDAR->info_buff[21],h_LIDAR->info_buff[22],h_LIDAR->info_buff[23],h_LIDAR->info_buff[24],h_LIDAR->info_buff[25],h_LIDAR->info_buff[26]);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8006b6c:	469c      	mov	ip, r3
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b70:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006b74:	461d      	mov	r5, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b7c:	461e      	mov	r6, r3
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006bbc:	607b      	str	r3, [r7, #4]
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006bc4:	603b      	str	r3, [r7, #0]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006bcc:	461c      	mov	r4, r3
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006be4:	930e      	str	r3, [sp, #56]	; 0x38
 8006be6:	920d      	str	r2, [sp, #52]	; 0x34
 8006be8:	910c      	str	r1, [sp, #48]	; 0x30
 8006bea:	940b      	str	r4, [sp, #44]	; 0x2c
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	920a      	str	r2, [sp, #40]	; 0x28
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	9208      	str	r2, [sp, #32]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	9207      	str	r2, [sp, #28]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	9206      	str	r2, [sp, #24]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	9205      	str	r2, [sp, #20]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	9204      	str	r2, [sp, #16]
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	9601      	str	r6, [sp, #4]
 8006c12:	9500      	str	r5, [sp, #0]
 8006c14:	4663      	mov	r3, ip
 8006c16:	4a1f      	ldr	r2, [pc, #124]	; (8006c94 <LIDAR_get_info+0x1ec>)
 8006c18:	2111      	movs	r1, #17
 8006c1a:	f001 fa5f 	bl	80080dc <sniprintf>

	printf("Start sign : %x\r\n",h_LIDAR->device_info.start_sign);
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	4619      	mov	r1, r3
 8006c24:	481c      	ldr	r0, [pc, #112]	; (8006c98 <LIDAR_get_info+0x1f0>)
 8006c26:	f001 f9eb 	bl	8008000 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->device_info.lenght);
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	4619      	mov	r1, r3
 8006c30:	481a      	ldr	r0, [pc, #104]	; (8006c9c <LIDAR_get_info+0x1f4>)
 8006c32:	f001 f9e5 	bl	8008000 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->device_info.mode);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4818      	ldr	r0, [pc, #96]	; (8006ca0 <LIDAR_get_info+0x1f8>)
 8006c40:	f001 f9de 	bl	8008000 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->device_info.type_code);
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4815      	ldr	r0, [pc, #84]	; (8006ca4 <LIDAR_get_info+0x1fc>)
 8006c4e:	f001 f9d7 	bl	8008000 <iprintf>
	printf("Model %x\r\n",h_LIDAR->device_info.model);
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4813      	ldr	r0, [pc, #76]	; (8006ca8 <LIDAR_get_info+0x200>)
 8006c5c:	f001 f9d0 	bl	8008000 <iprintf>
	printf("Firmware version : %s\r\n",h_LIDAR->device_info.firmware);
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	3333      	adds	r3, #51	; 0x33
 8006c64:	4619      	mov	r1, r3
 8006c66:	4811      	ldr	r0, [pc, #68]	; (8006cac <LIDAR_get_info+0x204>)
 8006c68:	f001 f9ca 	bl	8008000 <iprintf>
	printf("Hardware version : %d\r\n",h_LIDAR->device_info.hardware);
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c72:	4619      	mov	r1, r3
 8006c74:	480e      	ldr	r0, [pc, #56]	; (8006cb0 <LIDAR_get_info+0x208>)
 8006c76:	f001 f9c3 	bl	8008000 <iprintf>
	printf("Serial number : %s\r\n",h_LIDAR->device_info.serial);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	333a      	adds	r3, #58	; 0x3a
 8006c7e:	4619      	mov	r1, r3
 8006c80:	480c      	ldr	r0, [pc, #48]	; (8006cb4 <LIDAR_get_info+0x20c>)
 8006c82:	f001 f9bd 	bl	8008000 <iprintf>

	return 0;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3734      	adds	r7, #52	; 0x34
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c90:	0800bb38 	.word	0x0800bb38
 8006c94:	0800bb40 	.word	0x0800bb40
 8006c98:	0800bb64 	.word	0x0800bb64
 8006c9c:	0800bb78 	.word	0x0800bb78
 8006ca0:	0800bb88 	.word	0x0800bb88
 8006ca4:	0800bb94 	.word	0x0800bb94
 8006ca8:	0800bba8 	.word	0x0800bba8
 8006cac:	0800bbb4 	.word	0x0800bbb4
 8006cb0:	0800bbcc 	.word	0x0800bbcc
 8006cb4:	0800bbe4 	.word	0x0800bbe4

08006cb8 <LIDAR_get_health_stat>:

//Get device health status
//Single response
int LIDAR_get_health_stat(h_LIDAR_t * h_LIDAR){
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_HEALTH}; //Buffer de commande
 8006cc0:	f249 13a5 	movw	r3, #37285	; 0x91a5
 8006cc4:	81bb      	strh	r3, [r7, #12]
	h_LIDAR->serial_drv.transmit(cmd_buff,2);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f107 020c 	add.w	r2, r7, #12
 8006cce:	2102      	movs	r1, #2
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff,HEALTH_BUFF_SIZE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	3267      	adds	r2, #103	; 0x67
 8006cdc:	210a      	movs	r1, #10
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4798      	blx	r3

	h_LIDAR->health_stat.start_sign=(h_LIDAR->health_buff[0]<<8)|h_LIDAR->health_buff[1];
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	b21a      	sxth	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	b21b      	sxth	r3, r3
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	831a      	strh	r2, [r3, #24]
	h_LIDAR->health_stat.lenght=(h_LIDAR->health_buff[2])|(h_LIDAR->health_buff[3]<<8)|(h_LIDAR->health_buff[4]<<16);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8006d04:	461a      	mov	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	61da      	str	r2, [r3, #28]
	h_LIDAR->health_stat.mode=h_LIDAR->health_buff[5];
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f883 2020 	strb.w	r2, [r3, #32]
	h_LIDAR->health_stat.type_code=h_LIDAR->health_buff[6];
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	h_LIDAR->health_stat.status_code=h_LIDAR->health_buff[7];
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	h_LIDAR->health_stat.error_code=h_LIDAR->health_buff[8]|(h_LIDAR->health_buff[9]<<8);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8006d4a:	b21a      	sxth	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	b21b      	sxth	r3, r3
 8006d56:	4313      	orrs	r3, r2
 8006d58:	b21b      	sxth	r3, r3
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	849a      	strh	r2, [r3, #36]	; 0x24

	printf("Start sign : %x\r\n",h_LIDAR->health_stat.start_sign);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8b1b      	ldrh	r3, [r3, #24]
 8006d64:	4619      	mov	r1, r3
 8006d66:	4814      	ldr	r0, [pc, #80]	; (8006db8 <LIDAR_get_health_stat+0x100>)
 8006d68:	f001 f94a 	bl	8008000 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->health_stat.lenght);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	4619      	mov	r1, r3
 8006d72:	4812      	ldr	r0, [pc, #72]	; (8006dbc <LIDAR_get_health_stat+0x104>)
 8006d74:	f001 f944 	bl	8008000 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->health_stat.mode);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	480f      	ldr	r0, [pc, #60]	; (8006dc0 <LIDAR_get_health_stat+0x108>)
 8006d82:	f001 f93d 	bl	8008000 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->health_stat.type_code);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	480d      	ldr	r0, [pc, #52]	; (8006dc4 <LIDAR_get_health_stat+0x10c>)
 8006d90:	f001 f936 	bl	8008000 <iprintf>
	printf("Status code : %x\r\n",h_LIDAR->health_stat.status_code);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	480a      	ldr	r0, [pc, #40]	; (8006dc8 <LIDAR_get_health_stat+0x110>)
 8006d9e:	f001 f92f 	bl	8008000 <iprintf>
	printf("Error code : %x\r\n",h_LIDAR->health_stat.error_code);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006da6:	4619      	mov	r1, r3
 8006da8:	4808      	ldr	r0, [pc, #32]	; (8006dcc <LIDAR_get_health_stat+0x114>)
 8006daa:	f001 f929 	bl	8008000 <iprintf>

	return 0;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	0800bb64 	.word	0x0800bb64
 8006dbc:	0800bb78 	.word	0x0800bb78
 8006dc0:	0800bb88 	.word	0x0800bb88
 8006dc4:	0800bb94 	.word	0x0800bb94
 8006dc8:	0800bbfc 	.word	0x0800bbfc
 8006dcc:	0800bc10 	.word	0x0800bc10

08006dd0 <LIDAR_process_frame>:
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
	return 0;
}

void LIDAR_process_frame(h_LIDAR_t * LIDAR){
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	uint16_t Si;
	int Di;
	int Ai;
	int AngleFSA=(LIDAR->processing.FSA>>1); //64
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 3848 	ldrh.w	r3, [r3, #2120]	; 0x848
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	623b      	str	r3, [r7, #32]
	int AngleLSA=(LIDAR->processing.LSA>>1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8b3 384a 	ldrh.w	r3, [r3, #2122]	; 0x84a
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	61fb      	str	r3, [r7, #28]
	int index;
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
 8006df4:	e062      	b.n	8006ebc <LIDAR_process_frame+0xec>
		Si=LIDAR->processing.frame_buff[2*i]|(LIDAR->processing.frame_buff[2*i+1]<<8);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e02:	331f      	adds	r3, #31
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b21a      	sxth	r2, r3
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	440b      	add	r3, r1
 8006e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e16:	331f      	adds	r3, #31
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	b21b      	sxth	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b21b      	sxth	r3, r3
 8006e22:	837b      	strh	r3, [r7, #26]
		Di=Si/4; //Distance du point i
 8006e24:	8b7b      	ldrh	r3, [r7, #26]
 8006e26:	089b      	lsrs	r3, r3, #2
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	617b      	str	r3, [r7, #20]
		Ai=AngleFSA/64+i*(AngleLSA-AngleFSA)/64/(LIDAR->processing.LSN-1);
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da00      	bge.n	8006e34 <LIDAR_process_frame+0x64>
 8006e32:	333f      	adds	r3, #63	; 0x3f
 8006e34:	119b      	asrs	r3, r3, #6
 8006e36:	4619      	mov	r1, r3
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e40:	fb02 f303 	mul.w	r3, r2, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da00      	bge.n	8006e4a <LIDAR_process_frame+0x7a>
 8006e48:	333f      	adds	r3, #63	; 0x3f
 8006e4a:	119b      	asrs	r3, r3, #6
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3847 	ldrb.w	r3, [r3, #2119]	; 0x847
 8006e54:	3b01      	subs	r3, #1
 8006e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e5a:	440b      	add	r3, r1
 8006e5c:	613b      	str	r3, [r7, #16]
		index = round(Ai);
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7f9 fb80 	bl	8000564 <__aeabi_i2d>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f7f9 fe94 	bl	8000b98 <__aeabi_d2iz>
 8006e70:	4603      	mov	r3, r0
 8006e72:	60fb      	str	r3, [r7, #12]

		if(Di>2000){ //On affiche pas les points trop loin
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006e7a:	dd08      	ble.n	8006e8e <LIDAR_process_frame+0xbe>
			LIDAR->processing.point_buff[index]=0;
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	2200      	movs	r2, #0
 8006e8a:	605a      	str	r2, [r3, #4]
 8006e8c:	e013      	b.n	8006eb6 <LIDAR_process_frame+0xe6>
		}
		else if(Di<40){
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b27      	cmp	r3, #39	; 0x27
 8006e92:	dc08      	bgt.n	8006ea6 <LIDAR_process_frame+0xd6>
			LIDAR->processing.point_buff[index]=0;
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
 8006ea4:	e007      	b.n	8006eb6 <LIDAR_process_frame+0xe6>
		}
		else{
			LIDAR->processing.point_buff[index]=Di;
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	605a      	str	r2, [r3, #4]
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	3301      	adds	r3, #1
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 384e 	ldrb.w	r3, [r3, #2126]	; 0x84e
 8006ec2:	085b      	lsrs	r3, r3, #1
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	db93      	blt.n	8006df6 <LIDAR_process_frame+0x26>
		}
	}
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	3728      	adds	r7, #40	; 0x28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <calculer_distance_moyenne>:

// Fonction pour calculer la distance moyenne
int calculer_distance_moyenne(int distances[], int debut, int fin) {
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
	int somme = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	e00a      	b.n	8006f04 <calculer_distance_moyenne+0x2c>
		somme += distances[i];
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4413      	add	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3301      	adds	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	ddf0      	ble.n	8006eee <calculer_distance_moyenne+0x16>
	}
	return somme / (fin - debut + 1);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	3301      	adds	r3, #1
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <find_clusters>:

//Fonction pour regrouper les points proches en clusters
void find_clusters(h_LIDAR_t * LIDAR) {
 8006f28:	b5b0      	push	{r4, r5, r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

	int * distances=LIDAR->processing.filtred_buff;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8006f36:	331c      	adds	r3, #28
 8006f38:	61bb      	str	r3, [r7, #24]
	int cluster_count = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24

	// Parcourir les 360 degrés pour regrouper les valeurs en clusters
	int debut_cluster = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < NB_DEGRES; i++) {
 8006f42:	2301      	movs	r3, #1
 8006f44:	61fb      	str	r3, [r7, #28]
 8006f46:	e05c      	b.n	8007002 <find_clusters+0xda>
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4413      	add	r3, r2
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	440b      	add	r3, r1
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7f9 fafd 	bl	8000564 <__aeabi_i2d>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4614      	mov	r4, r2
 8006f70:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006f74:	a346      	add	r3, pc, #280	; (adr r3, 8007090 <find_clusters+0x168>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	f7f9 fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d039      	beq.n	8006ffc <find_clusters+0xd4>
			// Calcul de la distance moyenne pour le cluster
			int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	6a39      	ldr	r1, [r7, #32]
 8006f90:	69b8      	ldr	r0, [r7, #24]
 8006f92:	f7ff ffa1 	bl	8006ed8 <calculer_distance_moyenne>
 8006f96:	60f8      	str	r0, [r7, #12]

			// Calcul de l'angle moyen pour le cluster
			int angle_moyen = (debut_cluster + i - 1) / 2;
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	0fda      	lsrs	r2, r3, #31
 8006fa2:	4413      	add	r3, r2
 8006fa4:	105b      	asrs	r3, r3, #1
 8006fa6:	60bb      	str	r3, [r7, #8]

			// Stockage des valeurs du cluster dans la structure
			LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	4613      	mov	r3, r2
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8006fba:	331c      	adds	r3, #28
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	6a3b      	ldr	r3, [r7, #32]
 8006fda:	1ad1      	subs	r1, r2, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4403      	add	r3, r0
 8006fea:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8006fee:	3304      	adds	r3, #4
 8006ff0:	6019      	str	r1, [r3, #0]

			debut_cluster = i;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	623b      	str	r3, [r7, #32]
			cluster_count++;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < NB_DEGRES; i++) {
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	3301      	adds	r3, #1
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8007008:	db9e      	blt.n	8006f48 <find_clusters+0x20>
		}
	}

	// Traitement du dernier cluster
	int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 800700a:	f240 1267 	movw	r2, #359	; 0x167
 800700e:	6a39      	ldr	r1, [r7, #32]
 8007010:	69b8      	ldr	r0, [r7, #24]
 8007012:	f7ff ff61 	bl	8006ed8 <calculer_distance_moyenne>
 8007016:	6178      	str	r0, [r7, #20]
	int angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f203 1367 	addw	r3, r3, #359	; 0x167
 800701e:	0fda      	lsrs	r2, r3, #31
 8007020:	4413      	add	r3, r2
 8007022:	105b      	asrs	r3, r3, #1
 8007024:	613b      	str	r3, [r7, #16]
	LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702a:	4613      	mov	r3, r2
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	440b      	add	r3, r1
 8007034:	f503 53dd 	add.w	r3, r3, #7072	; 0x1ba0
 8007038:	331c      	adds	r3, #28
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007042:	4613      	mov	r3, r2
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	f5c3 71b4 	rsb	r1, r3, #360	; 0x168
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705e:	4613      	mov	r3, r2
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4403      	add	r3, r0
 8007068:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800706c:	3304      	adds	r3, #4
 800706e:	6019      	str	r1, [r3, #0]
	cluster_count++;
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	3301      	adds	r3, #1
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
	LIDAR->processing.cluster_cnt=cluster_count;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	461a      	mov	r2, r3
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	f8c2 3e14 	str.w	r3, [r2, #3604]	; 0xe14
}
 8007084:	bf00      	nop
 8007086:	3728      	adds	r7, #40	; 0x28
 8007088:	46bd      	mov	sp, r7
 800708a:	bdb0      	pop	{r4, r5, r7, pc}
 800708c:	f3af 8000 	nop.w
 8007090:	00000000 	.word	0x00000000
 8007094:	4062c000 	.word	0x4062c000

08007098 <medianFilter>:

void medianFilter(h_LIDAR_t * LIDAR) {
 8007098:	b480      	push	{r7}
 800709a:	b091      	sub	sp, #68	; 0x44
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	int * signal=LIDAR->processing.point_buff; //points non filtrés
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 80070a6:	331c      	adds	r3, #28
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int signal_length=NB_DEGRES;
 80070aa:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
	int window[5];
	int i, j, k, middle;

	// La médiane se trouve au milieu de la fenêtre triée
	middle = 5 / 2;
 80070b0:	2302      	movs	r3, #2
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < signal_length; i++) {
 80070b4:	2300      	movs	r3, #0
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b8:	e070      	b.n	800719c <medianFilter+0x104>
		// Construire la fenêtre avec les données autour du point i
		for (j = 0; j < 5; j++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80070be:	e01f      	b.n	8007100 <medianFilter+0x68>
			int index = i - middle + j;
 80070c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c8:	4413      	add	r3, r2
 80070ca:	633b      	str	r3, [r7, #48]	; 0x30
			// Gérer les bords du signal
			if (index < 0) index = 0;
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da01      	bge.n	80070d6 <medianFilter+0x3e>
 80070d2:	2300      	movs	r3, #0
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30
			if (index >= signal_length) index = signal_length - 1;
 80070d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	429a      	cmp	r2, r3
 80070dc:	db02      	blt.n	80070e4 <medianFilter+0x4c>
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	3b01      	subs	r3, #1
 80070e2:	633b      	str	r3, [r7, #48]	; 0x30
			window[j] = signal[index];
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ea:	4413      	add	r3, r2
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	3340      	adds	r3, #64	; 0x40
 80070f4:	443b      	add	r3, r7
 80070f6:	f843 2c34 	str.w	r2, [r3, #-52]
		for (j = 0; j < 5; j++) {
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	3301      	adds	r3, #1
 80070fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	2b04      	cmp	r3, #4
 8007104:	dddc      	ble.n	80070c0 <medianFilter+0x28>
		}

		// Trier la fenêtre pour trouver la valeur médiane
		for (j = 0; j < 5; j++) {
 8007106:	2300      	movs	r3, #0
 8007108:	63bb      	str	r3, [r7, #56]	; 0x38
 800710a:	e034      	b.n	8007176 <medianFilter+0xde>
			for (k = j + 1; k < 5; k++) {
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	3301      	adds	r3, #1
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
 8007112:	e02a      	b.n	800716a <medianFilter+0xd2>
				if (window[j] > window[k]) {
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	3340      	adds	r3, #64	; 0x40
 800711a:	443b      	add	r3, r7
 800711c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	3340      	adds	r3, #64	; 0x40
 8007126:	443b      	add	r3, r7
 8007128:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800712c:	429a      	cmp	r2, r3
 800712e:	dd19      	ble.n	8007164 <medianFilter+0xcc>
					// Échange simple pour le tri
					int temp = window[j];
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	3340      	adds	r3, #64	; 0x40
 8007136:	443b      	add	r3, r7
 8007138:	f853 3c34 	ldr.w	r3, [r3, #-52]
 800713c:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	3340      	adds	r3, #64	; 0x40
 8007144:	443b      	add	r3, r7
 8007146:	f853 2c34 	ldr.w	r2, [r3, #-52]
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	3340      	adds	r3, #64	; 0x40
 8007150:	443b      	add	r3, r7
 8007152:	f843 2c34 	str.w	r2, [r3, #-52]
					window[k] = temp;
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	3340      	adds	r3, #64	; 0x40
 800715c:	443b      	add	r3, r7
 800715e:	6a3a      	ldr	r2, [r7, #32]
 8007160:	f843 2c34 	str.w	r2, [r3, #-52]
			for (k = j + 1; k < 5; k++) {
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	3301      	adds	r3, #1
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	2b04      	cmp	r3, #4
 800716e:	ddd1      	ble.n	8007114 <medianFilter+0x7c>
		for (j = 0; j < 5; j++) {
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	3301      	adds	r3, #1
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	2b04      	cmp	r3, #4
 800717a:	ddc7      	ble.n	800710c <medianFilter+0x74>
				}
			}
		}

		// Stocker la médiane dans le signal filtré
		LIDAR->processing.filtred_buff[i] = window[middle];
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	3340      	adds	r3, #64	; 0x40
 8007182:	443b      	add	r3, r7
 8007184:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718c:	f203 5386 	addw	r3, r3, #1414	; 0x586
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	605a      	str	r2, [r3, #4]
	for (i = 0; i < signal_length; i++) {
 8007196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007198:	3301      	adds	r3, #1
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800719c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a0:	429a      	cmp	r2, r3
 80071a2:	db8a      	blt.n	80070ba <medianFilter+0x22>
	}
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	3744      	adds	r7, #68	; 0x44
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <__cvt>:
 80071b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b6:	ec55 4b10 	vmov	r4, r5, d0
 80071ba:	2d00      	cmp	r5, #0
 80071bc:	460e      	mov	r6, r1
 80071be:	4619      	mov	r1, r3
 80071c0:	462b      	mov	r3, r5
 80071c2:	bfbb      	ittet	lt
 80071c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071c8:	461d      	movlt	r5, r3
 80071ca:	2300      	movge	r3, #0
 80071cc:	232d      	movlt	r3, #45	; 0x2d
 80071ce:	700b      	strb	r3, [r1, #0]
 80071d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071d6:	4691      	mov	r9, r2
 80071d8:	f023 0820 	bic.w	r8, r3, #32
 80071dc:	bfbc      	itt	lt
 80071de:	4622      	movlt	r2, r4
 80071e0:	4614      	movlt	r4, r2
 80071e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071e6:	d005      	beq.n	80071f4 <__cvt+0x42>
 80071e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071ec:	d100      	bne.n	80071f0 <__cvt+0x3e>
 80071ee:	3601      	adds	r6, #1
 80071f0:	2102      	movs	r1, #2
 80071f2:	e000      	b.n	80071f6 <__cvt+0x44>
 80071f4:	2103      	movs	r1, #3
 80071f6:	ab03      	add	r3, sp, #12
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	ab02      	add	r3, sp, #8
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	ec45 4b10 	vmov	d0, r4, r5
 8007202:	4653      	mov	r3, sl
 8007204:	4632      	mov	r2, r6
 8007206:	f001 f9af 	bl	8008568 <_dtoa_r>
 800720a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800720e:	4607      	mov	r7, r0
 8007210:	d102      	bne.n	8007218 <__cvt+0x66>
 8007212:	f019 0f01 	tst.w	r9, #1
 8007216:	d022      	beq.n	800725e <__cvt+0xac>
 8007218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800721c:	eb07 0906 	add.w	r9, r7, r6
 8007220:	d110      	bne.n	8007244 <__cvt+0x92>
 8007222:	783b      	ldrb	r3, [r7, #0]
 8007224:	2b30      	cmp	r3, #48	; 0x30
 8007226:	d10a      	bne.n	800723e <__cvt+0x8c>
 8007228:	2200      	movs	r2, #0
 800722a:	2300      	movs	r3, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 fc6a 	bl	8000b08 <__aeabi_dcmpeq>
 8007234:	b918      	cbnz	r0, 800723e <__cvt+0x8c>
 8007236:	f1c6 0601 	rsb	r6, r6, #1
 800723a:	f8ca 6000 	str.w	r6, [sl]
 800723e:	f8da 3000 	ldr.w	r3, [sl]
 8007242:	4499      	add	r9, r3
 8007244:	2200      	movs	r2, #0
 8007246:	2300      	movs	r3, #0
 8007248:	4620      	mov	r0, r4
 800724a:	4629      	mov	r1, r5
 800724c:	f7f9 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8007250:	b108      	cbz	r0, 8007256 <__cvt+0xa4>
 8007252:	f8cd 900c 	str.w	r9, [sp, #12]
 8007256:	2230      	movs	r2, #48	; 0x30
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	454b      	cmp	r3, r9
 800725c:	d307      	bcc.n	800726e <__cvt+0xbc>
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007262:	1bdb      	subs	r3, r3, r7
 8007264:	4638      	mov	r0, r7
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	b004      	add	sp, #16
 800726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726e:	1c59      	adds	r1, r3, #1
 8007270:	9103      	str	r1, [sp, #12]
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	e7f0      	b.n	8007258 <__cvt+0xa6>

08007276 <__exponent>:
 8007276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007278:	4603      	mov	r3, r0
 800727a:	2900      	cmp	r1, #0
 800727c:	bfb8      	it	lt
 800727e:	4249      	neglt	r1, r1
 8007280:	f803 2b02 	strb.w	r2, [r3], #2
 8007284:	bfb4      	ite	lt
 8007286:	222d      	movlt	r2, #45	; 0x2d
 8007288:	222b      	movge	r2, #43	; 0x2b
 800728a:	2909      	cmp	r1, #9
 800728c:	7042      	strb	r2, [r0, #1]
 800728e:	dd2a      	ble.n	80072e6 <__exponent+0x70>
 8007290:	f10d 0207 	add.w	r2, sp, #7
 8007294:	4617      	mov	r7, r2
 8007296:	260a      	movs	r6, #10
 8007298:	4694      	mov	ip, r2
 800729a:	fb91 f5f6 	sdiv	r5, r1, r6
 800729e:	fb06 1415 	mls	r4, r6, r5, r1
 80072a2:	3430      	adds	r4, #48	; 0x30
 80072a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80072a8:	460c      	mov	r4, r1
 80072aa:	2c63      	cmp	r4, #99	; 0x63
 80072ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80072b0:	4629      	mov	r1, r5
 80072b2:	dcf1      	bgt.n	8007298 <__exponent+0x22>
 80072b4:	3130      	adds	r1, #48	; 0x30
 80072b6:	f1ac 0402 	sub.w	r4, ip, #2
 80072ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072be:	1c41      	adds	r1, r0, #1
 80072c0:	4622      	mov	r2, r4
 80072c2:	42ba      	cmp	r2, r7
 80072c4:	d30a      	bcc.n	80072dc <__exponent+0x66>
 80072c6:	f10d 0209 	add.w	r2, sp, #9
 80072ca:	eba2 020c 	sub.w	r2, r2, ip
 80072ce:	42bc      	cmp	r4, r7
 80072d0:	bf88      	it	hi
 80072d2:	2200      	movhi	r2, #0
 80072d4:	4413      	add	r3, r2
 80072d6:	1a18      	subs	r0, r3, r0
 80072d8:	b003      	add	sp, #12
 80072da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80072e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80072e4:	e7ed      	b.n	80072c2 <__exponent+0x4c>
 80072e6:	2330      	movs	r3, #48	; 0x30
 80072e8:	3130      	adds	r1, #48	; 0x30
 80072ea:	7083      	strb	r3, [r0, #2]
 80072ec:	70c1      	strb	r1, [r0, #3]
 80072ee:	1d03      	adds	r3, r0, #4
 80072f0:	e7f1      	b.n	80072d6 <__exponent+0x60>
	...

080072f4 <_printf_float>:
 80072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	ed2d 8b02 	vpush	{d8}
 80072fc:	b08d      	sub	sp, #52	; 0x34
 80072fe:	460c      	mov	r4, r1
 8007300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007304:	4616      	mov	r6, r2
 8007306:	461f      	mov	r7, r3
 8007308:	4605      	mov	r5, r0
 800730a:	f001 f81b 	bl	8008344 <_localeconv_r>
 800730e:	f8d0 a000 	ldr.w	sl, [r0]
 8007312:	4650      	mov	r0, sl
 8007314:	f7f8 ffcc 	bl	80002b0 <strlen>
 8007318:	2300      	movs	r3, #0
 800731a:	930a      	str	r3, [sp, #40]	; 0x28
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	9305      	str	r3, [sp, #20]
 8007320:	f8d8 3000 	ldr.w	r3, [r8]
 8007324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007328:	3307      	adds	r3, #7
 800732a:	f023 0307 	bic.w	r3, r3, #7
 800732e:	f103 0208 	add.w	r2, r3, #8
 8007332:	f8c8 2000 	str.w	r2, [r8]
 8007336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800733a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	f8cd 8018 	str.w	r8, [sp, #24]
 8007344:	ee08 0a10 	vmov	s16, r0
 8007348:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800734c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007350:	4b9e      	ldr	r3, [pc, #632]	; (80075cc <_printf_float+0x2d8>)
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	f7f9 fc09 	bl	8000b6c <__aeabi_dcmpun>
 800735a:	bb88      	cbnz	r0, 80073c0 <_printf_float+0xcc>
 800735c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007360:	4b9a      	ldr	r3, [pc, #616]	; (80075cc <_printf_float+0x2d8>)
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	f7f9 fbe3 	bl	8000b30 <__aeabi_dcmple>
 800736a:	bb48      	cbnz	r0, 80073c0 <_printf_float+0xcc>
 800736c:	2200      	movs	r2, #0
 800736e:	2300      	movs	r3, #0
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f9 fbd2 	bl	8000b1c <__aeabi_dcmplt>
 8007378:	b110      	cbz	r0, 8007380 <_printf_float+0x8c>
 800737a:	232d      	movs	r3, #45	; 0x2d
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	4a93      	ldr	r2, [pc, #588]	; (80075d0 <_printf_float+0x2dc>)
 8007382:	4b94      	ldr	r3, [pc, #592]	; (80075d4 <_printf_float+0x2e0>)
 8007384:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007388:	bf94      	ite	ls
 800738a:	4690      	movls	r8, r2
 800738c:	4698      	movhi	r8, r3
 800738e:	2303      	movs	r3, #3
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	f023 0304 	bic.w	r3, r3, #4
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	9700      	str	r7, [sp, #0]
 80073a0:	4633      	mov	r3, r6
 80073a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f9da 	bl	8007760 <_printf_common>
 80073ac:	3001      	adds	r0, #1
 80073ae:	f040 8090 	bne.w	80074d2 <_printf_float+0x1de>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	b00d      	add	sp, #52	; 0x34
 80073b8:	ecbd 8b02 	vpop	{d8}
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	4649      	mov	r1, r9
 80073c8:	f7f9 fbd0 	bl	8000b6c <__aeabi_dcmpun>
 80073cc:	b140      	cbz	r0, 80073e0 <_printf_float+0xec>
 80073ce:	464b      	mov	r3, r9
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	bfbc      	itt	lt
 80073d4:	232d      	movlt	r3, #45	; 0x2d
 80073d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073da:	4a7f      	ldr	r2, [pc, #508]	; (80075d8 <_printf_float+0x2e4>)
 80073dc:	4b7f      	ldr	r3, [pc, #508]	; (80075dc <_printf_float+0x2e8>)
 80073de:	e7d1      	b.n	8007384 <_printf_float+0x90>
 80073e0:	6863      	ldr	r3, [r4, #4]
 80073e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073e6:	9206      	str	r2, [sp, #24]
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	d13f      	bne.n	800746c <_printf_float+0x178>
 80073ec:	2306      	movs	r3, #6
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	9b05      	ldr	r3, [sp, #20]
 80073f2:	6861      	ldr	r1, [r4, #4]
 80073f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073f8:	2300      	movs	r3, #0
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	ab0a      	add	r3, sp, #40	; 0x28
 80073fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007402:	ab09      	add	r3, sp, #36	; 0x24
 8007404:	ec49 8b10 	vmov	d0, r8, r9
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	6022      	str	r2, [r4, #0]
 800740c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff fece 	bl	80071b2 <__cvt>
 8007416:	9b06      	ldr	r3, [sp, #24]
 8007418:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741a:	2b47      	cmp	r3, #71	; 0x47
 800741c:	4680      	mov	r8, r0
 800741e:	d108      	bne.n	8007432 <_printf_float+0x13e>
 8007420:	1cc8      	adds	r0, r1, #3
 8007422:	db02      	blt.n	800742a <_printf_float+0x136>
 8007424:	6863      	ldr	r3, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	dd41      	ble.n	80074ae <_printf_float+0x1ba>
 800742a:	f1ab 0302 	sub.w	r3, fp, #2
 800742e:	fa5f fb83 	uxtb.w	fp, r3
 8007432:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007436:	d820      	bhi.n	800747a <_printf_float+0x186>
 8007438:	3901      	subs	r1, #1
 800743a:	465a      	mov	r2, fp
 800743c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007440:	9109      	str	r1, [sp, #36]	; 0x24
 8007442:	f7ff ff18 	bl	8007276 <__exponent>
 8007446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007448:	1813      	adds	r3, r2, r0
 800744a:	2a01      	cmp	r2, #1
 800744c:	4681      	mov	r9, r0
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	dc02      	bgt.n	8007458 <_printf_float+0x164>
 8007452:	6822      	ldr	r2, [r4, #0]
 8007454:	07d2      	lsls	r2, r2, #31
 8007456:	d501      	bpl.n	800745c <_printf_float+0x168>
 8007458:	3301      	adds	r3, #1
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007460:	2b00      	cmp	r3, #0
 8007462:	d09c      	beq.n	800739e <_printf_float+0xaa>
 8007464:	232d      	movs	r3, #45	; 0x2d
 8007466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746a:	e798      	b.n	800739e <_printf_float+0xaa>
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	2a47      	cmp	r2, #71	; 0x47
 8007470:	d1be      	bne.n	80073f0 <_printf_float+0xfc>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1bc      	bne.n	80073f0 <_printf_float+0xfc>
 8007476:	2301      	movs	r3, #1
 8007478:	e7b9      	b.n	80073ee <_printf_float+0xfa>
 800747a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800747e:	d118      	bne.n	80074b2 <_printf_float+0x1be>
 8007480:	2900      	cmp	r1, #0
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	dd0b      	ble.n	800749e <_printf_float+0x1aa>
 8007486:	6121      	str	r1, [r4, #16]
 8007488:	b913      	cbnz	r3, 8007490 <_printf_float+0x19c>
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	07d0      	lsls	r0, r2, #31
 800748e:	d502      	bpl.n	8007496 <_printf_float+0x1a2>
 8007490:	3301      	adds	r3, #1
 8007492:	440b      	add	r3, r1
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	65a1      	str	r1, [r4, #88]	; 0x58
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	e7de      	b.n	800745c <_printf_float+0x168>
 800749e:	b913      	cbnz	r3, 80074a6 <_printf_float+0x1b2>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	07d2      	lsls	r2, r2, #31
 80074a4:	d501      	bpl.n	80074aa <_printf_float+0x1b6>
 80074a6:	3302      	adds	r3, #2
 80074a8:	e7f4      	b.n	8007494 <_printf_float+0x1a0>
 80074aa:	2301      	movs	r3, #1
 80074ac:	e7f2      	b.n	8007494 <_printf_float+0x1a0>
 80074ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b4:	4299      	cmp	r1, r3
 80074b6:	db05      	blt.n	80074c4 <_printf_float+0x1d0>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	6121      	str	r1, [r4, #16]
 80074bc:	07d8      	lsls	r0, r3, #31
 80074be:	d5ea      	bpl.n	8007496 <_printf_float+0x1a2>
 80074c0:	1c4b      	adds	r3, r1, #1
 80074c2:	e7e7      	b.n	8007494 <_printf_float+0x1a0>
 80074c4:	2900      	cmp	r1, #0
 80074c6:	bfd4      	ite	le
 80074c8:	f1c1 0202 	rsble	r2, r1, #2
 80074cc:	2201      	movgt	r2, #1
 80074ce:	4413      	add	r3, r2
 80074d0:	e7e0      	b.n	8007494 <_printf_float+0x1a0>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	055a      	lsls	r2, r3, #21
 80074d6:	d407      	bmi.n	80074e8 <_printf_float+0x1f4>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	4642      	mov	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d12c      	bne.n	8007540 <_printf_float+0x24c>
 80074e6:	e764      	b.n	80073b2 <_printf_float+0xbe>
 80074e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074ec:	f240 80e0 	bls.w	80076b0 <_printf_float+0x3bc>
 80074f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f4:	2200      	movs	r2, #0
 80074f6:	2300      	movs	r3, #0
 80074f8:	f7f9 fb06 	bl	8000b08 <__aeabi_dcmpeq>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d034      	beq.n	800756a <_printf_float+0x276>
 8007500:	4a37      	ldr	r2, [pc, #220]	; (80075e0 <_printf_float+0x2ec>)
 8007502:	2301      	movs	r3, #1
 8007504:	4631      	mov	r1, r6
 8007506:	4628      	mov	r0, r5
 8007508:	47b8      	blx	r7
 800750a:	3001      	adds	r0, #1
 800750c:	f43f af51 	beq.w	80073b2 <_printf_float+0xbe>
 8007510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007514:	429a      	cmp	r2, r3
 8007516:	db02      	blt.n	800751e <_printf_float+0x22a>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07d8      	lsls	r0, r3, #31
 800751c:	d510      	bpl.n	8007540 <_printf_float+0x24c>
 800751e:	ee18 3a10 	vmov	r3, s16
 8007522:	4652      	mov	r2, sl
 8007524:	4631      	mov	r1, r6
 8007526:	4628      	mov	r0, r5
 8007528:	47b8      	blx	r7
 800752a:	3001      	adds	r0, #1
 800752c:	f43f af41 	beq.w	80073b2 <_printf_float+0xbe>
 8007530:	f04f 0800 	mov.w	r8, #0
 8007534:	f104 091a 	add.w	r9, r4, #26
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	4543      	cmp	r3, r8
 800753e:	dc09      	bgt.n	8007554 <_printf_float+0x260>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	079b      	lsls	r3, r3, #30
 8007544:	f100 8107 	bmi.w	8007756 <_printf_float+0x462>
 8007548:	68e0      	ldr	r0, [r4, #12]
 800754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754c:	4298      	cmp	r0, r3
 800754e:	bfb8      	it	lt
 8007550:	4618      	movlt	r0, r3
 8007552:	e730      	b.n	80073b6 <_printf_float+0xc2>
 8007554:	2301      	movs	r3, #1
 8007556:	464a      	mov	r2, r9
 8007558:	4631      	mov	r1, r6
 800755a:	4628      	mov	r0, r5
 800755c:	47b8      	blx	r7
 800755e:	3001      	adds	r0, #1
 8007560:	f43f af27 	beq.w	80073b2 <_printf_float+0xbe>
 8007564:	f108 0801 	add.w	r8, r8, #1
 8007568:	e7e6      	b.n	8007538 <_printf_float+0x244>
 800756a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	dc39      	bgt.n	80075e4 <_printf_float+0x2f0>
 8007570:	4a1b      	ldr	r2, [pc, #108]	; (80075e0 <_printf_float+0x2ec>)
 8007572:	2301      	movs	r3, #1
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f af19 	beq.w	80073b2 <_printf_float+0xbe>
 8007580:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007584:	4313      	orrs	r3, r2
 8007586:	d102      	bne.n	800758e <_printf_float+0x29a>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	07d9      	lsls	r1, r3, #31
 800758c:	d5d8      	bpl.n	8007540 <_printf_float+0x24c>
 800758e:	ee18 3a10 	vmov	r3, s16
 8007592:	4652      	mov	r2, sl
 8007594:	4631      	mov	r1, r6
 8007596:	4628      	mov	r0, r5
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	f43f af09 	beq.w	80073b2 <_printf_float+0xbe>
 80075a0:	f04f 0900 	mov.w	r9, #0
 80075a4:	f104 0a1a 	add.w	sl, r4, #26
 80075a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075aa:	425b      	negs	r3, r3
 80075ac:	454b      	cmp	r3, r9
 80075ae:	dc01      	bgt.n	80075b4 <_printf_float+0x2c0>
 80075b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b2:	e792      	b.n	80074da <_printf_float+0x1e6>
 80075b4:	2301      	movs	r3, #1
 80075b6:	4652      	mov	r2, sl
 80075b8:	4631      	mov	r1, r6
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b8      	blx	r7
 80075be:	3001      	adds	r0, #1
 80075c0:	f43f aef7 	beq.w	80073b2 <_printf_float+0xbe>
 80075c4:	f109 0901 	add.w	r9, r9, #1
 80075c8:	e7ee      	b.n	80075a8 <_printf_float+0x2b4>
 80075ca:	bf00      	nop
 80075cc:	7fefffff 	.word	0x7fefffff
 80075d0:	0800bc44 	.word	0x0800bc44
 80075d4:	0800bc48 	.word	0x0800bc48
 80075d8:	0800bc4c 	.word	0x0800bc4c
 80075dc:	0800bc50 	.word	0x0800bc50
 80075e0:	0800bc54 	.word	0x0800bc54
 80075e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075e8:	429a      	cmp	r2, r3
 80075ea:	bfa8      	it	ge
 80075ec:	461a      	movge	r2, r3
 80075ee:	2a00      	cmp	r2, #0
 80075f0:	4691      	mov	r9, r2
 80075f2:	dc37      	bgt.n	8007664 <_printf_float+0x370>
 80075f4:	f04f 0b00 	mov.w	fp, #0
 80075f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075fc:	f104 021a 	add.w	r2, r4, #26
 8007600:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	eba3 0309 	sub.w	r3, r3, r9
 8007608:	455b      	cmp	r3, fp
 800760a:	dc33      	bgt.n	8007674 <_printf_float+0x380>
 800760c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007610:	429a      	cmp	r2, r3
 8007612:	db3b      	blt.n	800768c <_printf_float+0x398>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d438      	bmi.n	800768c <_printf_float+0x398>
 800761a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800761e:	eba2 0903 	sub.w	r9, r2, r3
 8007622:	9b05      	ldr	r3, [sp, #20]
 8007624:	1ad2      	subs	r2, r2, r3
 8007626:	4591      	cmp	r9, r2
 8007628:	bfa8      	it	ge
 800762a:	4691      	movge	r9, r2
 800762c:	f1b9 0f00 	cmp.w	r9, #0
 8007630:	dc35      	bgt.n	800769e <_printf_float+0x3aa>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763a:	f104 0a1a 	add.w	sl, r4, #26
 800763e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	eba3 0309 	sub.w	r3, r3, r9
 8007648:	4543      	cmp	r3, r8
 800764a:	f77f af79 	ble.w	8007540 <_printf_float+0x24c>
 800764e:	2301      	movs	r3, #1
 8007650:	4652      	mov	r2, sl
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f aeaa 	beq.w	80073b2 <_printf_float+0xbe>
 800765e:	f108 0801 	add.w	r8, r8, #1
 8007662:	e7ec      	b.n	800763e <_printf_float+0x34a>
 8007664:	4613      	mov	r3, r2
 8007666:	4631      	mov	r1, r6
 8007668:	4642      	mov	r2, r8
 800766a:	4628      	mov	r0, r5
 800766c:	47b8      	blx	r7
 800766e:	3001      	adds	r0, #1
 8007670:	d1c0      	bne.n	80075f4 <_printf_float+0x300>
 8007672:	e69e      	b.n	80073b2 <_printf_float+0xbe>
 8007674:	2301      	movs	r3, #1
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	9205      	str	r2, [sp, #20]
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f ae97 	beq.w	80073b2 <_printf_float+0xbe>
 8007684:	9a05      	ldr	r2, [sp, #20]
 8007686:	f10b 0b01 	add.w	fp, fp, #1
 800768a:	e7b9      	b.n	8007600 <_printf_float+0x30c>
 800768c:	ee18 3a10 	vmov	r3, s16
 8007690:	4652      	mov	r2, sl
 8007692:	4631      	mov	r1, r6
 8007694:	4628      	mov	r0, r5
 8007696:	47b8      	blx	r7
 8007698:	3001      	adds	r0, #1
 800769a:	d1be      	bne.n	800761a <_printf_float+0x326>
 800769c:	e689      	b.n	80073b2 <_printf_float+0xbe>
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	464b      	mov	r3, r9
 80076a2:	4442      	add	r2, r8
 80076a4:	4631      	mov	r1, r6
 80076a6:	4628      	mov	r0, r5
 80076a8:	47b8      	blx	r7
 80076aa:	3001      	adds	r0, #1
 80076ac:	d1c1      	bne.n	8007632 <_printf_float+0x33e>
 80076ae:	e680      	b.n	80073b2 <_printf_float+0xbe>
 80076b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b2:	2a01      	cmp	r2, #1
 80076b4:	dc01      	bgt.n	80076ba <_printf_float+0x3c6>
 80076b6:	07db      	lsls	r3, r3, #31
 80076b8:	d53a      	bpl.n	8007730 <_printf_float+0x43c>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4642      	mov	r2, r8
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	f43f ae74 	beq.w	80073b2 <_printf_float+0xbe>
 80076ca:	ee18 3a10 	vmov	r3, s16
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f ae6b 	beq.w	80073b2 <_printf_float+0xbe>
 80076dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e0:	2200      	movs	r2, #0
 80076e2:	2300      	movs	r3, #0
 80076e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80076e8:	f7f9 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80076ec:	b9d8      	cbnz	r0, 8007726 <_printf_float+0x432>
 80076ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80076f2:	f108 0201 	add.w	r2, r8, #1
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	d10e      	bne.n	800771e <_printf_float+0x42a>
 8007700:	e657      	b.n	80073b2 <_printf_float+0xbe>
 8007702:	2301      	movs	r3, #1
 8007704:	4652      	mov	r2, sl
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	f43f ae50 	beq.w	80073b2 <_printf_float+0xbe>
 8007712:	f108 0801 	add.w	r8, r8, #1
 8007716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007718:	3b01      	subs	r3, #1
 800771a:	4543      	cmp	r3, r8
 800771c:	dcf1      	bgt.n	8007702 <_printf_float+0x40e>
 800771e:	464b      	mov	r3, r9
 8007720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007724:	e6da      	b.n	80074dc <_printf_float+0x1e8>
 8007726:	f04f 0800 	mov.w	r8, #0
 800772a:	f104 0a1a 	add.w	sl, r4, #26
 800772e:	e7f2      	b.n	8007716 <_printf_float+0x422>
 8007730:	2301      	movs	r3, #1
 8007732:	4642      	mov	r2, r8
 8007734:	e7df      	b.n	80076f6 <_printf_float+0x402>
 8007736:	2301      	movs	r3, #1
 8007738:	464a      	mov	r2, r9
 800773a:	4631      	mov	r1, r6
 800773c:	4628      	mov	r0, r5
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae36 	beq.w	80073b2 <_printf_float+0xbe>
 8007746:	f108 0801 	add.w	r8, r8, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	4543      	cmp	r3, r8
 8007752:	dcf0      	bgt.n	8007736 <_printf_float+0x442>
 8007754:	e6f8      	b.n	8007548 <_printf_float+0x254>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	f104 0919 	add.w	r9, r4, #25
 800775e:	e7f4      	b.n	800774a <_printf_float+0x456>

08007760 <_printf_common>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	4616      	mov	r6, r2
 8007766:	4699      	mov	r9, r3
 8007768:	688a      	ldr	r2, [r1, #8]
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007770:	4293      	cmp	r3, r2
 8007772:	bfb8      	it	lt
 8007774:	4613      	movlt	r3, r2
 8007776:	6033      	str	r3, [r6, #0]
 8007778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800777c:	4607      	mov	r7, r0
 800777e:	460c      	mov	r4, r1
 8007780:	b10a      	cbz	r2, 8007786 <_printf_common+0x26>
 8007782:	3301      	adds	r3, #1
 8007784:	6033      	str	r3, [r6, #0]
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	0699      	lsls	r1, r3, #26
 800778a:	bf42      	ittt	mi
 800778c:	6833      	ldrmi	r3, [r6, #0]
 800778e:	3302      	addmi	r3, #2
 8007790:	6033      	strmi	r3, [r6, #0]
 8007792:	6825      	ldr	r5, [r4, #0]
 8007794:	f015 0506 	ands.w	r5, r5, #6
 8007798:	d106      	bne.n	80077a8 <_printf_common+0x48>
 800779a:	f104 0a19 	add.w	sl, r4, #25
 800779e:	68e3      	ldr	r3, [r4, #12]
 80077a0:	6832      	ldr	r2, [r6, #0]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	42ab      	cmp	r3, r5
 80077a6:	dc26      	bgt.n	80077f6 <_printf_common+0x96>
 80077a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077ac:	1e13      	subs	r3, r2, #0
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	bf18      	it	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	0692      	lsls	r2, r2, #26
 80077b6:	d42b      	bmi.n	8007810 <_printf_common+0xb0>
 80077b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077bc:	4649      	mov	r1, r9
 80077be:	4638      	mov	r0, r7
 80077c0:	47c0      	blx	r8
 80077c2:	3001      	adds	r0, #1
 80077c4:	d01e      	beq.n	8007804 <_printf_common+0xa4>
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	6922      	ldr	r2, [r4, #16]
 80077ca:	f003 0306 	and.w	r3, r3, #6
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	bf02      	ittt	eq
 80077d2:	68e5      	ldreq	r5, [r4, #12]
 80077d4:	6833      	ldreq	r3, [r6, #0]
 80077d6:	1aed      	subeq	r5, r5, r3
 80077d8:	68a3      	ldr	r3, [r4, #8]
 80077da:	bf0c      	ite	eq
 80077dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e0:	2500      	movne	r5, #0
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bfc4      	itt	gt
 80077e6:	1a9b      	subgt	r3, r3, r2
 80077e8:	18ed      	addgt	r5, r5, r3
 80077ea:	2600      	movs	r6, #0
 80077ec:	341a      	adds	r4, #26
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	d11a      	bne.n	8007828 <_printf_common+0xc8>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e008      	b.n	8007808 <_printf_common+0xa8>
 80077f6:	2301      	movs	r3, #1
 80077f8:	4652      	mov	r2, sl
 80077fa:	4649      	mov	r1, r9
 80077fc:	4638      	mov	r0, r7
 80077fe:	47c0      	blx	r8
 8007800:	3001      	adds	r0, #1
 8007802:	d103      	bne.n	800780c <_printf_common+0xac>
 8007804:	f04f 30ff 	mov.w	r0, #4294967295
 8007808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780c:	3501      	adds	r5, #1
 800780e:	e7c6      	b.n	800779e <_printf_common+0x3e>
 8007810:	18e1      	adds	r1, r4, r3
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	2030      	movs	r0, #48	; 0x30
 8007816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800781a:	4422      	add	r2, r4
 800781c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007824:	3302      	adds	r3, #2
 8007826:	e7c7      	b.n	80077b8 <_printf_common+0x58>
 8007828:	2301      	movs	r3, #1
 800782a:	4622      	mov	r2, r4
 800782c:	4649      	mov	r1, r9
 800782e:	4638      	mov	r0, r7
 8007830:	47c0      	blx	r8
 8007832:	3001      	adds	r0, #1
 8007834:	d0e6      	beq.n	8007804 <_printf_common+0xa4>
 8007836:	3601      	adds	r6, #1
 8007838:	e7d9      	b.n	80077ee <_printf_common+0x8e>
	...

0800783c <_printf_i>:
 800783c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	7e0f      	ldrb	r7, [r1, #24]
 8007842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007844:	2f78      	cmp	r7, #120	; 0x78
 8007846:	4691      	mov	r9, r2
 8007848:	4680      	mov	r8, r0
 800784a:	460c      	mov	r4, r1
 800784c:	469a      	mov	sl, r3
 800784e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007852:	d807      	bhi.n	8007864 <_printf_i+0x28>
 8007854:	2f62      	cmp	r7, #98	; 0x62
 8007856:	d80a      	bhi.n	800786e <_printf_i+0x32>
 8007858:	2f00      	cmp	r7, #0
 800785a:	f000 80d4 	beq.w	8007a06 <_printf_i+0x1ca>
 800785e:	2f58      	cmp	r7, #88	; 0x58
 8007860:	f000 80c0 	beq.w	80079e4 <_printf_i+0x1a8>
 8007864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800786c:	e03a      	b.n	80078e4 <_printf_i+0xa8>
 800786e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007872:	2b15      	cmp	r3, #21
 8007874:	d8f6      	bhi.n	8007864 <_printf_i+0x28>
 8007876:	a101      	add	r1, pc, #4	; (adr r1, 800787c <_printf_i+0x40>)
 8007878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800787c:	080078d5 	.word	0x080078d5
 8007880:	080078e9 	.word	0x080078e9
 8007884:	08007865 	.word	0x08007865
 8007888:	08007865 	.word	0x08007865
 800788c:	08007865 	.word	0x08007865
 8007890:	08007865 	.word	0x08007865
 8007894:	080078e9 	.word	0x080078e9
 8007898:	08007865 	.word	0x08007865
 800789c:	08007865 	.word	0x08007865
 80078a0:	08007865 	.word	0x08007865
 80078a4:	08007865 	.word	0x08007865
 80078a8:	080079ed 	.word	0x080079ed
 80078ac:	08007915 	.word	0x08007915
 80078b0:	080079a7 	.word	0x080079a7
 80078b4:	08007865 	.word	0x08007865
 80078b8:	08007865 	.word	0x08007865
 80078bc:	08007a0f 	.word	0x08007a0f
 80078c0:	08007865 	.word	0x08007865
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007865 	.word	0x08007865
 80078cc:	08007865 	.word	0x08007865
 80078d0:	080079af 	.word	0x080079af
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	1d1a      	adds	r2, r3, #4
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	602a      	str	r2, [r5, #0]
 80078dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e4:	2301      	movs	r3, #1
 80078e6:	e09f      	b.n	8007a28 <_printf_i+0x1ec>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	0607      	lsls	r7, r0, #24
 80078ee:	f103 0104 	add.w	r1, r3, #4
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	d501      	bpl.n	80078fa <_printf_i+0xbe>
 80078f6:	681e      	ldr	r6, [r3, #0]
 80078f8:	e003      	b.n	8007902 <_printf_i+0xc6>
 80078fa:	0646      	lsls	r6, r0, #25
 80078fc:	d5fb      	bpl.n	80078f6 <_printf_i+0xba>
 80078fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007902:	2e00      	cmp	r6, #0
 8007904:	da03      	bge.n	800790e <_printf_i+0xd2>
 8007906:	232d      	movs	r3, #45	; 0x2d
 8007908:	4276      	negs	r6, r6
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	485a      	ldr	r0, [pc, #360]	; (8007a78 <_printf_i+0x23c>)
 8007910:	230a      	movs	r3, #10
 8007912:	e012      	b.n	800793a <_printf_i+0xfe>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	6820      	ldr	r0, [r4, #0]
 8007918:	1d19      	adds	r1, r3, #4
 800791a:	6029      	str	r1, [r5, #0]
 800791c:	0605      	lsls	r5, r0, #24
 800791e:	d501      	bpl.n	8007924 <_printf_i+0xe8>
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0xee>
 8007924:	0641      	lsls	r1, r0, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0xe4>
 8007928:	881e      	ldrh	r6, [r3, #0]
 800792a:	4853      	ldr	r0, [pc, #332]	; (8007a78 <_printf_i+0x23c>)
 800792c:	2f6f      	cmp	r7, #111	; 0x6f
 800792e:	bf0c      	ite	eq
 8007930:	2308      	moveq	r3, #8
 8007932:	230a      	movne	r3, #10
 8007934:	2100      	movs	r1, #0
 8007936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793a:	6865      	ldr	r5, [r4, #4]
 800793c:	60a5      	str	r5, [r4, #8]
 800793e:	2d00      	cmp	r5, #0
 8007940:	bfa2      	ittt	ge
 8007942:	6821      	ldrge	r1, [r4, #0]
 8007944:	f021 0104 	bicge.w	r1, r1, #4
 8007948:	6021      	strge	r1, [r4, #0]
 800794a:	b90e      	cbnz	r6, 8007950 <_printf_i+0x114>
 800794c:	2d00      	cmp	r5, #0
 800794e:	d04b      	beq.n	80079e8 <_printf_i+0x1ac>
 8007950:	4615      	mov	r5, r2
 8007952:	fbb6 f1f3 	udiv	r1, r6, r3
 8007956:	fb03 6711 	mls	r7, r3, r1, r6
 800795a:	5dc7      	ldrb	r7, [r0, r7]
 800795c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007960:	4637      	mov	r7, r6
 8007962:	42bb      	cmp	r3, r7
 8007964:	460e      	mov	r6, r1
 8007966:	d9f4      	bls.n	8007952 <_printf_i+0x116>
 8007968:	2b08      	cmp	r3, #8
 800796a:	d10b      	bne.n	8007984 <_printf_i+0x148>
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	07de      	lsls	r6, r3, #31
 8007970:	d508      	bpl.n	8007984 <_printf_i+0x148>
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	6861      	ldr	r1, [r4, #4]
 8007976:	4299      	cmp	r1, r3
 8007978:	bfde      	ittt	le
 800797a:	2330      	movle	r3, #48	; 0x30
 800797c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007984:	1b52      	subs	r2, r2, r5
 8007986:	6122      	str	r2, [r4, #16]
 8007988:	f8cd a000 	str.w	sl, [sp]
 800798c:	464b      	mov	r3, r9
 800798e:	aa03      	add	r2, sp, #12
 8007990:	4621      	mov	r1, r4
 8007992:	4640      	mov	r0, r8
 8007994:	f7ff fee4 	bl	8007760 <_printf_common>
 8007998:	3001      	adds	r0, #1
 800799a:	d14a      	bne.n	8007a32 <_printf_i+0x1f6>
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	b004      	add	sp, #16
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	f043 0320 	orr.w	r3, r3, #32
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	4833      	ldr	r0, [pc, #204]	; (8007a7c <_printf_i+0x240>)
 80079b0:	2778      	movs	r7, #120	; 0x78
 80079b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	6829      	ldr	r1, [r5, #0]
 80079ba:	061f      	lsls	r7, r3, #24
 80079bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80079c0:	d402      	bmi.n	80079c8 <_printf_i+0x18c>
 80079c2:	065f      	lsls	r7, r3, #25
 80079c4:	bf48      	it	mi
 80079c6:	b2b6      	uxthmi	r6, r6
 80079c8:	07df      	lsls	r7, r3, #31
 80079ca:	bf48      	it	mi
 80079cc:	f043 0320 	orrmi.w	r3, r3, #32
 80079d0:	6029      	str	r1, [r5, #0]
 80079d2:	bf48      	it	mi
 80079d4:	6023      	strmi	r3, [r4, #0]
 80079d6:	b91e      	cbnz	r6, 80079e0 <_printf_i+0x1a4>
 80079d8:	6823      	ldr	r3, [r4, #0]
 80079da:	f023 0320 	bic.w	r3, r3, #32
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	2310      	movs	r3, #16
 80079e2:	e7a7      	b.n	8007934 <_printf_i+0xf8>
 80079e4:	4824      	ldr	r0, [pc, #144]	; (8007a78 <_printf_i+0x23c>)
 80079e6:	e7e4      	b.n	80079b2 <_printf_i+0x176>
 80079e8:	4615      	mov	r5, r2
 80079ea:	e7bd      	b.n	8007968 <_printf_i+0x12c>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	6826      	ldr	r6, [r4, #0]
 80079f0:	6961      	ldr	r1, [r4, #20]
 80079f2:	1d18      	adds	r0, r3, #4
 80079f4:	6028      	str	r0, [r5, #0]
 80079f6:	0635      	lsls	r5, r6, #24
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	d501      	bpl.n	8007a00 <_printf_i+0x1c4>
 80079fc:	6019      	str	r1, [r3, #0]
 80079fe:	e002      	b.n	8007a06 <_printf_i+0x1ca>
 8007a00:	0670      	lsls	r0, r6, #25
 8007a02:	d5fb      	bpl.n	80079fc <_printf_i+0x1c0>
 8007a04:	8019      	strh	r1, [r3, #0]
 8007a06:	2300      	movs	r3, #0
 8007a08:	6123      	str	r3, [r4, #16]
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	e7bc      	b.n	8007988 <_printf_i+0x14c>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	1d1a      	adds	r2, r3, #4
 8007a12:	602a      	str	r2, [r5, #0]
 8007a14:	681d      	ldr	r5, [r3, #0]
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	2100      	movs	r1, #0
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7f8 fbf8 	bl	8000210 <memchr>
 8007a20:	b108      	cbz	r0, 8007a26 <_printf_i+0x1ea>
 8007a22:	1b40      	subs	r0, r0, r5
 8007a24:	6060      	str	r0, [r4, #4]
 8007a26:	6863      	ldr	r3, [r4, #4]
 8007a28:	6123      	str	r3, [r4, #16]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a30:	e7aa      	b.n	8007988 <_printf_i+0x14c>
 8007a32:	6923      	ldr	r3, [r4, #16]
 8007a34:	462a      	mov	r2, r5
 8007a36:	4649      	mov	r1, r9
 8007a38:	4640      	mov	r0, r8
 8007a3a:	47d0      	blx	sl
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	d0ad      	beq.n	800799c <_printf_i+0x160>
 8007a40:	6823      	ldr	r3, [r4, #0]
 8007a42:	079b      	lsls	r3, r3, #30
 8007a44:	d413      	bmi.n	8007a6e <_printf_i+0x232>
 8007a46:	68e0      	ldr	r0, [r4, #12]
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	4298      	cmp	r0, r3
 8007a4c:	bfb8      	it	lt
 8007a4e:	4618      	movlt	r0, r3
 8007a50:	e7a6      	b.n	80079a0 <_printf_i+0x164>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4632      	mov	r2, r6
 8007a56:	4649      	mov	r1, r9
 8007a58:	4640      	mov	r0, r8
 8007a5a:	47d0      	blx	sl
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d09d      	beq.n	800799c <_printf_i+0x160>
 8007a60:	3501      	adds	r5, #1
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	9903      	ldr	r1, [sp, #12]
 8007a66:	1a5b      	subs	r3, r3, r1
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dcf2      	bgt.n	8007a52 <_printf_i+0x216>
 8007a6c:	e7eb      	b.n	8007a46 <_printf_i+0x20a>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	f104 0619 	add.w	r6, r4, #25
 8007a74:	e7f5      	b.n	8007a62 <_printf_i+0x226>
 8007a76:	bf00      	nop
 8007a78:	0800bc56 	.word	0x0800bc56
 8007a7c:	0800bc67 	.word	0x0800bc67

08007a80 <_scanf_float>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	b087      	sub	sp, #28
 8007a86:	4617      	mov	r7, r2
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	688b      	ldr	r3, [r1, #8]
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a92:	bf83      	ittte	hi
 8007a94:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a98:	195b      	addhi	r3, r3, r5
 8007a9a:	9302      	strhi	r3, [sp, #8]
 8007a9c:	2300      	movls	r3, #0
 8007a9e:	bf86      	itte	hi
 8007aa0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007aa4:	608b      	strhi	r3, [r1, #8]
 8007aa6:	9302      	strls	r3, [sp, #8]
 8007aa8:	680b      	ldr	r3, [r1, #0]
 8007aaa:	468b      	mov	fp, r1
 8007aac:	2500      	movs	r5, #0
 8007aae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ab2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ab6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007aba:	4680      	mov	r8, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	465e      	mov	r6, fp
 8007ac0:	46aa      	mov	sl, r5
 8007ac2:	46a9      	mov	r9, r5
 8007ac4:	9501      	str	r5, [sp, #4]
 8007ac6:	68a2      	ldr	r2, [r4, #8]
 8007ac8:	b152      	cbz	r2, 8007ae0 <_scanf_float+0x60>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b4e      	cmp	r3, #78	; 0x4e
 8007ad0:	d864      	bhi.n	8007b9c <_scanf_float+0x11c>
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d83c      	bhi.n	8007b50 <_scanf_float+0xd0>
 8007ad6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ada:	b2c8      	uxtb	r0, r1
 8007adc:	280e      	cmp	r0, #14
 8007ade:	d93a      	bls.n	8007b56 <_scanf_float+0xd6>
 8007ae0:	f1b9 0f00 	cmp.w	r9, #0
 8007ae4:	d003      	beq.n	8007aee <_scanf_float+0x6e>
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af2:	f1ba 0f01 	cmp.w	sl, #1
 8007af6:	f200 8113 	bhi.w	8007d20 <_scanf_float+0x2a0>
 8007afa:	455e      	cmp	r6, fp
 8007afc:	f200 8105 	bhi.w	8007d0a <_scanf_float+0x28a>
 8007b00:	2501      	movs	r5, #1
 8007b02:	4628      	mov	r0, r5
 8007b04:	b007      	add	sp, #28
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b0e:	2a0d      	cmp	r2, #13
 8007b10:	d8e6      	bhi.n	8007ae0 <_scanf_float+0x60>
 8007b12:	a101      	add	r1, pc, #4	; (adr r1, 8007b18 <_scanf_float+0x98>)
 8007b14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b18:	08007c57 	.word	0x08007c57
 8007b1c:	08007ae1 	.word	0x08007ae1
 8007b20:	08007ae1 	.word	0x08007ae1
 8007b24:	08007ae1 	.word	0x08007ae1
 8007b28:	08007cb7 	.word	0x08007cb7
 8007b2c:	08007c8f 	.word	0x08007c8f
 8007b30:	08007ae1 	.word	0x08007ae1
 8007b34:	08007ae1 	.word	0x08007ae1
 8007b38:	08007c65 	.word	0x08007c65
 8007b3c:	08007ae1 	.word	0x08007ae1
 8007b40:	08007ae1 	.word	0x08007ae1
 8007b44:	08007ae1 	.word	0x08007ae1
 8007b48:	08007ae1 	.word	0x08007ae1
 8007b4c:	08007c1d 	.word	0x08007c1d
 8007b50:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007b54:	e7db      	b.n	8007b0e <_scanf_float+0x8e>
 8007b56:	290e      	cmp	r1, #14
 8007b58:	d8c2      	bhi.n	8007ae0 <_scanf_float+0x60>
 8007b5a:	a001      	add	r0, pc, #4	; (adr r0, 8007b60 <_scanf_float+0xe0>)
 8007b5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b60:	08007c0f 	.word	0x08007c0f
 8007b64:	08007ae1 	.word	0x08007ae1
 8007b68:	08007c0f 	.word	0x08007c0f
 8007b6c:	08007ca3 	.word	0x08007ca3
 8007b70:	08007ae1 	.word	0x08007ae1
 8007b74:	08007bbd 	.word	0x08007bbd
 8007b78:	08007bf9 	.word	0x08007bf9
 8007b7c:	08007bf9 	.word	0x08007bf9
 8007b80:	08007bf9 	.word	0x08007bf9
 8007b84:	08007bf9 	.word	0x08007bf9
 8007b88:	08007bf9 	.word	0x08007bf9
 8007b8c:	08007bf9 	.word	0x08007bf9
 8007b90:	08007bf9 	.word	0x08007bf9
 8007b94:	08007bf9 	.word	0x08007bf9
 8007b98:	08007bf9 	.word	0x08007bf9
 8007b9c:	2b6e      	cmp	r3, #110	; 0x6e
 8007b9e:	d809      	bhi.n	8007bb4 <_scanf_float+0x134>
 8007ba0:	2b60      	cmp	r3, #96	; 0x60
 8007ba2:	d8b2      	bhi.n	8007b0a <_scanf_float+0x8a>
 8007ba4:	2b54      	cmp	r3, #84	; 0x54
 8007ba6:	d077      	beq.n	8007c98 <_scanf_float+0x218>
 8007ba8:	2b59      	cmp	r3, #89	; 0x59
 8007baa:	d199      	bne.n	8007ae0 <_scanf_float+0x60>
 8007bac:	2d07      	cmp	r5, #7
 8007bae:	d197      	bne.n	8007ae0 <_scanf_float+0x60>
 8007bb0:	2508      	movs	r5, #8
 8007bb2:	e029      	b.n	8007c08 <_scanf_float+0x188>
 8007bb4:	2b74      	cmp	r3, #116	; 0x74
 8007bb6:	d06f      	beq.n	8007c98 <_scanf_float+0x218>
 8007bb8:	2b79      	cmp	r3, #121	; 0x79
 8007bba:	e7f6      	b.n	8007baa <_scanf_float+0x12a>
 8007bbc:	6821      	ldr	r1, [r4, #0]
 8007bbe:	05c8      	lsls	r0, r1, #23
 8007bc0:	d51a      	bpl.n	8007bf8 <_scanf_float+0x178>
 8007bc2:	9b02      	ldr	r3, [sp, #8]
 8007bc4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007bc8:	6021      	str	r1, [r4, #0]
 8007bca:	f109 0901 	add.w	r9, r9, #1
 8007bce:	b11b      	cbz	r3, 8007bd8 <_scanf_float+0x158>
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	60a2      	str	r2, [r4, #8]
 8007bd8:	68a3      	ldr	r3, [r4, #8]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	3301      	adds	r3, #1
 8007be2:	6123      	str	r3, [r4, #16]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	607b      	str	r3, [r7, #4]
 8007bec:	f340 8084 	ble.w	8007cf8 <_scanf_float+0x278>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	e766      	b.n	8007ac6 <_scanf_float+0x46>
 8007bf8:	eb1a 0f05 	cmn.w	sl, r5
 8007bfc:	f47f af70 	bne.w	8007ae0 <_scanf_float+0x60>
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	f806 3b01 	strb.w	r3, [r6], #1
 8007c0c:	e7e4      	b.n	8007bd8 <_scanf_float+0x158>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	0610      	lsls	r0, r2, #24
 8007c12:	f57f af65 	bpl.w	8007ae0 <_scanf_float+0x60>
 8007c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c1a:	e7f4      	b.n	8007c06 <_scanf_float+0x186>
 8007c1c:	f1ba 0f00 	cmp.w	sl, #0
 8007c20:	d10e      	bne.n	8007c40 <_scanf_float+0x1c0>
 8007c22:	f1b9 0f00 	cmp.w	r9, #0
 8007c26:	d10e      	bne.n	8007c46 <_scanf_float+0x1c6>
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c32:	d108      	bne.n	8007c46 <_scanf_float+0x1c6>
 8007c34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c38:	6022      	str	r2, [r4, #0]
 8007c3a:	f04f 0a01 	mov.w	sl, #1
 8007c3e:	e7e3      	b.n	8007c08 <_scanf_float+0x188>
 8007c40:	f1ba 0f02 	cmp.w	sl, #2
 8007c44:	d055      	beq.n	8007cf2 <_scanf_float+0x272>
 8007c46:	2d01      	cmp	r5, #1
 8007c48:	d002      	beq.n	8007c50 <_scanf_float+0x1d0>
 8007c4a:	2d04      	cmp	r5, #4
 8007c4c:	f47f af48 	bne.w	8007ae0 <_scanf_float+0x60>
 8007c50:	3501      	adds	r5, #1
 8007c52:	b2ed      	uxtb	r5, r5
 8007c54:	e7d8      	b.n	8007c08 <_scanf_float+0x188>
 8007c56:	f1ba 0f01 	cmp.w	sl, #1
 8007c5a:	f47f af41 	bne.w	8007ae0 <_scanf_float+0x60>
 8007c5e:	f04f 0a02 	mov.w	sl, #2
 8007c62:	e7d1      	b.n	8007c08 <_scanf_float+0x188>
 8007c64:	b97d      	cbnz	r5, 8007c86 <_scanf_float+0x206>
 8007c66:	f1b9 0f00 	cmp.w	r9, #0
 8007c6a:	f47f af3c 	bne.w	8007ae6 <_scanf_float+0x66>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c78:	f47f af39 	bne.w	8007aee <_scanf_float+0x6e>
 8007c7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	2501      	movs	r5, #1
 8007c84:	e7c0      	b.n	8007c08 <_scanf_float+0x188>
 8007c86:	2d03      	cmp	r5, #3
 8007c88:	d0e2      	beq.n	8007c50 <_scanf_float+0x1d0>
 8007c8a:	2d05      	cmp	r5, #5
 8007c8c:	e7de      	b.n	8007c4c <_scanf_float+0x1cc>
 8007c8e:	2d02      	cmp	r5, #2
 8007c90:	f47f af26 	bne.w	8007ae0 <_scanf_float+0x60>
 8007c94:	2503      	movs	r5, #3
 8007c96:	e7b7      	b.n	8007c08 <_scanf_float+0x188>
 8007c98:	2d06      	cmp	r5, #6
 8007c9a:	f47f af21 	bne.w	8007ae0 <_scanf_float+0x60>
 8007c9e:	2507      	movs	r5, #7
 8007ca0:	e7b2      	b.n	8007c08 <_scanf_float+0x188>
 8007ca2:	6822      	ldr	r2, [r4, #0]
 8007ca4:	0591      	lsls	r1, r2, #22
 8007ca6:	f57f af1b 	bpl.w	8007ae0 <_scanf_float+0x60>
 8007caa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cb4:	e7a8      	b.n	8007c08 <_scanf_float+0x188>
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007cbc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007cc0:	d006      	beq.n	8007cd0 <_scanf_float+0x250>
 8007cc2:	0550      	lsls	r0, r2, #21
 8007cc4:	f57f af0c 	bpl.w	8007ae0 <_scanf_float+0x60>
 8007cc8:	f1b9 0f00 	cmp.w	r9, #0
 8007ccc:	f43f af0f 	beq.w	8007aee <_scanf_float+0x6e>
 8007cd0:	0591      	lsls	r1, r2, #22
 8007cd2:	bf58      	it	pl
 8007cd4:	9901      	ldrpl	r1, [sp, #4]
 8007cd6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cda:	bf58      	it	pl
 8007cdc:	eba9 0101 	subpl.w	r1, r9, r1
 8007ce0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ce4:	bf58      	it	pl
 8007ce6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007cea:	6022      	str	r2, [r4, #0]
 8007cec:	f04f 0900 	mov.w	r9, #0
 8007cf0:	e78a      	b.n	8007c08 <_scanf_float+0x188>
 8007cf2:	f04f 0a03 	mov.w	sl, #3
 8007cf6:	e787      	b.n	8007c08 <_scanf_float+0x188>
 8007cf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4798      	blx	r3
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f43f aedf 	beq.w	8007ac6 <_scanf_float+0x46>
 8007d08:	e6ea      	b.n	8007ae0 <_scanf_float+0x60>
 8007d0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d12:	463a      	mov	r2, r7
 8007d14:	4640      	mov	r0, r8
 8007d16:	4798      	blx	r3
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	6123      	str	r3, [r4, #16]
 8007d1e:	e6ec      	b.n	8007afa <_scanf_float+0x7a>
 8007d20:	1e6b      	subs	r3, r5, #1
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d825      	bhi.n	8007d72 <_scanf_float+0x2f2>
 8007d26:	2d02      	cmp	r5, #2
 8007d28:	d836      	bhi.n	8007d98 <_scanf_float+0x318>
 8007d2a:	455e      	cmp	r6, fp
 8007d2c:	f67f aee8 	bls.w	8007b00 <_scanf_float+0x80>
 8007d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d38:	463a      	mov	r2, r7
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4798      	blx	r3
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	6123      	str	r3, [r4, #16]
 8007d44:	e7f1      	b.n	8007d2a <_scanf_float+0x2aa>
 8007d46:	9802      	ldr	r0, [sp, #8]
 8007d48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007d50:	9002      	str	r0, [sp, #8]
 8007d52:	463a      	mov	r2, r7
 8007d54:	4640      	mov	r0, r8
 8007d56:	4798      	blx	r3
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	6123      	str	r3, [r4, #16]
 8007d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d62:	fa5f fa8a 	uxtb.w	sl, sl
 8007d66:	f1ba 0f02 	cmp.w	sl, #2
 8007d6a:	d1ec      	bne.n	8007d46 <_scanf_float+0x2c6>
 8007d6c:	3d03      	subs	r5, #3
 8007d6e:	b2ed      	uxtb	r5, r5
 8007d70:	1b76      	subs	r6, r6, r5
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	05da      	lsls	r2, r3, #23
 8007d76:	d52f      	bpl.n	8007dd8 <_scanf_float+0x358>
 8007d78:	055b      	lsls	r3, r3, #21
 8007d7a:	d510      	bpl.n	8007d9e <_scanf_float+0x31e>
 8007d7c:	455e      	cmp	r6, fp
 8007d7e:	f67f aebf 	bls.w	8007b00 <_scanf_float+0x80>
 8007d82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4798      	blx	r3
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	6123      	str	r3, [r4, #16]
 8007d96:	e7f1      	b.n	8007d7c <_scanf_float+0x2fc>
 8007d98:	46aa      	mov	sl, r5
 8007d9a:	9602      	str	r6, [sp, #8]
 8007d9c:	e7df      	b.n	8007d5e <_scanf_float+0x2de>
 8007d9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007da2:	6923      	ldr	r3, [r4, #16]
 8007da4:	2965      	cmp	r1, #101	; 0x65
 8007da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007daa:	f106 35ff 	add.w	r5, r6, #4294967295
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	d00c      	beq.n	8007dcc <_scanf_float+0x34c>
 8007db2:	2945      	cmp	r1, #69	; 0x45
 8007db4:	d00a      	beq.n	8007dcc <_scanf_float+0x34c>
 8007db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dba:	463a      	mov	r2, r7
 8007dbc:	4640      	mov	r0, r8
 8007dbe:	4798      	blx	r3
 8007dc0:	6923      	ldr	r3, [r4, #16]
 8007dc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	1eb5      	subs	r5, r6, #2
 8007dca:	6123      	str	r3, [r4, #16]
 8007dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4798      	blx	r3
 8007dd6:	462e      	mov	r6, r5
 8007dd8:	6825      	ldr	r5, [r4, #0]
 8007dda:	f015 0510 	ands.w	r5, r5, #16
 8007dde:	d158      	bne.n	8007e92 <_scanf_float+0x412>
 8007de0:	7035      	strb	r5, [r6, #0]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dec:	d11c      	bne.n	8007e28 <_scanf_float+0x3a8>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	454b      	cmp	r3, r9
 8007df2:	eba3 0209 	sub.w	r2, r3, r9
 8007df6:	d124      	bne.n	8007e42 <_scanf_float+0x3c2>
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	f002 fd5f 	bl	800a8c0 <_strtod_r>
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	6821      	ldr	r1, [r4, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f011 0f02 	tst.w	r1, #2
 8007e0c:	ec57 6b10 	vmov	r6, r7, d0
 8007e10:	f103 0204 	add.w	r2, r3, #4
 8007e14:	d020      	beq.n	8007e58 <_scanf_float+0x3d8>
 8007e16:	9903      	ldr	r1, [sp, #12]
 8007e18:	600a      	str	r2, [r1, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	e9c3 6700 	strd	r6, r7, [r3]
 8007e20:	68e3      	ldr	r3, [r4, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60e3      	str	r3, [r4, #12]
 8007e26:	e66c      	b.n	8007b02 <_scanf_float+0x82>
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0e4      	beq.n	8007df8 <_scanf_float+0x378>
 8007e2e:	9905      	ldr	r1, [sp, #20]
 8007e30:	230a      	movs	r3, #10
 8007e32:	462a      	mov	r2, r5
 8007e34:	3101      	adds	r1, #1
 8007e36:	4640      	mov	r0, r8
 8007e38:	f002 fdca 	bl	800a9d0 <_strtol_r>
 8007e3c:	9b04      	ldr	r3, [sp, #16]
 8007e3e:	9e05      	ldr	r6, [sp, #20]
 8007e40:	1ac2      	subs	r2, r0, r3
 8007e42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e46:	429e      	cmp	r6, r3
 8007e48:	bf28      	it	cs
 8007e4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e4e:	4912      	ldr	r1, [pc, #72]	; (8007e98 <_scanf_float+0x418>)
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f977 	bl	8008144 <siprintf>
 8007e56:	e7cf      	b.n	8007df8 <_scanf_float+0x378>
 8007e58:	f011 0f04 	tst.w	r1, #4
 8007e5c:	9903      	ldr	r1, [sp, #12]
 8007e5e:	600a      	str	r2, [r1, #0]
 8007e60:	d1db      	bne.n	8007e1a <_scanf_float+0x39a>
 8007e62:	f8d3 8000 	ldr.w	r8, [r3]
 8007e66:	ee10 2a10 	vmov	r2, s0
 8007e6a:	ee10 0a10 	vmov	r0, s0
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 fe7b 	bl	8000b6c <__aeabi_dcmpun>
 8007e76:	b128      	cbz	r0, 8007e84 <_scanf_float+0x404>
 8007e78:	4808      	ldr	r0, [pc, #32]	; (8007e9c <_scanf_float+0x41c>)
 8007e7a:	f000 fae7 	bl	800844c <nanf>
 8007e7e:	ed88 0a00 	vstr	s0, [r8]
 8007e82:	e7cd      	b.n	8007e20 <_scanf_float+0x3a0>
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fece 	bl	8000c28 <__aeabi_d2f>
 8007e8c:	f8c8 0000 	str.w	r0, [r8]
 8007e90:	e7c6      	b.n	8007e20 <_scanf_float+0x3a0>
 8007e92:	2500      	movs	r5, #0
 8007e94:	e635      	b.n	8007b02 <_scanf_float+0x82>
 8007e96:	bf00      	nop
 8007e98:	0800bc78 	.word	0x0800bc78
 8007e9c:	0800c00d 	.word	0x0800c00d

08007ea0 <std>:
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	e9c0 3300 	strd	r3, r3, [r0]
 8007eaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eae:	6083      	str	r3, [r0, #8]
 8007eb0:	8181      	strh	r1, [r0, #12]
 8007eb2:	6643      	str	r3, [r0, #100]	; 0x64
 8007eb4:	81c2      	strh	r2, [r0, #14]
 8007eb6:	6183      	str	r3, [r0, #24]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	2208      	movs	r2, #8
 8007ebc:	305c      	adds	r0, #92	; 0x5c
 8007ebe:	f000 fa39 	bl	8008334 <memset>
 8007ec2:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <std+0x38>)
 8007ec4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ec6:	4b05      	ldr	r3, [pc, #20]	; (8007edc <std+0x3c>)
 8007ec8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <std+0x40>)
 8007ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <std+0x44>)
 8007ed0:	6224      	str	r4, [r4, #32]
 8007ed2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08008185 	.word	0x08008185
 8007edc:	080081a7 	.word	0x080081a7
 8007ee0:	080081df 	.word	0x080081df
 8007ee4:	08008203 	.word	0x08008203

08007ee8 <stdio_exit_handler>:
 8007ee8:	4a02      	ldr	r2, [pc, #8]	; (8007ef4 <stdio_exit_handler+0xc>)
 8007eea:	4903      	ldr	r1, [pc, #12]	; (8007ef8 <stdio_exit_handler+0x10>)
 8007eec:	4803      	ldr	r0, [pc, #12]	; (8007efc <stdio_exit_handler+0x14>)
 8007eee:	f000 b869 	b.w	8007fc4 <_fwalk_sglue>
 8007ef2:	bf00      	nop
 8007ef4:	20000010 	.word	0x20000010
 8007ef8:	0800b019 	.word	0x0800b019
 8007efc:	2000001c 	.word	0x2000001c

08007f00 <cleanup_stdio>:
 8007f00:	6841      	ldr	r1, [r0, #4]
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <cleanup_stdio+0x34>)
 8007f04:	4299      	cmp	r1, r3
 8007f06:	b510      	push	{r4, lr}
 8007f08:	4604      	mov	r4, r0
 8007f0a:	d001      	beq.n	8007f10 <cleanup_stdio+0x10>
 8007f0c:	f003 f884 	bl	800b018 <_fflush_r>
 8007f10:	68a1      	ldr	r1, [r4, #8]
 8007f12:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <cleanup_stdio+0x38>)
 8007f14:	4299      	cmp	r1, r3
 8007f16:	d002      	beq.n	8007f1e <cleanup_stdio+0x1e>
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f003 f87d 	bl	800b018 <_fflush_r>
 8007f1e:	68e1      	ldr	r1, [r4, #12]
 8007f20:	4b06      	ldr	r3, [pc, #24]	; (8007f3c <cleanup_stdio+0x3c>)
 8007f22:	4299      	cmp	r1, r3
 8007f24:	d004      	beq.n	8007f30 <cleanup_stdio+0x30>
 8007f26:	4620      	mov	r0, r4
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	f003 b874 	b.w	800b018 <_fflush_r>
 8007f30:	bd10      	pop	{r4, pc}
 8007f32:	bf00      	nop
 8007f34:	20007380 	.word	0x20007380
 8007f38:	200073e8 	.word	0x200073e8
 8007f3c:	20007450 	.word	0x20007450

08007f40 <global_stdio_init.part.0>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	4b0b      	ldr	r3, [pc, #44]	; (8007f70 <global_stdio_init.part.0+0x30>)
 8007f44:	4c0b      	ldr	r4, [pc, #44]	; (8007f74 <global_stdio_init.part.0+0x34>)
 8007f46:	4a0c      	ldr	r2, [pc, #48]	; (8007f78 <global_stdio_init.part.0+0x38>)
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2104      	movs	r1, #4
 8007f50:	f7ff ffa6 	bl	8007ea0 <std>
 8007f54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f58:	2201      	movs	r2, #1
 8007f5a:	2109      	movs	r1, #9
 8007f5c:	f7ff ffa0 	bl	8007ea0 <std>
 8007f60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f64:	2202      	movs	r2, #2
 8007f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6a:	2112      	movs	r1, #18
 8007f6c:	f7ff bf98 	b.w	8007ea0 <std>
 8007f70:	200074b8 	.word	0x200074b8
 8007f74:	20007380 	.word	0x20007380
 8007f78:	08007ee9 	.word	0x08007ee9

08007f7c <__sfp_lock_acquire>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__sfp_lock_acquire+0x8>)
 8007f7e:	f000 ba55 	b.w	800842c <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	200074c1 	.word	0x200074c1

08007f88 <__sfp_lock_release>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__sfp_lock_release+0x8>)
 8007f8a:	f000 ba50 	b.w	800842e <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	200074c1 	.word	0x200074c1

08007f94 <__sinit>:
 8007f94:	b510      	push	{r4, lr}
 8007f96:	4604      	mov	r4, r0
 8007f98:	f7ff fff0 	bl	8007f7c <__sfp_lock_acquire>
 8007f9c:	6a23      	ldr	r3, [r4, #32]
 8007f9e:	b11b      	cbz	r3, 8007fa8 <__sinit+0x14>
 8007fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa4:	f7ff bff0 	b.w	8007f88 <__sfp_lock_release>
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <__sinit+0x28>)
 8007faa:	6223      	str	r3, [r4, #32]
 8007fac:	4b04      	ldr	r3, [pc, #16]	; (8007fc0 <__sinit+0x2c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1f5      	bne.n	8007fa0 <__sinit+0xc>
 8007fb4:	f7ff ffc4 	bl	8007f40 <global_stdio_init.part.0>
 8007fb8:	e7f2      	b.n	8007fa0 <__sinit+0xc>
 8007fba:	bf00      	nop
 8007fbc:	08007f01 	.word	0x08007f01
 8007fc0:	200074b8 	.word	0x200074b8

08007fc4 <_fwalk_sglue>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4607      	mov	r7, r0
 8007fca:	4688      	mov	r8, r1
 8007fcc:	4614      	mov	r4, r2
 8007fce:	2600      	movs	r6, #0
 8007fd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fd4:	f1b9 0901 	subs.w	r9, r9, #1
 8007fd8:	d505      	bpl.n	8007fe6 <_fwalk_sglue+0x22>
 8007fda:	6824      	ldr	r4, [r4, #0]
 8007fdc:	2c00      	cmp	r4, #0
 8007fde:	d1f7      	bne.n	8007fd0 <_fwalk_sglue+0xc>
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d907      	bls.n	8007ffc <_fwalk_sglue+0x38>
 8007fec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	d003      	beq.n	8007ffc <_fwalk_sglue+0x38>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	47c0      	blx	r8
 8007ffa:	4306      	orrs	r6, r0
 8007ffc:	3568      	adds	r5, #104	; 0x68
 8007ffe:	e7e9      	b.n	8007fd4 <_fwalk_sglue+0x10>

08008000 <iprintf>:
 8008000:	b40f      	push	{r0, r1, r2, r3}
 8008002:	b507      	push	{r0, r1, r2, lr}
 8008004:	4906      	ldr	r1, [pc, #24]	; (8008020 <iprintf+0x20>)
 8008006:	ab04      	add	r3, sp, #16
 8008008:	6808      	ldr	r0, [r1, #0]
 800800a:	f853 2b04 	ldr.w	r2, [r3], #4
 800800e:	6881      	ldr	r1, [r0, #8]
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	f002 fe61 	bl	800acd8 <_vfiprintf_r>
 8008016:	b003      	add	sp, #12
 8008018:	f85d eb04 	ldr.w	lr, [sp], #4
 800801c:	b004      	add	sp, #16
 800801e:	4770      	bx	lr
 8008020:	20000068 	.word	0x20000068

08008024 <_puts_r>:
 8008024:	6a03      	ldr	r3, [r0, #32]
 8008026:	b570      	push	{r4, r5, r6, lr}
 8008028:	6884      	ldr	r4, [r0, #8]
 800802a:	4605      	mov	r5, r0
 800802c:	460e      	mov	r6, r1
 800802e:	b90b      	cbnz	r3, 8008034 <_puts_r+0x10>
 8008030:	f7ff ffb0 	bl	8007f94 <__sinit>
 8008034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008036:	07db      	lsls	r3, r3, #31
 8008038:	d405      	bmi.n	8008046 <_puts_r+0x22>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	0598      	lsls	r0, r3, #22
 800803e:	d402      	bmi.n	8008046 <_puts_r+0x22>
 8008040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008042:	f000 f9f3 	bl	800842c <__retarget_lock_acquire_recursive>
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	0719      	lsls	r1, r3, #28
 800804a:	d513      	bpl.n	8008074 <_puts_r+0x50>
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	b18b      	cbz	r3, 8008074 <_puts_r+0x50>
 8008050:	3e01      	subs	r6, #1
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008058:	3b01      	subs	r3, #1
 800805a:	60a3      	str	r3, [r4, #8]
 800805c:	b9e9      	cbnz	r1, 800809a <_puts_r+0x76>
 800805e:	2b00      	cmp	r3, #0
 8008060:	da2e      	bge.n	80080c0 <_puts_r+0x9c>
 8008062:	4622      	mov	r2, r4
 8008064:	210a      	movs	r1, #10
 8008066:	4628      	mov	r0, r5
 8008068:	f000 f8cf 	bl	800820a <__swbuf_r>
 800806c:	3001      	adds	r0, #1
 800806e:	d007      	beq.n	8008080 <_puts_r+0x5c>
 8008070:	250a      	movs	r5, #10
 8008072:	e007      	b.n	8008084 <_puts_r+0x60>
 8008074:	4621      	mov	r1, r4
 8008076:	4628      	mov	r0, r5
 8008078:	f000 f904 	bl	8008284 <__swsetup_r>
 800807c:	2800      	cmp	r0, #0
 800807e:	d0e7      	beq.n	8008050 <_puts_r+0x2c>
 8008080:	f04f 35ff 	mov.w	r5, #4294967295
 8008084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008086:	07da      	lsls	r2, r3, #31
 8008088:	d405      	bmi.n	8008096 <_puts_r+0x72>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	059b      	lsls	r3, r3, #22
 800808e:	d402      	bmi.n	8008096 <_puts_r+0x72>
 8008090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008092:	f000 f9cc 	bl	800842e <__retarget_lock_release_recursive>
 8008096:	4628      	mov	r0, r5
 8008098:	bd70      	pop	{r4, r5, r6, pc}
 800809a:	2b00      	cmp	r3, #0
 800809c:	da04      	bge.n	80080a8 <_puts_r+0x84>
 800809e:	69a2      	ldr	r2, [r4, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	dc06      	bgt.n	80080b2 <_puts_r+0x8e>
 80080a4:	290a      	cmp	r1, #10
 80080a6:	d004      	beq.n	80080b2 <_puts_r+0x8e>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	7019      	strb	r1, [r3, #0]
 80080b0:	e7cf      	b.n	8008052 <_puts_r+0x2e>
 80080b2:	4622      	mov	r2, r4
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f8a8 	bl	800820a <__swbuf_r>
 80080ba:	3001      	adds	r0, #1
 80080bc:	d1c9      	bne.n	8008052 <_puts_r+0x2e>
 80080be:	e7df      	b.n	8008080 <_puts_r+0x5c>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	250a      	movs	r5, #10
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	6022      	str	r2, [r4, #0]
 80080c8:	701d      	strb	r5, [r3, #0]
 80080ca:	e7db      	b.n	8008084 <_puts_r+0x60>

080080cc <puts>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <puts+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f7ff bfa7 	b.w	8008024 <_puts_r>
 80080d6:	bf00      	nop
 80080d8:	20000068 	.word	0x20000068

080080dc <sniprintf>:
 80080dc:	b40c      	push	{r2, r3}
 80080de:	b530      	push	{r4, r5, lr}
 80080e0:	4b17      	ldr	r3, [pc, #92]	; (8008140 <sniprintf+0x64>)
 80080e2:	1e0c      	subs	r4, r1, #0
 80080e4:	681d      	ldr	r5, [r3, #0]
 80080e6:	b09d      	sub	sp, #116	; 0x74
 80080e8:	da08      	bge.n	80080fc <sniprintf+0x20>
 80080ea:	238b      	movs	r3, #139	; 0x8b
 80080ec:	602b      	str	r3, [r5, #0]
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295
 80080f2:	b01d      	add	sp, #116	; 0x74
 80080f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f8:	b002      	add	sp, #8
 80080fa:	4770      	bx	lr
 80080fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008100:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008104:	bf14      	ite	ne
 8008106:	f104 33ff 	addne.w	r3, r4, #4294967295
 800810a:	4623      	moveq	r3, r4
 800810c:	9304      	str	r3, [sp, #16]
 800810e:	9307      	str	r3, [sp, #28]
 8008110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008114:	9002      	str	r0, [sp, #8]
 8008116:	9006      	str	r0, [sp, #24]
 8008118:	f8ad 3016 	strh.w	r3, [sp, #22]
 800811c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800811e:	ab21      	add	r3, sp, #132	; 0x84
 8008120:	a902      	add	r1, sp, #8
 8008122:	4628      	mov	r0, r5
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	f002 fcaf 	bl	800aa88 <_svfiprintf_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	bfbc      	itt	lt
 800812e:	238b      	movlt	r3, #139	; 0x8b
 8008130:	602b      	strlt	r3, [r5, #0]
 8008132:	2c00      	cmp	r4, #0
 8008134:	d0dd      	beq.n	80080f2 <sniprintf+0x16>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e7d9      	b.n	80080f2 <sniprintf+0x16>
 800813e:	bf00      	nop
 8008140:	20000068 	.word	0x20000068

08008144 <siprintf>:
 8008144:	b40e      	push	{r1, r2, r3}
 8008146:	b500      	push	{lr}
 8008148:	b09c      	sub	sp, #112	; 0x70
 800814a:	ab1d      	add	r3, sp, #116	; 0x74
 800814c:	9002      	str	r0, [sp, #8]
 800814e:	9006      	str	r0, [sp, #24]
 8008150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008154:	4809      	ldr	r0, [pc, #36]	; (800817c <siprintf+0x38>)
 8008156:	9107      	str	r1, [sp, #28]
 8008158:	9104      	str	r1, [sp, #16]
 800815a:	4909      	ldr	r1, [pc, #36]	; (8008180 <siprintf+0x3c>)
 800815c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008160:	9105      	str	r1, [sp, #20]
 8008162:	6800      	ldr	r0, [r0, #0]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	a902      	add	r1, sp, #8
 8008168:	f002 fc8e 	bl	800aa88 <_svfiprintf_r>
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	b01c      	add	sp, #112	; 0x70
 8008174:	f85d eb04 	ldr.w	lr, [sp], #4
 8008178:	b003      	add	sp, #12
 800817a:	4770      	bx	lr
 800817c:	20000068 	.word	0x20000068
 8008180:	ffff0208 	.word	0xffff0208

08008184 <__sread>:
 8008184:	b510      	push	{r4, lr}
 8008186:	460c      	mov	r4, r1
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	f000 f900 	bl	8008390 <_read_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	bfab      	itete	ge
 8008194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008196:	89a3      	ldrhlt	r3, [r4, #12]
 8008198:	181b      	addge	r3, r3, r0
 800819a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800819e:	bfac      	ite	ge
 80081a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081a2:	81a3      	strhlt	r3, [r4, #12]
 80081a4:	bd10      	pop	{r4, pc}

080081a6 <__swrite>:
 80081a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081aa:	461f      	mov	r7, r3
 80081ac:	898b      	ldrh	r3, [r1, #12]
 80081ae:	05db      	lsls	r3, r3, #23
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4616      	mov	r6, r2
 80081b6:	d505      	bpl.n	80081c4 <__swrite+0x1e>
 80081b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081bc:	2302      	movs	r3, #2
 80081be:	2200      	movs	r2, #0
 80081c0:	f000 f8d4 	bl	800836c <_lseek_r>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	4632      	mov	r2, r6
 80081d2:	463b      	mov	r3, r7
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	f000 b8eb 	b.w	80083b4 <_write_r>

080081de <__sseek>:
 80081de:	b510      	push	{r4, lr}
 80081e0:	460c      	mov	r4, r1
 80081e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e6:	f000 f8c1 	bl	800836c <_lseek_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	bf15      	itete	ne
 80081f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80081f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081fa:	81a3      	strheq	r3, [r4, #12]
 80081fc:	bf18      	it	ne
 80081fe:	81a3      	strhne	r3, [r4, #12]
 8008200:	bd10      	pop	{r4, pc}

08008202 <__sclose>:
 8008202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008206:	f000 b8a1 	b.w	800834c <_close_r>

0800820a <__swbuf_r>:
 800820a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820c:	460e      	mov	r6, r1
 800820e:	4614      	mov	r4, r2
 8008210:	4605      	mov	r5, r0
 8008212:	b118      	cbz	r0, 800821c <__swbuf_r+0x12>
 8008214:	6a03      	ldr	r3, [r0, #32]
 8008216:	b90b      	cbnz	r3, 800821c <__swbuf_r+0x12>
 8008218:	f7ff febc 	bl	8007f94 <__sinit>
 800821c:	69a3      	ldr	r3, [r4, #24]
 800821e:	60a3      	str	r3, [r4, #8]
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	071a      	lsls	r2, r3, #28
 8008224:	d525      	bpl.n	8008272 <__swbuf_r+0x68>
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	b31b      	cbz	r3, 8008272 <__swbuf_r+0x68>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	6922      	ldr	r2, [r4, #16]
 800822e:	1a98      	subs	r0, r3, r2
 8008230:	6963      	ldr	r3, [r4, #20]
 8008232:	b2f6      	uxtb	r6, r6
 8008234:	4283      	cmp	r3, r0
 8008236:	4637      	mov	r7, r6
 8008238:	dc04      	bgt.n	8008244 <__swbuf_r+0x3a>
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f002 feeb 	bl	800b018 <_fflush_r>
 8008242:	b9e0      	cbnz	r0, 800827e <__swbuf_r+0x74>
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	3b01      	subs	r3, #1
 8008248:	60a3      	str	r3, [r4, #8]
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	6022      	str	r2, [r4, #0]
 8008250:	701e      	strb	r6, [r3, #0]
 8008252:	6962      	ldr	r2, [r4, #20]
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	429a      	cmp	r2, r3
 8008258:	d004      	beq.n	8008264 <__swbuf_r+0x5a>
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	07db      	lsls	r3, r3, #31
 800825e:	d506      	bpl.n	800826e <__swbuf_r+0x64>
 8008260:	2e0a      	cmp	r6, #10
 8008262:	d104      	bne.n	800826e <__swbuf_r+0x64>
 8008264:	4621      	mov	r1, r4
 8008266:	4628      	mov	r0, r5
 8008268:	f002 fed6 	bl	800b018 <_fflush_r>
 800826c:	b938      	cbnz	r0, 800827e <__swbuf_r+0x74>
 800826e:	4638      	mov	r0, r7
 8008270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f000 f805 	bl	8008284 <__swsetup_r>
 800827a:	2800      	cmp	r0, #0
 800827c:	d0d5      	beq.n	800822a <__swbuf_r+0x20>
 800827e:	f04f 37ff 	mov.w	r7, #4294967295
 8008282:	e7f4      	b.n	800826e <__swbuf_r+0x64>

08008284 <__swsetup_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4b2a      	ldr	r3, [pc, #168]	; (8008330 <__swsetup_r+0xac>)
 8008288:	4605      	mov	r5, r0
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	460c      	mov	r4, r1
 800828e:	b118      	cbz	r0, 8008298 <__swsetup_r+0x14>
 8008290:	6a03      	ldr	r3, [r0, #32]
 8008292:	b90b      	cbnz	r3, 8008298 <__swsetup_r+0x14>
 8008294:	f7ff fe7e 	bl	8007f94 <__sinit>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800829e:	0718      	lsls	r0, r3, #28
 80082a0:	d422      	bmi.n	80082e8 <__swsetup_r+0x64>
 80082a2:	06d9      	lsls	r1, r3, #27
 80082a4:	d407      	bmi.n	80082b6 <__swsetup_r+0x32>
 80082a6:	2309      	movs	r3, #9
 80082a8:	602b      	str	r3, [r5, #0]
 80082aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e034      	b.n	8008320 <__swsetup_r+0x9c>
 80082b6:	0758      	lsls	r0, r3, #29
 80082b8:	d512      	bpl.n	80082e0 <__swsetup_r+0x5c>
 80082ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082bc:	b141      	cbz	r1, 80082d0 <__swsetup_r+0x4c>
 80082be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d002      	beq.n	80082cc <__swsetup_r+0x48>
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 ff40 	bl	800914c <_free_r>
 80082cc:	2300      	movs	r3, #0
 80082ce:	6363      	str	r3, [r4, #52]	; 0x34
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	2300      	movs	r3, #0
 80082da:	6063      	str	r3, [r4, #4]
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f043 0308 	orr.w	r3, r3, #8
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	b94b      	cbnz	r3, 8008300 <__swsetup_r+0x7c>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f6:	d003      	beq.n	8008300 <__swsetup_r+0x7c>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f002 feda 	bl	800b0b4 <__smakebuf_r>
 8008300:	89a0      	ldrh	r0, [r4, #12]
 8008302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008306:	f010 0301 	ands.w	r3, r0, #1
 800830a:	d00a      	beq.n	8008322 <__swsetup_r+0x9e>
 800830c:	2300      	movs	r3, #0
 800830e:	60a3      	str	r3, [r4, #8]
 8008310:	6963      	ldr	r3, [r4, #20]
 8008312:	425b      	negs	r3, r3
 8008314:	61a3      	str	r3, [r4, #24]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	b943      	cbnz	r3, 800832c <__swsetup_r+0xa8>
 800831a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800831e:	d1c4      	bne.n	80082aa <__swsetup_r+0x26>
 8008320:	bd38      	pop	{r3, r4, r5, pc}
 8008322:	0781      	lsls	r1, r0, #30
 8008324:	bf58      	it	pl
 8008326:	6963      	ldrpl	r3, [r4, #20]
 8008328:	60a3      	str	r3, [r4, #8]
 800832a:	e7f4      	b.n	8008316 <__swsetup_r+0x92>
 800832c:	2000      	movs	r0, #0
 800832e:	e7f7      	b.n	8008320 <__swsetup_r+0x9c>
 8008330:	20000068 	.word	0x20000068

08008334 <memset>:
 8008334:	4402      	add	r2, r0
 8008336:	4603      	mov	r3, r0
 8008338:	4293      	cmp	r3, r2
 800833a:	d100      	bne.n	800833e <memset+0xa>
 800833c:	4770      	bx	lr
 800833e:	f803 1b01 	strb.w	r1, [r3], #1
 8008342:	e7f9      	b.n	8008338 <memset+0x4>

08008344 <_localeconv_r>:
 8008344:	4800      	ldr	r0, [pc, #0]	; (8008348 <_localeconv_r+0x4>)
 8008346:	4770      	bx	lr
 8008348:	2000015c 	.word	0x2000015c

0800834c <_close_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d06      	ldr	r5, [pc, #24]	; (8008368 <_close_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7f9 fc23 	bl	8001ba2 <_close>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_close_r+0x1a>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_close_r+0x1a>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200074bc 	.word	0x200074bc

0800836c <_lseek_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	; (800838c <_lseek_r+0x20>)
 8008370:	4604      	mov	r4, r0
 8008372:	4608      	mov	r0, r1
 8008374:	4611      	mov	r1, r2
 8008376:	2200      	movs	r2, #0
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7f9 fc38 	bl	8001bf0 <_lseek>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_lseek_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_lseek_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200074bc 	.word	0x200074bc

08008390 <_read_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d07      	ldr	r5, [pc, #28]	; (80083b0 <_read_r+0x20>)
 8008394:	4604      	mov	r4, r0
 8008396:	4608      	mov	r0, r1
 8008398:	4611      	mov	r1, r2
 800839a:	2200      	movs	r2, #0
 800839c:	602a      	str	r2, [r5, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f7f9 fbc6 	bl	8001b30 <_read>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_read_r+0x1e>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_read_r+0x1e>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	200074bc 	.word	0x200074bc

080083b4 <_write_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d07      	ldr	r5, [pc, #28]	; (80083d4 <_write_r+0x20>)
 80083b8:	4604      	mov	r4, r0
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	602a      	str	r2, [r5, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f7f9 fbd1 	bl	8001b6a <_write>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_write_r+0x1e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_write_r+0x1e>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	200074bc 	.word	0x200074bc

080083d8 <__errno>:
 80083d8:	4b01      	ldr	r3, [pc, #4]	; (80083e0 <__errno+0x8>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000068 	.word	0x20000068

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4d0d      	ldr	r5, [pc, #52]	; (800841c <__libc_init_array+0x38>)
 80083e8:	4c0d      	ldr	r4, [pc, #52]	; (8008420 <__libc_init_array+0x3c>)
 80083ea:	1b64      	subs	r4, r4, r5
 80083ec:	10a4      	asrs	r4, r4, #2
 80083ee:	2600      	movs	r6, #0
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	4d0b      	ldr	r5, [pc, #44]	; (8008424 <__libc_init_array+0x40>)
 80083f6:	4c0c      	ldr	r4, [pc, #48]	; (8008428 <__libc_init_array+0x44>)
 80083f8:	f003 fb3e 	bl	800ba78 <_init>
 80083fc:	1b64      	subs	r4, r4, r5
 80083fe:	10a4      	asrs	r4, r4, #2
 8008400:	2600      	movs	r6, #0
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	0800c078 	.word	0x0800c078
 8008420:	0800c078 	.word	0x0800c078
 8008424:	0800c078 	.word	0x0800c078
 8008428:	0800c07c 	.word	0x0800c07c

0800842c <__retarget_lock_acquire_recursive>:
 800842c:	4770      	bx	lr

0800842e <__retarget_lock_release_recursive>:
 800842e:	4770      	bx	lr

08008430 <memcpy>:
 8008430:	440a      	add	r2, r1
 8008432:	4291      	cmp	r1, r2
 8008434:	f100 33ff 	add.w	r3, r0, #4294967295
 8008438:	d100      	bne.n	800843c <memcpy+0xc>
 800843a:	4770      	bx	lr
 800843c:	b510      	push	{r4, lr}
 800843e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008446:	4291      	cmp	r1, r2
 8008448:	d1f9      	bne.n	800843e <memcpy+0xe>
 800844a:	bd10      	pop	{r4, pc}

0800844c <nanf>:
 800844c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008454 <nanf+0x8>
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	7fc00000 	.word	0x7fc00000

08008458 <quorem>:
 8008458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	6903      	ldr	r3, [r0, #16]
 800845e:	690c      	ldr	r4, [r1, #16]
 8008460:	42a3      	cmp	r3, r4
 8008462:	4607      	mov	r7, r0
 8008464:	db7e      	blt.n	8008564 <quorem+0x10c>
 8008466:	3c01      	subs	r4, #1
 8008468:	f101 0814 	add.w	r8, r1, #20
 800846c:	f100 0514 	add.w	r5, r0, #20
 8008470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800847a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800847e:	3301      	adds	r3, #1
 8008480:	429a      	cmp	r2, r3
 8008482:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008486:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800848a:	fbb2 f6f3 	udiv	r6, r2, r3
 800848e:	d331      	bcc.n	80084f4 <quorem+0x9c>
 8008490:	f04f 0e00 	mov.w	lr, #0
 8008494:	4640      	mov	r0, r8
 8008496:	46ac      	mov	ip, r5
 8008498:	46f2      	mov	sl, lr
 800849a:	f850 2b04 	ldr.w	r2, [r0], #4
 800849e:	b293      	uxth	r3, r2
 80084a0:	fb06 e303 	mla	r3, r6, r3, lr
 80084a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084a8:	0c1a      	lsrs	r2, r3, #16
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	ebaa 0303 	sub.w	r3, sl, r3
 80084b0:	f8dc a000 	ldr.w	sl, [ip]
 80084b4:	fa13 f38a 	uxtah	r3, r3, sl
 80084b8:	fb06 220e 	mla	r2, r6, lr, r2
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084c4:	b292      	uxth	r2, r2
 80084c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80084d2:	4581      	cmp	r9, r0
 80084d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084d8:	f84c 3b04 	str.w	r3, [ip], #4
 80084dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80084e0:	d2db      	bcs.n	800849a <quorem+0x42>
 80084e2:	f855 300b 	ldr.w	r3, [r5, fp]
 80084e6:	b92b      	cbnz	r3, 80084f4 <quorem+0x9c>
 80084e8:	9b01      	ldr	r3, [sp, #4]
 80084ea:	3b04      	subs	r3, #4
 80084ec:	429d      	cmp	r5, r3
 80084ee:	461a      	mov	r2, r3
 80084f0:	d32c      	bcc.n	800854c <quorem+0xf4>
 80084f2:	613c      	str	r4, [r7, #16]
 80084f4:	4638      	mov	r0, r7
 80084f6:	f001 f9ef 	bl	80098d8 <__mcmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	db22      	blt.n	8008544 <quorem+0xec>
 80084fe:	3601      	adds	r6, #1
 8008500:	4629      	mov	r1, r5
 8008502:	2000      	movs	r0, #0
 8008504:	f858 2b04 	ldr.w	r2, [r8], #4
 8008508:	f8d1 c000 	ldr.w	ip, [r1]
 800850c:	b293      	uxth	r3, r2
 800850e:	1ac3      	subs	r3, r0, r3
 8008510:	0c12      	lsrs	r2, r2, #16
 8008512:	fa13 f38c 	uxtah	r3, r3, ip
 8008516:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800851a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800851e:	b29b      	uxth	r3, r3
 8008520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008524:	45c1      	cmp	r9, r8
 8008526:	f841 3b04 	str.w	r3, [r1], #4
 800852a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800852e:	d2e9      	bcs.n	8008504 <quorem+0xac>
 8008530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008538:	b922      	cbnz	r2, 8008544 <quorem+0xec>
 800853a:	3b04      	subs	r3, #4
 800853c:	429d      	cmp	r5, r3
 800853e:	461a      	mov	r2, r3
 8008540:	d30a      	bcc.n	8008558 <quorem+0x100>
 8008542:	613c      	str	r4, [r7, #16]
 8008544:	4630      	mov	r0, r6
 8008546:	b003      	add	sp, #12
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	6812      	ldr	r2, [r2, #0]
 800854e:	3b04      	subs	r3, #4
 8008550:	2a00      	cmp	r2, #0
 8008552:	d1ce      	bne.n	80084f2 <quorem+0x9a>
 8008554:	3c01      	subs	r4, #1
 8008556:	e7c9      	b.n	80084ec <quorem+0x94>
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	3b04      	subs	r3, #4
 800855c:	2a00      	cmp	r2, #0
 800855e:	d1f0      	bne.n	8008542 <quorem+0xea>
 8008560:	3c01      	subs	r4, #1
 8008562:	e7eb      	b.n	800853c <quorem+0xe4>
 8008564:	2000      	movs	r0, #0
 8008566:	e7ee      	b.n	8008546 <quorem+0xee>

08008568 <_dtoa_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	ed2d 8b04 	vpush	{d8-d9}
 8008570:	69c5      	ldr	r5, [r0, #28]
 8008572:	b093      	sub	sp, #76	; 0x4c
 8008574:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008578:	ec57 6b10 	vmov	r6, r7, d0
 800857c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008580:	9107      	str	r1, [sp, #28]
 8008582:	4604      	mov	r4, r0
 8008584:	920a      	str	r2, [sp, #40]	; 0x28
 8008586:	930d      	str	r3, [sp, #52]	; 0x34
 8008588:	b975      	cbnz	r5, 80085a8 <_dtoa_r+0x40>
 800858a:	2010      	movs	r0, #16
 800858c:	f000 fe2a 	bl	80091e4 <malloc>
 8008590:	4602      	mov	r2, r0
 8008592:	61e0      	str	r0, [r4, #28]
 8008594:	b920      	cbnz	r0, 80085a0 <_dtoa_r+0x38>
 8008596:	4bae      	ldr	r3, [pc, #696]	; (8008850 <_dtoa_r+0x2e8>)
 8008598:	21ef      	movs	r1, #239	; 0xef
 800859a:	48ae      	ldr	r0, [pc, #696]	; (8008854 <_dtoa_r+0x2ec>)
 800859c:	f002 fe2c 	bl	800b1f8 <__assert_func>
 80085a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085a4:	6005      	str	r5, [r0, #0]
 80085a6:	60c5      	str	r5, [r0, #12]
 80085a8:	69e3      	ldr	r3, [r4, #28]
 80085aa:	6819      	ldr	r1, [r3, #0]
 80085ac:	b151      	cbz	r1, 80085c4 <_dtoa_r+0x5c>
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	604a      	str	r2, [r1, #4]
 80085b2:	2301      	movs	r3, #1
 80085b4:	4093      	lsls	r3, r2
 80085b6:	608b      	str	r3, [r1, #8]
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 ff07 	bl	80093cc <_Bfree>
 80085be:	69e3      	ldr	r3, [r4, #28]
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	1e3b      	subs	r3, r7, #0
 80085c6:	bfbb      	ittet	lt
 80085c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085cc:	9303      	strlt	r3, [sp, #12]
 80085ce:	2300      	movge	r3, #0
 80085d0:	2201      	movlt	r2, #1
 80085d2:	bfac      	ite	ge
 80085d4:	f8c8 3000 	strge.w	r3, [r8]
 80085d8:	f8c8 2000 	strlt.w	r2, [r8]
 80085dc:	4b9e      	ldr	r3, [pc, #632]	; (8008858 <_dtoa_r+0x2f0>)
 80085de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80085e2:	ea33 0308 	bics.w	r3, r3, r8
 80085e6:	d11b      	bne.n	8008620 <_dtoa_r+0xb8>
 80085e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80085f4:	4333      	orrs	r3, r6
 80085f6:	f000 8593 	beq.w	8009120 <_dtoa_r+0xbb8>
 80085fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085fc:	b963      	cbnz	r3, 8008618 <_dtoa_r+0xb0>
 80085fe:	4b97      	ldr	r3, [pc, #604]	; (800885c <_dtoa_r+0x2f4>)
 8008600:	e027      	b.n	8008652 <_dtoa_r+0xea>
 8008602:	4b97      	ldr	r3, [pc, #604]	; (8008860 <_dtoa_r+0x2f8>)
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	3308      	adds	r3, #8
 8008608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	9800      	ldr	r0, [sp, #0]
 800860e:	b013      	add	sp, #76	; 0x4c
 8008610:	ecbd 8b04 	vpop	{d8-d9}
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	4b90      	ldr	r3, [pc, #576]	; (800885c <_dtoa_r+0x2f4>)
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	3303      	adds	r3, #3
 800861e:	e7f3      	b.n	8008608 <_dtoa_r+0xa0>
 8008620:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008624:	2200      	movs	r2, #0
 8008626:	ec51 0b17 	vmov	r0, r1, d7
 800862a:	eeb0 8a47 	vmov.f32	s16, s14
 800862e:	eef0 8a67 	vmov.f32	s17, s15
 8008632:	2300      	movs	r3, #0
 8008634:	f7f8 fa68 	bl	8000b08 <__aeabi_dcmpeq>
 8008638:	4681      	mov	r9, r0
 800863a:	b160      	cbz	r0, 8008656 <_dtoa_r+0xee>
 800863c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800863e:	2301      	movs	r3, #1
 8008640:	6013      	str	r3, [r2, #0]
 8008642:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8568 	beq.w	800911a <_dtoa_r+0xbb2>
 800864a:	4b86      	ldr	r3, [pc, #536]	; (8008864 <_dtoa_r+0x2fc>)
 800864c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	e7da      	b.n	800860c <_dtoa_r+0xa4>
 8008656:	aa10      	add	r2, sp, #64	; 0x40
 8008658:	a911      	add	r1, sp, #68	; 0x44
 800865a:	4620      	mov	r0, r4
 800865c:	eeb0 0a48 	vmov.f32	s0, s16
 8008660:	eef0 0a68 	vmov.f32	s1, s17
 8008664:	f001 fa4e 	bl	8009b04 <__d2b>
 8008668:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800866c:	4682      	mov	sl, r0
 800866e:	2d00      	cmp	r5, #0
 8008670:	d07f      	beq.n	8008772 <_dtoa_r+0x20a>
 8008672:	ee18 3a90 	vmov	r3, s17
 8008676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800867a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800867e:	ec51 0b18 	vmov	r0, r1, d8
 8008682:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800868a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800868e:	4619      	mov	r1, r3
 8008690:	2200      	movs	r2, #0
 8008692:	4b75      	ldr	r3, [pc, #468]	; (8008868 <_dtoa_r+0x300>)
 8008694:	f7f7 fe18 	bl	80002c8 <__aeabi_dsub>
 8008698:	a367      	add	r3, pc, #412	; (adr r3, 8008838 <_dtoa_r+0x2d0>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f7f7 ffcb 	bl	8000638 <__aeabi_dmul>
 80086a2:	a367      	add	r3, pc, #412	; (adr r3, 8008840 <_dtoa_r+0x2d8>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f7f7 fe10 	bl	80002cc <__adddf3>
 80086ac:	4606      	mov	r6, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	460f      	mov	r7, r1
 80086b2:	f7f7 ff57 	bl	8000564 <__aeabi_i2d>
 80086b6:	a364      	add	r3, pc, #400	; (adr r3, 8008848 <_dtoa_r+0x2e0>)
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f7f7 ffbc 	bl	8000638 <__aeabi_dmul>
 80086c0:	4602      	mov	r2, r0
 80086c2:	460b      	mov	r3, r1
 80086c4:	4630      	mov	r0, r6
 80086c6:	4639      	mov	r1, r7
 80086c8:	f7f7 fe00 	bl	80002cc <__adddf3>
 80086cc:	4606      	mov	r6, r0
 80086ce:	460f      	mov	r7, r1
 80086d0:	f7f8 fa62 	bl	8000b98 <__aeabi_d2iz>
 80086d4:	2200      	movs	r2, #0
 80086d6:	4683      	mov	fp, r0
 80086d8:	2300      	movs	r3, #0
 80086da:	4630      	mov	r0, r6
 80086dc:	4639      	mov	r1, r7
 80086de:	f7f8 fa1d 	bl	8000b1c <__aeabi_dcmplt>
 80086e2:	b148      	cbz	r0, 80086f8 <_dtoa_r+0x190>
 80086e4:	4658      	mov	r0, fp
 80086e6:	f7f7 ff3d 	bl	8000564 <__aeabi_i2d>
 80086ea:	4632      	mov	r2, r6
 80086ec:	463b      	mov	r3, r7
 80086ee:	f7f8 fa0b 	bl	8000b08 <__aeabi_dcmpeq>
 80086f2:	b908      	cbnz	r0, 80086f8 <_dtoa_r+0x190>
 80086f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086f8:	f1bb 0f16 	cmp.w	fp, #22
 80086fc:	d857      	bhi.n	80087ae <_dtoa_r+0x246>
 80086fe:	4b5b      	ldr	r3, [pc, #364]	; (800886c <_dtoa_r+0x304>)
 8008700:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	ec51 0b18 	vmov	r0, r1, d8
 800870c:	f7f8 fa06 	bl	8000b1c <__aeabi_dcmplt>
 8008710:	2800      	cmp	r0, #0
 8008712:	d04e      	beq.n	80087b2 <_dtoa_r+0x24a>
 8008714:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008718:	2300      	movs	r3, #0
 800871a:	930c      	str	r3, [sp, #48]	; 0x30
 800871c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800871e:	1b5b      	subs	r3, r3, r5
 8008720:	1e5a      	subs	r2, r3, #1
 8008722:	bf45      	ittet	mi
 8008724:	f1c3 0301 	rsbmi	r3, r3, #1
 8008728:	9305      	strmi	r3, [sp, #20]
 800872a:	2300      	movpl	r3, #0
 800872c:	2300      	movmi	r3, #0
 800872e:	9206      	str	r2, [sp, #24]
 8008730:	bf54      	ite	pl
 8008732:	9305      	strpl	r3, [sp, #20]
 8008734:	9306      	strmi	r3, [sp, #24]
 8008736:	f1bb 0f00 	cmp.w	fp, #0
 800873a:	db3c      	blt.n	80087b6 <_dtoa_r+0x24e>
 800873c:	9b06      	ldr	r3, [sp, #24]
 800873e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008742:	445b      	add	r3, fp
 8008744:	9306      	str	r3, [sp, #24]
 8008746:	2300      	movs	r3, #0
 8008748:	9308      	str	r3, [sp, #32]
 800874a:	9b07      	ldr	r3, [sp, #28]
 800874c:	2b09      	cmp	r3, #9
 800874e:	d868      	bhi.n	8008822 <_dtoa_r+0x2ba>
 8008750:	2b05      	cmp	r3, #5
 8008752:	bfc4      	itt	gt
 8008754:	3b04      	subgt	r3, #4
 8008756:	9307      	strgt	r3, [sp, #28]
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	f1a3 0302 	sub.w	r3, r3, #2
 800875e:	bfcc      	ite	gt
 8008760:	2500      	movgt	r5, #0
 8008762:	2501      	movle	r5, #1
 8008764:	2b03      	cmp	r3, #3
 8008766:	f200 8085 	bhi.w	8008874 <_dtoa_r+0x30c>
 800876a:	e8df f003 	tbb	[pc, r3]
 800876e:	3b2e      	.short	0x3b2e
 8008770:	5839      	.short	0x5839
 8008772:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008776:	441d      	add	r5, r3
 8008778:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800877c:	2b20      	cmp	r3, #32
 800877e:	bfc1      	itttt	gt
 8008780:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008784:	fa08 f803 	lslgt.w	r8, r8, r3
 8008788:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800878c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008790:	bfd6      	itet	le
 8008792:	f1c3 0320 	rsble	r3, r3, #32
 8008796:	ea48 0003 	orrgt.w	r0, r8, r3
 800879a:	fa06 f003 	lslle.w	r0, r6, r3
 800879e:	f7f7 fed1 	bl	8000544 <__aeabi_ui2d>
 80087a2:	2201      	movs	r2, #1
 80087a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087a8:	3d01      	subs	r5, #1
 80087aa:	920e      	str	r2, [sp, #56]	; 0x38
 80087ac:	e76f      	b.n	800868e <_dtoa_r+0x126>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7b3      	b.n	800871a <_dtoa_r+0x1b2>
 80087b2:	900c      	str	r0, [sp, #48]	; 0x30
 80087b4:	e7b2      	b.n	800871c <_dtoa_r+0x1b4>
 80087b6:	9b05      	ldr	r3, [sp, #20]
 80087b8:	eba3 030b 	sub.w	r3, r3, fp
 80087bc:	9305      	str	r3, [sp, #20]
 80087be:	f1cb 0300 	rsb	r3, fp, #0
 80087c2:	9308      	str	r3, [sp, #32]
 80087c4:	2300      	movs	r3, #0
 80087c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087c8:	e7bf      	b.n	800874a <_dtoa_r+0x1e2>
 80087ca:	2300      	movs	r3, #0
 80087cc:	9309      	str	r3, [sp, #36]	; 0x24
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc52      	bgt.n	800887a <_dtoa_r+0x312>
 80087d4:	2301      	movs	r3, #1
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	461a      	mov	r2, r3
 80087dc:	920a      	str	r2, [sp, #40]	; 0x28
 80087de:	e00b      	b.n	80087f8 <_dtoa_r+0x290>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7f3      	b.n	80087cc <_dtoa_r+0x264>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	; 0x24
 80087e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ea:	445b      	add	r3, fp
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	3301      	adds	r3, #1
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	9304      	str	r3, [sp, #16]
 80087f4:	bfb8      	it	lt
 80087f6:	2301      	movlt	r3, #1
 80087f8:	69e0      	ldr	r0, [r4, #28]
 80087fa:	2100      	movs	r1, #0
 80087fc:	2204      	movs	r2, #4
 80087fe:	f102 0614 	add.w	r6, r2, #20
 8008802:	429e      	cmp	r6, r3
 8008804:	d93d      	bls.n	8008882 <_dtoa_r+0x31a>
 8008806:	6041      	str	r1, [r0, #4]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fd9f 	bl	800934c <_Balloc>
 800880e:	9000      	str	r0, [sp, #0]
 8008810:	2800      	cmp	r0, #0
 8008812:	d139      	bne.n	8008888 <_dtoa_r+0x320>
 8008814:	4b16      	ldr	r3, [pc, #88]	; (8008870 <_dtoa_r+0x308>)
 8008816:	4602      	mov	r2, r0
 8008818:	f240 11af 	movw	r1, #431	; 0x1af
 800881c:	e6bd      	b.n	800859a <_dtoa_r+0x32>
 800881e:	2301      	movs	r3, #1
 8008820:	e7e1      	b.n	80087e6 <_dtoa_r+0x27e>
 8008822:	2501      	movs	r5, #1
 8008824:	2300      	movs	r3, #0
 8008826:	9307      	str	r3, [sp, #28]
 8008828:	9509      	str	r5, [sp, #36]	; 0x24
 800882a:	f04f 33ff 	mov.w	r3, #4294967295
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	2200      	movs	r2, #0
 8008834:	2312      	movs	r3, #18
 8008836:	e7d1      	b.n	80087dc <_dtoa_r+0x274>
 8008838:	636f4361 	.word	0x636f4361
 800883c:	3fd287a7 	.word	0x3fd287a7
 8008840:	8b60c8b3 	.word	0x8b60c8b3
 8008844:	3fc68a28 	.word	0x3fc68a28
 8008848:	509f79fb 	.word	0x509f79fb
 800884c:	3fd34413 	.word	0x3fd34413
 8008850:	0800bc8a 	.word	0x0800bc8a
 8008854:	0800bca1 	.word	0x0800bca1
 8008858:	7ff00000 	.word	0x7ff00000
 800885c:	0800bc86 	.word	0x0800bc86
 8008860:	0800bc7d 	.word	0x0800bc7d
 8008864:	0800bc55 	.word	0x0800bc55
 8008868:	3ff80000 	.word	0x3ff80000
 800886c:	0800bd90 	.word	0x0800bd90
 8008870:	0800bcf9 	.word	0x0800bcf9
 8008874:	2301      	movs	r3, #1
 8008876:	9309      	str	r3, [sp, #36]	; 0x24
 8008878:	e7d7      	b.n	800882a <_dtoa_r+0x2c2>
 800887a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	9304      	str	r3, [sp, #16]
 8008880:	e7ba      	b.n	80087f8 <_dtoa_r+0x290>
 8008882:	3101      	adds	r1, #1
 8008884:	0052      	lsls	r2, r2, #1
 8008886:	e7ba      	b.n	80087fe <_dtoa_r+0x296>
 8008888:	69e3      	ldr	r3, [r4, #28]
 800888a:	9a00      	ldr	r2, [sp, #0]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	9b04      	ldr	r3, [sp, #16]
 8008890:	2b0e      	cmp	r3, #14
 8008892:	f200 80a8 	bhi.w	80089e6 <_dtoa_r+0x47e>
 8008896:	2d00      	cmp	r5, #0
 8008898:	f000 80a5 	beq.w	80089e6 <_dtoa_r+0x47e>
 800889c:	f1bb 0f00 	cmp.w	fp, #0
 80088a0:	dd38      	ble.n	8008914 <_dtoa_r+0x3ac>
 80088a2:	4bc0      	ldr	r3, [pc, #768]	; (8008ba4 <_dtoa_r+0x63c>)
 80088a4:	f00b 020f 	and.w	r2, fp, #15
 80088a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80088b8:	d019      	beq.n	80088ee <_dtoa_r+0x386>
 80088ba:	4bbb      	ldr	r3, [pc, #748]	; (8008ba8 <_dtoa_r+0x640>)
 80088bc:	ec51 0b18 	vmov	r0, r1, d8
 80088c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088c4:	f7f7 ffe2 	bl	800088c <__aeabi_ddiv>
 80088c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088cc:	f008 080f 	and.w	r8, r8, #15
 80088d0:	2503      	movs	r5, #3
 80088d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008ba8 <_dtoa_r+0x640>
 80088d6:	f1b8 0f00 	cmp.w	r8, #0
 80088da:	d10a      	bne.n	80088f2 <_dtoa_r+0x38a>
 80088dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e0:	4632      	mov	r2, r6
 80088e2:	463b      	mov	r3, r7
 80088e4:	f7f7 ffd2 	bl	800088c <__aeabi_ddiv>
 80088e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ec:	e02b      	b.n	8008946 <_dtoa_r+0x3de>
 80088ee:	2502      	movs	r5, #2
 80088f0:	e7ef      	b.n	80088d2 <_dtoa_r+0x36a>
 80088f2:	f018 0f01 	tst.w	r8, #1
 80088f6:	d008      	beq.n	800890a <_dtoa_r+0x3a2>
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008900:	f7f7 fe9a 	bl	8000638 <__aeabi_dmul>
 8008904:	3501      	adds	r5, #1
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800890e:	f109 0908 	add.w	r9, r9, #8
 8008912:	e7e0      	b.n	80088d6 <_dtoa_r+0x36e>
 8008914:	f000 809f 	beq.w	8008a56 <_dtoa_r+0x4ee>
 8008918:	f1cb 0600 	rsb	r6, fp, #0
 800891c:	4ba1      	ldr	r3, [pc, #644]	; (8008ba4 <_dtoa_r+0x63c>)
 800891e:	4fa2      	ldr	r7, [pc, #648]	; (8008ba8 <_dtoa_r+0x640>)
 8008920:	f006 020f 	and.w	r2, r6, #15
 8008924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	ec51 0b18 	vmov	r0, r1, d8
 8008930:	f7f7 fe82 	bl	8000638 <__aeabi_dmul>
 8008934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008938:	1136      	asrs	r6, r6, #4
 800893a:	2300      	movs	r3, #0
 800893c:	2502      	movs	r5, #2
 800893e:	2e00      	cmp	r6, #0
 8008940:	d17e      	bne.n	8008a40 <_dtoa_r+0x4d8>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1d0      	bne.n	80088e8 <_dtoa_r+0x380>
 8008946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008948:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8084 	beq.w	8008a5a <_dtoa_r+0x4f2>
 8008952:	4b96      	ldr	r3, [pc, #600]	; (8008bac <_dtoa_r+0x644>)
 8008954:	2200      	movs	r2, #0
 8008956:	4640      	mov	r0, r8
 8008958:	4649      	mov	r1, r9
 800895a:	f7f8 f8df 	bl	8000b1c <__aeabi_dcmplt>
 800895e:	2800      	cmp	r0, #0
 8008960:	d07b      	beq.n	8008a5a <_dtoa_r+0x4f2>
 8008962:	9b04      	ldr	r3, [sp, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d078      	beq.n	8008a5a <_dtoa_r+0x4f2>
 8008968:	9b01      	ldr	r3, [sp, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	dd39      	ble.n	80089e2 <_dtoa_r+0x47a>
 800896e:	4b90      	ldr	r3, [pc, #576]	; (8008bb0 <_dtoa_r+0x648>)
 8008970:	2200      	movs	r2, #0
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	f7f7 fe5f 	bl	8000638 <__aeabi_dmul>
 800897a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897e:	9e01      	ldr	r6, [sp, #4]
 8008980:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008984:	3501      	adds	r5, #1
 8008986:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800898a:	4628      	mov	r0, r5
 800898c:	f7f7 fdea 	bl	8000564 <__aeabi_i2d>
 8008990:	4642      	mov	r2, r8
 8008992:	464b      	mov	r3, r9
 8008994:	f7f7 fe50 	bl	8000638 <__aeabi_dmul>
 8008998:	4b86      	ldr	r3, [pc, #536]	; (8008bb4 <_dtoa_r+0x64c>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fc96 	bl	80002cc <__adddf3>
 80089a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	2e00      	cmp	r6, #0
 80089ac:	d158      	bne.n	8008a60 <_dtoa_r+0x4f8>
 80089ae:	4b82      	ldr	r3, [pc, #520]	; (8008bb8 <_dtoa_r+0x650>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	4640      	mov	r0, r8
 80089b4:	4649      	mov	r1, r9
 80089b6:	f7f7 fc87 	bl	80002c8 <__aeabi_dsub>
 80089ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089be:	4680      	mov	r8, r0
 80089c0:	4689      	mov	r9, r1
 80089c2:	f7f8 f8c9 	bl	8000b58 <__aeabi_dcmpgt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f040 8296 	bne.w	8008ef8 <_dtoa_r+0x990>
 80089cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80089d0:	4640      	mov	r0, r8
 80089d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f8 f8a0 	bl	8000b1c <__aeabi_dcmplt>
 80089dc:	2800      	cmp	r0, #0
 80089de:	f040 8289 	bne.w	8008ef4 <_dtoa_r+0x98c>
 80089e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80089e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f2c0 814e 	blt.w	8008c8a <_dtoa_r+0x722>
 80089ee:	f1bb 0f0e 	cmp.w	fp, #14
 80089f2:	f300 814a 	bgt.w	8008c8a <_dtoa_r+0x722>
 80089f6:	4b6b      	ldr	r3, [pc, #428]	; (8008ba4 <_dtoa_r+0x63c>)
 80089f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f280 80dc 	bge.w	8008bc0 <_dtoa_r+0x658>
 8008a08:	9b04      	ldr	r3, [sp, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f300 80d8 	bgt.w	8008bc0 <_dtoa_r+0x658>
 8008a10:	f040 826f 	bne.w	8008ef2 <_dtoa_r+0x98a>
 8008a14:	4b68      	ldr	r3, [pc, #416]	; (8008bb8 <_dtoa_r+0x650>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7f7 fe0c 	bl	8000638 <__aeabi_dmul>
 8008a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a24:	f7f8 f88e 	bl	8000b44 <__aeabi_dcmpge>
 8008a28:	9e04      	ldr	r6, [sp, #16]
 8008a2a:	4637      	mov	r7, r6
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	f040 8245 	bne.w	8008ebc <_dtoa_r+0x954>
 8008a32:	9d00      	ldr	r5, [sp, #0]
 8008a34:	2331      	movs	r3, #49	; 0x31
 8008a36:	f805 3b01 	strb.w	r3, [r5], #1
 8008a3a:	f10b 0b01 	add.w	fp, fp, #1
 8008a3e:	e241      	b.n	8008ec4 <_dtoa_r+0x95c>
 8008a40:	07f2      	lsls	r2, r6, #31
 8008a42:	d505      	bpl.n	8008a50 <_dtoa_r+0x4e8>
 8008a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a48:	f7f7 fdf6 	bl	8000638 <__aeabi_dmul>
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	2301      	movs	r3, #1
 8008a50:	1076      	asrs	r6, r6, #1
 8008a52:	3708      	adds	r7, #8
 8008a54:	e773      	b.n	800893e <_dtoa_r+0x3d6>
 8008a56:	2502      	movs	r5, #2
 8008a58:	e775      	b.n	8008946 <_dtoa_r+0x3de>
 8008a5a:	9e04      	ldr	r6, [sp, #16]
 8008a5c:	465f      	mov	r7, fp
 8008a5e:	e792      	b.n	8008986 <_dtoa_r+0x41e>
 8008a60:	9900      	ldr	r1, [sp, #0]
 8008a62:	4b50      	ldr	r3, [pc, #320]	; (8008ba4 <_dtoa_r+0x63c>)
 8008a64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a68:	4431      	add	r1, r6
 8008a6a:	9102      	str	r1, [sp, #8]
 8008a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a6e:	eeb0 9a47 	vmov.f32	s18, s14
 8008a72:	eef0 9a67 	vmov.f32	s19, s15
 8008a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	d044      	beq.n	8008b0c <_dtoa_r+0x5a4>
 8008a82:	494e      	ldr	r1, [pc, #312]	; (8008bbc <_dtoa_r+0x654>)
 8008a84:	2000      	movs	r0, #0
 8008a86:	f7f7 ff01 	bl	800088c <__aeabi_ddiv>
 8008a8a:	ec53 2b19 	vmov	r2, r3, d9
 8008a8e:	f7f7 fc1b 	bl	80002c8 <__aeabi_dsub>
 8008a92:	9d00      	ldr	r5, [sp, #0]
 8008a94:	ec41 0b19 	vmov	d9, r0, r1
 8008a98:	4649      	mov	r1, r9
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	f7f8 f87c 	bl	8000b98 <__aeabi_d2iz>
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	f7f7 fd5f 	bl	8000564 <__aeabi_i2d>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fc0b 	bl	80002c8 <__aeabi_dsub>
 8008ab2:	3630      	adds	r6, #48	; 0x30
 8008ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ab8:	ec53 2b19 	vmov	r2, r3, d9
 8008abc:	4680      	mov	r8, r0
 8008abe:	4689      	mov	r9, r1
 8008ac0:	f7f8 f82c 	bl	8000b1c <__aeabi_dcmplt>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d164      	bne.n	8008b92 <_dtoa_r+0x62a>
 8008ac8:	4642      	mov	r2, r8
 8008aca:	464b      	mov	r3, r9
 8008acc:	4937      	ldr	r1, [pc, #220]	; (8008bac <_dtoa_r+0x644>)
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f7f7 fbfa 	bl	80002c8 <__aeabi_dsub>
 8008ad4:	ec53 2b19 	vmov	r2, r3, d9
 8008ad8:	f7f8 f820 	bl	8000b1c <__aeabi_dcmplt>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f040 80b6 	bne.w	8008c4e <_dtoa_r+0x6e6>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	429d      	cmp	r5, r3
 8008ae6:	f43f af7c 	beq.w	80089e2 <_dtoa_r+0x47a>
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <_dtoa_r+0x648>)
 8008aec:	ec51 0b19 	vmov	r0, r1, d9
 8008af0:	2200      	movs	r2, #0
 8008af2:	f7f7 fda1 	bl	8000638 <__aeabi_dmul>
 8008af6:	4b2e      	ldr	r3, [pc, #184]	; (8008bb0 <_dtoa_r+0x648>)
 8008af8:	ec41 0b19 	vmov	d9, r0, r1
 8008afc:	2200      	movs	r2, #0
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fd99 	bl	8000638 <__aeabi_dmul>
 8008b06:	4680      	mov	r8, r0
 8008b08:	4689      	mov	r9, r1
 8008b0a:	e7c5      	b.n	8008a98 <_dtoa_r+0x530>
 8008b0c:	ec51 0b17 	vmov	r0, r1, d7
 8008b10:	f7f7 fd92 	bl	8000638 <__aeabi_dmul>
 8008b14:	9b02      	ldr	r3, [sp, #8]
 8008b16:	9d00      	ldr	r5, [sp, #0]
 8008b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b1a:	ec41 0b19 	vmov	d9, r0, r1
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	f7f8 f839 	bl	8000b98 <__aeabi_d2iz>
 8008b26:	4606      	mov	r6, r0
 8008b28:	f7f7 fd1c 	bl	8000564 <__aeabi_i2d>
 8008b2c:	3630      	adds	r6, #48	; 0x30
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4640      	mov	r0, r8
 8008b34:	4649      	mov	r1, r9
 8008b36:	f7f7 fbc7 	bl	80002c8 <__aeabi_dsub>
 8008b3a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b3e:	9b02      	ldr	r3, [sp, #8]
 8008b40:	429d      	cmp	r5, r3
 8008b42:	4680      	mov	r8, r0
 8008b44:	4689      	mov	r9, r1
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	d124      	bne.n	8008b96 <_dtoa_r+0x62e>
 8008b4c:	4b1b      	ldr	r3, [pc, #108]	; (8008bbc <_dtoa_r+0x654>)
 8008b4e:	ec51 0b19 	vmov	r0, r1, d9
 8008b52:	f7f7 fbbb 	bl	80002cc <__adddf3>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fffb 	bl	8000b58 <__aeabi_dcmpgt>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d173      	bne.n	8008c4e <_dtoa_r+0x6e6>
 8008b66:	ec53 2b19 	vmov	r2, r3, d9
 8008b6a:	4914      	ldr	r1, [pc, #80]	; (8008bbc <_dtoa_r+0x654>)
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7f7 fbab 	bl	80002c8 <__aeabi_dsub>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f7f7 ffcf 	bl	8000b1c <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f43f af2f 	beq.w	80089e2 <_dtoa_r+0x47a>
 8008b84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b86:	1e6b      	subs	r3, r5, #1
 8008b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b8e:	2b30      	cmp	r3, #48	; 0x30
 8008b90:	d0f8      	beq.n	8008b84 <_dtoa_r+0x61c>
 8008b92:	46bb      	mov	fp, r7
 8008b94:	e04a      	b.n	8008c2c <_dtoa_r+0x6c4>
 8008b96:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <_dtoa_r+0x648>)
 8008b98:	f7f7 fd4e 	bl	8000638 <__aeabi_dmul>
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	4689      	mov	r9, r1
 8008ba0:	e7bd      	b.n	8008b1e <_dtoa_r+0x5b6>
 8008ba2:	bf00      	nop
 8008ba4:	0800bd90 	.word	0x0800bd90
 8008ba8:	0800bd68 	.word	0x0800bd68
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	401c0000 	.word	0x401c0000
 8008bb8:	40140000 	.word	0x40140000
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bc4:	9d00      	ldr	r5, [sp, #0]
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	464b      	mov	r3, r9
 8008bca:	4630      	mov	r0, r6
 8008bcc:	4639      	mov	r1, r7
 8008bce:	f7f7 fe5d 	bl	800088c <__aeabi_ddiv>
 8008bd2:	f7f7 ffe1 	bl	8000b98 <__aeabi_d2iz>
 8008bd6:	9001      	str	r0, [sp, #4]
 8008bd8:	f7f7 fcc4 	bl	8000564 <__aeabi_i2d>
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	f7f7 fd2a 	bl	8000638 <__aeabi_dmul>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 fb6c 	bl	80002c8 <__aeabi_dsub>
 8008bf0:	9e01      	ldr	r6, [sp, #4]
 8008bf2:	9f04      	ldr	r7, [sp, #16]
 8008bf4:	3630      	adds	r6, #48	; 0x30
 8008bf6:	f805 6b01 	strb.w	r6, [r5], #1
 8008bfa:	9e00      	ldr	r6, [sp, #0]
 8008bfc:	1bae      	subs	r6, r5, r6
 8008bfe:	42b7      	cmp	r7, r6
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	d134      	bne.n	8008c70 <_dtoa_r+0x708>
 8008c06:	f7f7 fb61 	bl	80002cc <__adddf3>
 8008c0a:	4642      	mov	r2, r8
 8008c0c:	464b      	mov	r3, r9
 8008c0e:	4606      	mov	r6, r0
 8008c10:	460f      	mov	r7, r1
 8008c12:	f7f7 ffa1 	bl	8000b58 <__aeabi_dcmpgt>
 8008c16:	b9c8      	cbnz	r0, 8008c4c <_dtoa_r+0x6e4>
 8008c18:	4642      	mov	r2, r8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4639      	mov	r1, r7
 8008c20:	f7f7 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 8008c24:	b110      	cbz	r0, 8008c2c <_dtoa_r+0x6c4>
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	07db      	lsls	r3, r3, #31
 8008c2a:	d40f      	bmi.n	8008c4c <_dtoa_r+0x6e4>
 8008c2c:	4651      	mov	r1, sl
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fbcc 	bl	80093cc <_Bfree>
 8008c34:	2300      	movs	r3, #0
 8008c36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c38:	702b      	strb	r3, [r5, #0]
 8008c3a:	f10b 0301 	add.w	r3, fp, #1
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f43f ace2 	beq.w	800860c <_dtoa_r+0xa4>
 8008c48:	601d      	str	r5, [r3, #0]
 8008c4a:	e4df      	b.n	800860c <_dtoa_r+0xa4>
 8008c4c:	465f      	mov	r7, fp
 8008c4e:	462b      	mov	r3, r5
 8008c50:	461d      	mov	r5, r3
 8008c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c56:	2a39      	cmp	r2, #57	; 0x39
 8008c58:	d106      	bne.n	8008c68 <_dtoa_r+0x700>
 8008c5a:	9a00      	ldr	r2, [sp, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d1f7      	bne.n	8008c50 <_dtoa_r+0x6e8>
 8008c60:	9900      	ldr	r1, [sp, #0]
 8008c62:	2230      	movs	r2, #48	; 0x30
 8008c64:	3701      	adds	r7, #1
 8008c66:	700a      	strb	r2, [r1, #0]
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	3201      	adds	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	e790      	b.n	8008b92 <_dtoa_r+0x62a>
 8008c70:	4ba3      	ldr	r3, [pc, #652]	; (8008f00 <_dtoa_r+0x998>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	f7f7 fce0 	bl	8000638 <__aeabi_dmul>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460f      	mov	r7, r1
 8008c80:	f7f7 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d09e      	beq.n	8008bc6 <_dtoa_r+0x65e>
 8008c88:	e7d0      	b.n	8008c2c <_dtoa_r+0x6c4>
 8008c8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	f000 80ca 	beq.w	8008e26 <_dtoa_r+0x8be>
 8008c92:	9a07      	ldr	r2, [sp, #28]
 8008c94:	2a01      	cmp	r2, #1
 8008c96:	f300 80ad 	bgt.w	8008df4 <_dtoa_r+0x88c>
 8008c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	f000 80a5 	beq.w	8008dec <_dtoa_r+0x884>
 8008ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ca6:	9e08      	ldr	r6, [sp, #32]
 8008ca8:	9d05      	ldr	r5, [sp, #20]
 8008caa:	9a05      	ldr	r2, [sp, #20]
 8008cac:	441a      	add	r2, r3
 8008cae:	9205      	str	r2, [sp, #20]
 8008cb0:	9a06      	ldr	r2, [sp, #24]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	441a      	add	r2, r3
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	9206      	str	r2, [sp, #24]
 8008cba:	f000 fc87 	bl	80095cc <__i2b>
 8008cbe:	4607      	mov	r7, r0
 8008cc0:	b165      	cbz	r5, 8008cdc <_dtoa_r+0x774>
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd09      	ble.n	8008cdc <_dtoa_r+0x774>
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	9a05      	ldr	r2, [sp, #20]
 8008ccc:	bfa8      	it	ge
 8008cce:	462b      	movge	r3, r5
 8008cd0:	1ad2      	subs	r2, r2, r3
 8008cd2:	9205      	str	r2, [sp, #20]
 8008cd4:	9a06      	ldr	r2, [sp, #24]
 8008cd6:	1aed      	subs	r5, r5, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	9306      	str	r3, [sp, #24]
 8008cdc:	9b08      	ldr	r3, [sp, #32]
 8008cde:	b1f3      	cbz	r3, 8008d1e <_dtoa_r+0x7b6>
 8008ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80a3 	beq.w	8008e2e <_dtoa_r+0x8c6>
 8008ce8:	2e00      	cmp	r6, #0
 8008cea:	dd10      	ble.n	8008d0e <_dtoa_r+0x7a6>
 8008cec:	4639      	mov	r1, r7
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 fd2b 	bl	800974c <__pow5mult>
 8008cf6:	4652      	mov	r2, sl
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4607      	mov	r7, r0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 fc7b 	bl	80095f8 <__multiply>
 8008d02:	4651      	mov	r1, sl
 8008d04:	4680      	mov	r8, r0
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fb60 	bl	80093cc <_Bfree>
 8008d0c:	46c2      	mov	sl, r8
 8008d0e:	9b08      	ldr	r3, [sp, #32]
 8008d10:	1b9a      	subs	r2, r3, r6
 8008d12:	d004      	beq.n	8008d1e <_dtoa_r+0x7b6>
 8008d14:	4651      	mov	r1, sl
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 fd18 	bl	800974c <__pow5mult>
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fc53 	bl	80095cc <__i2b>
 8008d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	f340 8081 	ble.w	8008e32 <_dtoa_r+0x8ca>
 8008d30:	461a      	mov	r2, r3
 8008d32:	4601      	mov	r1, r0
 8008d34:	4620      	mov	r0, r4
 8008d36:	f000 fd09 	bl	800974c <__pow5mult>
 8008d3a:	9b07      	ldr	r3, [sp, #28]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	4606      	mov	r6, r0
 8008d40:	dd7a      	ble.n	8008e38 <_dtoa_r+0x8d0>
 8008d42:	f04f 0800 	mov.w	r8, #0
 8008d46:	6933      	ldr	r3, [r6, #16]
 8008d48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d4c:	6918      	ldr	r0, [r3, #16]
 8008d4e:	f000 fbef 	bl	8009530 <__hi0bits>
 8008d52:	f1c0 0020 	rsb	r0, r0, #32
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	4418      	add	r0, r3
 8008d5a:	f010 001f 	ands.w	r0, r0, #31
 8008d5e:	f000 8094 	beq.w	8008e8a <_dtoa_r+0x922>
 8008d62:	f1c0 0320 	rsb	r3, r0, #32
 8008d66:	2b04      	cmp	r3, #4
 8008d68:	f340 8085 	ble.w	8008e76 <_dtoa_r+0x90e>
 8008d6c:	9b05      	ldr	r3, [sp, #20]
 8008d6e:	f1c0 001c 	rsb	r0, r0, #28
 8008d72:	4403      	add	r3, r0
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	4403      	add	r3, r0
 8008d7a:	4405      	add	r5, r0
 8008d7c:	9306      	str	r3, [sp, #24]
 8008d7e:	9b05      	ldr	r3, [sp, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dd05      	ble.n	8008d90 <_dtoa_r+0x828>
 8008d84:	4651      	mov	r1, sl
 8008d86:	461a      	mov	r2, r3
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fd39 	bl	8009800 <__lshift>
 8008d8e:	4682      	mov	sl, r0
 8008d90:	9b06      	ldr	r3, [sp, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dd05      	ble.n	8008da2 <_dtoa_r+0x83a>
 8008d96:	4631      	mov	r1, r6
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 fd30 	bl	8009800 <__lshift>
 8008da0:	4606      	mov	r6, r0
 8008da2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d072      	beq.n	8008e8e <_dtoa_r+0x926>
 8008da8:	4631      	mov	r1, r6
 8008daa:	4650      	mov	r0, sl
 8008dac:	f000 fd94 	bl	80098d8 <__mcmp>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	da6c      	bge.n	8008e8e <_dtoa_r+0x926>
 8008db4:	2300      	movs	r3, #0
 8008db6:	4651      	mov	r1, sl
 8008db8:	220a      	movs	r2, #10
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fb28 	bl	8009410 <__multadd>
 8008dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 81b0 	beq.w	800912e <_dtoa_r+0xbc6>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4639      	mov	r1, r7
 8008dd2:	220a      	movs	r2, #10
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f000 fb1b 	bl	8009410 <__multadd>
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	4607      	mov	r7, r0
 8008de0:	f300 8096 	bgt.w	8008f10 <_dtoa_r+0x9a8>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	dc59      	bgt.n	8008e9e <_dtoa_r+0x936>
 8008dea:	e091      	b.n	8008f10 <_dtoa_r+0x9a8>
 8008dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008df2:	e758      	b.n	8008ca6 <_dtoa_r+0x73e>
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	1e5e      	subs	r6, r3, #1
 8008df8:	9b08      	ldr	r3, [sp, #32]
 8008dfa:	42b3      	cmp	r3, r6
 8008dfc:	bfbf      	itttt	lt
 8008dfe:	9b08      	ldrlt	r3, [sp, #32]
 8008e00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e02:	9608      	strlt	r6, [sp, #32]
 8008e04:	1af3      	sublt	r3, r6, r3
 8008e06:	bfb4      	ite	lt
 8008e08:	18d2      	addlt	r2, r2, r3
 8008e0a:	1b9e      	subge	r6, r3, r6
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	bfbc      	itt	lt
 8008e10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e12:	2600      	movlt	r6, #0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	bfb7      	itett	lt
 8008e18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e20:	1a9d      	sublt	r5, r3, r2
 8008e22:	2300      	movlt	r3, #0
 8008e24:	e741      	b.n	8008caa <_dtoa_r+0x742>
 8008e26:	9e08      	ldr	r6, [sp, #32]
 8008e28:	9d05      	ldr	r5, [sp, #20]
 8008e2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e2c:	e748      	b.n	8008cc0 <_dtoa_r+0x758>
 8008e2e:	9a08      	ldr	r2, [sp, #32]
 8008e30:	e770      	b.n	8008d14 <_dtoa_r+0x7ac>
 8008e32:	9b07      	ldr	r3, [sp, #28]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	dc19      	bgt.n	8008e6c <_dtoa_r+0x904>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	b9bb      	cbnz	r3, 8008e6c <_dtoa_r+0x904>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e42:	b99b      	cbnz	r3, 8008e6c <_dtoa_r+0x904>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e4a:	0d1b      	lsrs	r3, r3, #20
 8008e4c:	051b      	lsls	r3, r3, #20
 8008e4e:	b183      	cbz	r3, 8008e72 <_dtoa_r+0x90a>
 8008e50:	9b05      	ldr	r3, [sp, #20]
 8008e52:	3301      	adds	r3, #1
 8008e54:	9305      	str	r3, [sp, #20]
 8008e56:	9b06      	ldr	r3, [sp, #24]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9306      	str	r3, [sp, #24]
 8008e5c:	f04f 0801 	mov.w	r8, #1
 8008e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f47f af6f 	bne.w	8008d46 <_dtoa_r+0x7de>
 8008e68:	2001      	movs	r0, #1
 8008e6a:	e774      	b.n	8008d56 <_dtoa_r+0x7ee>
 8008e6c:	f04f 0800 	mov.w	r8, #0
 8008e70:	e7f6      	b.n	8008e60 <_dtoa_r+0x8f8>
 8008e72:	4698      	mov	r8, r3
 8008e74:	e7f4      	b.n	8008e60 <_dtoa_r+0x8f8>
 8008e76:	d082      	beq.n	8008d7e <_dtoa_r+0x816>
 8008e78:	9a05      	ldr	r2, [sp, #20]
 8008e7a:	331c      	adds	r3, #28
 8008e7c:	441a      	add	r2, r3
 8008e7e:	9205      	str	r2, [sp, #20]
 8008e80:	9a06      	ldr	r2, [sp, #24]
 8008e82:	441a      	add	r2, r3
 8008e84:	441d      	add	r5, r3
 8008e86:	9206      	str	r2, [sp, #24]
 8008e88:	e779      	b.n	8008d7e <_dtoa_r+0x816>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	e7f4      	b.n	8008e78 <_dtoa_r+0x910>
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dc37      	bgt.n	8008f04 <_dtoa_r+0x99c>
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	dd34      	ble.n	8008f04 <_dtoa_r+0x99c>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	9b01      	ldr	r3, [sp, #4]
 8008ea0:	b963      	cbnz	r3, 8008ebc <_dtoa_r+0x954>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	2205      	movs	r2, #5
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 fab2 	bl	8009410 <__multadd>
 8008eac:	4601      	mov	r1, r0
 8008eae:	4606      	mov	r6, r0
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	f000 fd11 	bl	80098d8 <__mcmp>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f73f adbb 	bgt.w	8008a32 <_dtoa_r+0x4ca>
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebe:	9d00      	ldr	r5, [sp, #0]
 8008ec0:	ea6f 0b03 	mvn.w	fp, r3
 8008ec4:	f04f 0800 	mov.w	r8, #0
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 fa7e 	bl	80093cc <_Bfree>
 8008ed0:	2f00      	cmp	r7, #0
 8008ed2:	f43f aeab 	beq.w	8008c2c <_dtoa_r+0x6c4>
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	d005      	beq.n	8008ee8 <_dtoa_r+0x980>
 8008edc:	45b8      	cmp	r8, r7
 8008ede:	d003      	beq.n	8008ee8 <_dtoa_r+0x980>
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fa72 	bl	80093cc <_Bfree>
 8008ee8:	4639      	mov	r1, r7
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fa6e 	bl	80093cc <_Bfree>
 8008ef0:	e69c      	b.n	8008c2c <_dtoa_r+0x6c4>
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	e7e1      	b.n	8008ebc <_dtoa_r+0x954>
 8008ef8:	46bb      	mov	fp, r7
 8008efa:	4637      	mov	r7, r6
 8008efc:	e599      	b.n	8008a32 <_dtoa_r+0x4ca>
 8008efe:	bf00      	nop
 8008f00:	40240000 	.word	0x40240000
 8008f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f000 80c8 	beq.w	800909c <_dtoa_r+0xb34>
 8008f0c:	9b04      	ldr	r3, [sp, #16]
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	2d00      	cmp	r5, #0
 8008f12:	dd05      	ble.n	8008f20 <_dtoa_r+0x9b8>
 8008f14:	4639      	mov	r1, r7
 8008f16:	462a      	mov	r2, r5
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 fc71 	bl	8009800 <__lshift>
 8008f1e:	4607      	mov	r7, r0
 8008f20:	f1b8 0f00 	cmp.w	r8, #0
 8008f24:	d05b      	beq.n	8008fde <_dtoa_r+0xa76>
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fa0f 	bl	800934c <_Balloc>
 8008f2e:	4605      	mov	r5, r0
 8008f30:	b928      	cbnz	r0, 8008f3e <_dtoa_r+0x9d6>
 8008f32:	4b83      	ldr	r3, [pc, #524]	; (8009140 <_dtoa_r+0xbd8>)
 8008f34:	4602      	mov	r2, r0
 8008f36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f3a:	f7ff bb2e 	b.w	800859a <_dtoa_r+0x32>
 8008f3e:	693a      	ldr	r2, [r7, #16]
 8008f40:	3202      	adds	r2, #2
 8008f42:	0092      	lsls	r2, r2, #2
 8008f44:	f107 010c 	add.w	r1, r7, #12
 8008f48:	300c      	adds	r0, #12
 8008f4a:	f7ff fa71 	bl	8008430 <memcpy>
 8008f4e:	2201      	movs	r2, #1
 8008f50:	4629      	mov	r1, r5
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fc54 	bl	8009800 <__lshift>
 8008f58:	9b00      	ldr	r3, [sp, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	9304      	str	r3, [sp, #16]
 8008f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f62:	4413      	add	r3, r2
 8008f64:	9308      	str	r3, [sp, #32]
 8008f66:	9b02      	ldr	r3, [sp, #8]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	46b8      	mov	r8, r7
 8008f6e:	9306      	str	r3, [sp, #24]
 8008f70:	4607      	mov	r7, r0
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	4631      	mov	r1, r6
 8008f76:	3b01      	subs	r3, #1
 8008f78:	4650      	mov	r0, sl
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	f7ff fa6c 	bl	8008458 <quorem>
 8008f80:	4641      	mov	r1, r8
 8008f82:	9002      	str	r0, [sp, #8]
 8008f84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f88:	4650      	mov	r0, sl
 8008f8a:	f000 fca5 	bl	80098d8 <__mcmp>
 8008f8e:	463a      	mov	r2, r7
 8008f90:	9005      	str	r0, [sp, #20]
 8008f92:	4631      	mov	r1, r6
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fcbb 	bl	8009910 <__mdiff>
 8008f9a:	68c2      	ldr	r2, [r0, #12]
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	bb02      	cbnz	r2, 8008fe2 <_dtoa_r+0xa7a>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4650      	mov	r0, sl
 8008fa4:	f000 fc98 	bl	80098d8 <__mcmp>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4629      	mov	r1, r5
 8008fac:	4620      	mov	r0, r4
 8008fae:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb0:	f000 fa0c 	bl	80093cc <_Bfree>
 8008fb4:	9b07      	ldr	r3, [sp, #28]
 8008fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fb8:	9d04      	ldr	r5, [sp, #16]
 8008fba:	ea43 0102 	orr.w	r1, r3, r2
 8008fbe:	9b06      	ldr	r3, [sp, #24]
 8008fc0:	4319      	orrs	r1, r3
 8008fc2:	d110      	bne.n	8008fe6 <_dtoa_r+0xa7e>
 8008fc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fc8:	d029      	beq.n	800901e <_dtoa_r+0xab6>
 8008fca:	9b05      	ldr	r3, [sp, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dd02      	ble.n	8008fd6 <_dtoa_r+0xa6e>
 8008fd0:	9b02      	ldr	r3, [sp, #8]
 8008fd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	f883 9000 	strb.w	r9, [r3]
 8008fdc:	e774      	b.n	8008ec8 <_dtoa_r+0x960>
 8008fde:	4638      	mov	r0, r7
 8008fe0:	e7ba      	b.n	8008f58 <_dtoa_r+0x9f0>
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	e7e1      	b.n	8008faa <_dtoa_r+0xa42>
 8008fe6:	9b05      	ldr	r3, [sp, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	db04      	blt.n	8008ff6 <_dtoa_r+0xa8e>
 8008fec:	9907      	ldr	r1, [sp, #28]
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	9906      	ldr	r1, [sp, #24]
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	d120      	bne.n	8009038 <_dtoa_r+0xad0>
 8008ff6:	2a00      	cmp	r2, #0
 8008ff8:	dded      	ble.n	8008fd6 <_dtoa_r+0xa6e>
 8008ffa:	4651      	mov	r1, sl
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 fbfe 	bl	8009800 <__lshift>
 8009004:	4631      	mov	r1, r6
 8009006:	4682      	mov	sl, r0
 8009008:	f000 fc66 	bl	80098d8 <__mcmp>
 800900c:	2800      	cmp	r0, #0
 800900e:	dc03      	bgt.n	8009018 <_dtoa_r+0xab0>
 8009010:	d1e1      	bne.n	8008fd6 <_dtoa_r+0xa6e>
 8009012:	f019 0f01 	tst.w	r9, #1
 8009016:	d0de      	beq.n	8008fd6 <_dtoa_r+0xa6e>
 8009018:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800901c:	d1d8      	bne.n	8008fd0 <_dtoa_r+0xa68>
 800901e:	9a01      	ldr	r2, [sp, #4]
 8009020:	2339      	movs	r3, #57	; 0x39
 8009022:	7013      	strb	r3, [r2, #0]
 8009024:	462b      	mov	r3, r5
 8009026:	461d      	mov	r5, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800902e:	2a39      	cmp	r2, #57	; 0x39
 8009030:	d06c      	beq.n	800910c <_dtoa_r+0xba4>
 8009032:	3201      	adds	r2, #1
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e747      	b.n	8008ec8 <_dtoa_r+0x960>
 8009038:	2a00      	cmp	r2, #0
 800903a:	dd07      	ble.n	800904c <_dtoa_r+0xae4>
 800903c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009040:	d0ed      	beq.n	800901e <_dtoa_r+0xab6>
 8009042:	9a01      	ldr	r2, [sp, #4]
 8009044:	f109 0301 	add.w	r3, r9, #1
 8009048:	7013      	strb	r3, [r2, #0]
 800904a:	e73d      	b.n	8008ec8 <_dtoa_r+0x960>
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	9a08      	ldr	r2, [sp, #32]
 8009050:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009054:	4293      	cmp	r3, r2
 8009056:	d043      	beq.n	80090e0 <_dtoa_r+0xb78>
 8009058:	4651      	mov	r1, sl
 800905a:	2300      	movs	r3, #0
 800905c:	220a      	movs	r2, #10
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f9d6 	bl	8009410 <__multadd>
 8009064:	45b8      	cmp	r8, r7
 8009066:	4682      	mov	sl, r0
 8009068:	f04f 0300 	mov.w	r3, #0
 800906c:	f04f 020a 	mov.w	r2, #10
 8009070:	4641      	mov	r1, r8
 8009072:	4620      	mov	r0, r4
 8009074:	d107      	bne.n	8009086 <_dtoa_r+0xb1e>
 8009076:	f000 f9cb 	bl	8009410 <__multadd>
 800907a:	4680      	mov	r8, r0
 800907c:	4607      	mov	r7, r0
 800907e:	9b04      	ldr	r3, [sp, #16]
 8009080:	3301      	adds	r3, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	e775      	b.n	8008f72 <_dtoa_r+0xa0a>
 8009086:	f000 f9c3 	bl	8009410 <__multadd>
 800908a:	4639      	mov	r1, r7
 800908c:	4680      	mov	r8, r0
 800908e:	2300      	movs	r3, #0
 8009090:	220a      	movs	r2, #10
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f9bc 	bl	8009410 <__multadd>
 8009098:	4607      	mov	r7, r0
 800909a:	e7f0      	b.n	800907e <_dtoa_r+0xb16>
 800909c:	9b04      	ldr	r3, [sp, #16]
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	9d00      	ldr	r5, [sp, #0]
 80090a2:	4631      	mov	r1, r6
 80090a4:	4650      	mov	r0, sl
 80090a6:	f7ff f9d7 	bl	8008458 <quorem>
 80090aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090ae:	9b00      	ldr	r3, [sp, #0]
 80090b0:	f805 9b01 	strb.w	r9, [r5], #1
 80090b4:	1aea      	subs	r2, r5, r3
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	dd07      	ble.n	80090cc <_dtoa_r+0xb64>
 80090bc:	4651      	mov	r1, sl
 80090be:	2300      	movs	r3, #0
 80090c0:	220a      	movs	r2, #10
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f9a4 	bl	8009410 <__multadd>
 80090c8:	4682      	mov	sl, r0
 80090ca:	e7ea      	b.n	80090a2 <_dtoa_r+0xb3a>
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfc8      	it	gt
 80090d2:	461d      	movgt	r5, r3
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	bfd8      	it	le
 80090d8:	2501      	movle	r5, #1
 80090da:	441d      	add	r5, r3
 80090dc:	f04f 0800 	mov.w	r8, #0
 80090e0:	4651      	mov	r1, sl
 80090e2:	2201      	movs	r2, #1
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fb8b 	bl	8009800 <__lshift>
 80090ea:	4631      	mov	r1, r6
 80090ec:	4682      	mov	sl, r0
 80090ee:	f000 fbf3 	bl	80098d8 <__mcmp>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	dc96      	bgt.n	8009024 <_dtoa_r+0xabc>
 80090f6:	d102      	bne.n	80090fe <_dtoa_r+0xb96>
 80090f8:	f019 0f01 	tst.w	r9, #1
 80090fc:	d192      	bne.n	8009024 <_dtoa_r+0xabc>
 80090fe:	462b      	mov	r3, r5
 8009100:	461d      	mov	r5, r3
 8009102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009106:	2a30      	cmp	r2, #48	; 0x30
 8009108:	d0fa      	beq.n	8009100 <_dtoa_r+0xb98>
 800910a:	e6dd      	b.n	8008ec8 <_dtoa_r+0x960>
 800910c:	9a00      	ldr	r2, [sp, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d189      	bne.n	8009026 <_dtoa_r+0xabe>
 8009112:	f10b 0b01 	add.w	fp, fp, #1
 8009116:	2331      	movs	r3, #49	; 0x31
 8009118:	e796      	b.n	8009048 <_dtoa_r+0xae0>
 800911a:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <_dtoa_r+0xbdc>)
 800911c:	f7ff ba99 	b.w	8008652 <_dtoa_r+0xea>
 8009120:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009122:	2b00      	cmp	r3, #0
 8009124:	f47f aa6d 	bne.w	8008602 <_dtoa_r+0x9a>
 8009128:	4b07      	ldr	r3, [pc, #28]	; (8009148 <_dtoa_r+0xbe0>)
 800912a:	f7ff ba92 	b.w	8008652 <_dtoa_r+0xea>
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	dcb5      	bgt.n	80090a0 <_dtoa_r+0xb38>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	2b02      	cmp	r3, #2
 8009138:	f73f aeb1 	bgt.w	8008e9e <_dtoa_r+0x936>
 800913c:	e7b0      	b.n	80090a0 <_dtoa_r+0xb38>
 800913e:	bf00      	nop
 8009140:	0800bcf9 	.word	0x0800bcf9
 8009144:	0800bc54 	.word	0x0800bc54
 8009148:	0800bc7d 	.word	0x0800bc7d

0800914c <_free_r>:
 800914c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800914e:	2900      	cmp	r1, #0
 8009150:	d044      	beq.n	80091dc <_free_r+0x90>
 8009152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009156:	9001      	str	r0, [sp, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	f1a1 0404 	sub.w	r4, r1, #4
 800915e:	bfb8      	it	lt
 8009160:	18e4      	addlt	r4, r4, r3
 8009162:	f000 f8e7 	bl	8009334 <__malloc_lock>
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <_free_r+0x94>)
 8009168:	9801      	ldr	r0, [sp, #4]
 800916a:	6813      	ldr	r3, [r2, #0]
 800916c:	b933      	cbnz	r3, 800917c <_free_r+0x30>
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6014      	str	r4, [r2, #0]
 8009172:	b003      	add	sp, #12
 8009174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009178:	f000 b8e2 	b.w	8009340 <__malloc_unlock>
 800917c:	42a3      	cmp	r3, r4
 800917e:	d908      	bls.n	8009192 <_free_r+0x46>
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	1961      	adds	r1, r4, r5
 8009184:	428b      	cmp	r3, r1
 8009186:	bf01      	itttt	eq
 8009188:	6819      	ldreq	r1, [r3, #0]
 800918a:	685b      	ldreq	r3, [r3, #4]
 800918c:	1949      	addeq	r1, r1, r5
 800918e:	6021      	streq	r1, [r4, #0]
 8009190:	e7ed      	b.n	800916e <_free_r+0x22>
 8009192:	461a      	mov	r2, r3
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b10b      	cbz	r3, 800919c <_free_r+0x50>
 8009198:	42a3      	cmp	r3, r4
 800919a:	d9fa      	bls.n	8009192 <_free_r+0x46>
 800919c:	6811      	ldr	r1, [r2, #0]
 800919e:	1855      	adds	r5, r2, r1
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	d10b      	bne.n	80091bc <_free_r+0x70>
 80091a4:	6824      	ldr	r4, [r4, #0]
 80091a6:	4421      	add	r1, r4
 80091a8:	1854      	adds	r4, r2, r1
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	6011      	str	r1, [r2, #0]
 80091ae:	d1e0      	bne.n	8009172 <_free_r+0x26>
 80091b0:	681c      	ldr	r4, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	6053      	str	r3, [r2, #4]
 80091b6:	440c      	add	r4, r1
 80091b8:	6014      	str	r4, [r2, #0]
 80091ba:	e7da      	b.n	8009172 <_free_r+0x26>
 80091bc:	d902      	bls.n	80091c4 <_free_r+0x78>
 80091be:	230c      	movs	r3, #12
 80091c0:	6003      	str	r3, [r0, #0]
 80091c2:	e7d6      	b.n	8009172 <_free_r+0x26>
 80091c4:	6825      	ldr	r5, [r4, #0]
 80091c6:	1961      	adds	r1, r4, r5
 80091c8:	428b      	cmp	r3, r1
 80091ca:	bf04      	itt	eq
 80091cc:	6819      	ldreq	r1, [r3, #0]
 80091ce:	685b      	ldreq	r3, [r3, #4]
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	bf04      	itt	eq
 80091d4:	1949      	addeq	r1, r1, r5
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	6054      	str	r4, [r2, #4]
 80091da:	e7ca      	b.n	8009172 <_free_r+0x26>
 80091dc:	b003      	add	sp, #12
 80091de:	bd30      	pop	{r4, r5, pc}
 80091e0:	200074c4 	.word	0x200074c4

080091e4 <malloc>:
 80091e4:	4b02      	ldr	r3, [pc, #8]	; (80091f0 <malloc+0xc>)
 80091e6:	4601      	mov	r1, r0
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	f000 b823 	b.w	8009234 <_malloc_r>
 80091ee:	bf00      	nop
 80091f0:	20000068 	.word	0x20000068

080091f4 <sbrk_aligned>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4e0e      	ldr	r6, [pc, #56]	; (8009230 <sbrk_aligned+0x3c>)
 80091f8:	460c      	mov	r4, r1
 80091fa:	6831      	ldr	r1, [r6, #0]
 80091fc:	4605      	mov	r5, r0
 80091fe:	b911      	cbnz	r1, 8009206 <sbrk_aligned+0x12>
 8009200:	f001 ffe2 	bl	800b1c8 <_sbrk_r>
 8009204:	6030      	str	r0, [r6, #0]
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f001 ffdd 	bl	800b1c8 <_sbrk_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d00a      	beq.n	8009228 <sbrk_aligned+0x34>
 8009212:	1cc4      	adds	r4, r0, #3
 8009214:	f024 0403 	bic.w	r4, r4, #3
 8009218:	42a0      	cmp	r0, r4
 800921a:	d007      	beq.n	800922c <sbrk_aligned+0x38>
 800921c:	1a21      	subs	r1, r4, r0
 800921e:	4628      	mov	r0, r5
 8009220:	f001 ffd2 	bl	800b1c8 <_sbrk_r>
 8009224:	3001      	adds	r0, #1
 8009226:	d101      	bne.n	800922c <sbrk_aligned+0x38>
 8009228:	f04f 34ff 	mov.w	r4, #4294967295
 800922c:	4620      	mov	r0, r4
 800922e:	bd70      	pop	{r4, r5, r6, pc}
 8009230:	200074c8 	.word	0x200074c8

08009234 <_malloc_r>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	1ccd      	adds	r5, r1, #3
 800923a:	f025 0503 	bic.w	r5, r5, #3
 800923e:	3508      	adds	r5, #8
 8009240:	2d0c      	cmp	r5, #12
 8009242:	bf38      	it	cc
 8009244:	250c      	movcc	r5, #12
 8009246:	2d00      	cmp	r5, #0
 8009248:	4607      	mov	r7, r0
 800924a:	db01      	blt.n	8009250 <_malloc_r+0x1c>
 800924c:	42a9      	cmp	r1, r5
 800924e:	d905      	bls.n	800925c <_malloc_r+0x28>
 8009250:	230c      	movs	r3, #12
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	2600      	movs	r6, #0
 8009256:	4630      	mov	r0, r6
 8009258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009330 <_malloc_r+0xfc>
 8009260:	f000 f868 	bl	8009334 <__malloc_lock>
 8009264:	f8d8 3000 	ldr.w	r3, [r8]
 8009268:	461c      	mov	r4, r3
 800926a:	bb5c      	cbnz	r4, 80092c4 <_malloc_r+0x90>
 800926c:	4629      	mov	r1, r5
 800926e:	4638      	mov	r0, r7
 8009270:	f7ff ffc0 	bl	80091f4 <sbrk_aligned>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	4604      	mov	r4, r0
 8009278:	d155      	bne.n	8009326 <_malloc_r+0xf2>
 800927a:	f8d8 4000 	ldr.w	r4, [r8]
 800927e:	4626      	mov	r6, r4
 8009280:	2e00      	cmp	r6, #0
 8009282:	d145      	bne.n	8009310 <_malloc_r+0xdc>
 8009284:	2c00      	cmp	r4, #0
 8009286:	d048      	beq.n	800931a <_malloc_r+0xe6>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	4631      	mov	r1, r6
 800928c:	4638      	mov	r0, r7
 800928e:	eb04 0903 	add.w	r9, r4, r3
 8009292:	f001 ff99 	bl	800b1c8 <_sbrk_r>
 8009296:	4581      	cmp	r9, r0
 8009298:	d13f      	bne.n	800931a <_malloc_r+0xe6>
 800929a:	6821      	ldr	r1, [r4, #0]
 800929c:	1a6d      	subs	r5, r5, r1
 800929e:	4629      	mov	r1, r5
 80092a0:	4638      	mov	r0, r7
 80092a2:	f7ff ffa7 	bl	80091f4 <sbrk_aligned>
 80092a6:	3001      	adds	r0, #1
 80092a8:	d037      	beq.n	800931a <_malloc_r+0xe6>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	442b      	add	r3, r5
 80092ae:	6023      	str	r3, [r4, #0]
 80092b0:	f8d8 3000 	ldr.w	r3, [r8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d038      	beq.n	800932a <_malloc_r+0xf6>
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	42a2      	cmp	r2, r4
 80092bc:	d12b      	bne.n	8009316 <_malloc_r+0xe2>
 80092be:	2200      	movs	r2, #0
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	e00f      	b.n	80092e4 <_malloc_r+0xb0>
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	1b52      	subs	r2, r2, r5
 80092c8:	d41f      	bmi.n	800930a <_malloc_r+0xd6>
 80092ca:	2a0b      	cmp	r2, #11
 80092cc:	d917      	bls.n	80092fe <_malloc_r+0xca>
 80092ce:	1961      	adds	r1, r4, r5
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	6025      	str	r5, [r4, #0]
 80092d4:	bf18      	it	ne
 80092d6:	6059      	strne	r1, [r3, #4]
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	bf08      	it	eq
 80092dc:	f8c8 1000 	streq.w	r1, [r8]
 80092e0:	5162      	str	r2, [r4, r5]
 80092e2:	604b      	str	r3, [r1, #4]
 80092e4:	4638      	mov	r0, r7
 80092e6:	f104 060b 	add.w	r6, r4, #11
 80092ea:	f000 f829 	bl	8009340 <__malloc_unlock>
 80092ee:	f026 0607 	bic.w	r6, r6, #7
 80092f2:	1d23      	adds	r3, r4, #4
 80092f4:	1af2      	subs	r2, r6, r3
 80092f6:	d0ae      	beq.n	8009256 <_malloc_r+0x22>
 80092f8:	1b9b      	subs	r3, r3, r6
 80092fa:	50a3      	str	r3, [r4, r2]
 80092fc:	e7ab      	b.n	8009256 <_malloc_r+0x22>
 80092fe:	42a3      	cmp	r3, r4
 8009300:	6862      	ldr	r2, [r4, #4]
 8009302:	d1dd      	bne.n	80092c0 <_malloc_r+0x8c>
 8009304:	f8c8 2000 	str.w	r2, [r8]
 8009308:	e7ec      	b.n	80092e4 <_malloc_r+0xb0>
 800930a:	4623      	mov	r3, r4
 800930c:	6864      	ldr	r4, [r4, #4]
 800930e:	e7ac      	b.n	800926a <_malloc_r+0x36>
 8009310:	4634      	mov	r4, r6
 8009312:	6876      	ldr	r6, [r6, #4]
 8009314:	e7b4      	b.n	8009280 <_malloc_r+0x4c>
 8009316:	4613      	mov	r3, r2
 8009318:	e7cc      	b.n	80092b4 <_malloc_r+0x80>
 800931a:	230c      	movs	r3, #12
 800931c:	603b      	str	r3, [r7, #0]
 800931e:	4638      	mov	r0, r7
 8009320:	f000 f80e 	bl	8009340 <__malloc_unlock>
 8009324:	e797      	b.n	8009256 <_malloc_r+0x22>
 8009326:	6025      	str	r5, [r4, #0]
 8009328:	e7dc      	b.n	80092e4 <_malloc_r+0xb0>
 800932a:	605b      	str	r3, [r3, #4]
 800932c:	deff      	udf	#255	; 0xff
 800932e:	bf00      	nop
 8009330:	200074c4 	.word	0x200074c4

08009334 <__malloc_lock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_lock+0x8>)
 8009336:	f7ff b879 	b.w	800842c <__retarget_lock_acquire_recursive>
 800933a:	bf00      	nop
 800933c:	200074c0 	.word	0x200074c0

08009340 <__malloc_unlock>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__malloc_unlock+0x8>)
 8009342:	f7ff b874 	b.w	800842e <__retarget_lock_release_recursive>
 8009346:	bf00      	nop
 8009348:	200074c0 	.word	0x200074c0

0800934c <_Balloc>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	69c6      	ldr	r6, [r0, #28]
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	b976      	cbnz	r6, 8009374 <_Balloc+0x28>
 8009356:	2010      	movs	r0, #16
 8009358:	f7ff ff44 	bl	80091e4 <malloc>
 800935c:	4602      	mov	r2, r0
 800935e:	61e0      	str	r0, [r4, #28]
 8009360:	b920      	cbnz	r0, 800936c <_Balloc+0x20>
 8009362:	4b18      	ldr	r3, [pc, #96]	; (80093c4 <_Balloc+0x78>)
 8009364:	4818      	ldr	r0, [pc, #96]	; (80093c8 <_Balloc+0x7c>)
 8009366:	216b      	movs	r1, #107	; 0x6b
 8009368:	f001 ff46 	bl	800b1f8 <__assert_func>
 800936c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009370:	6006      	str	r6, [r0, #0]
 8009372:	60c6      	str	r6, [r0, #12]
 8009374:	69e6      	ldr	r6, [r4, #28]
 8009376:	68f3      	ldr	r3, [r6, #12]
 8009378:	b183      	cbz	r3, 800939c <_Balloc+0x50>
 800937a:	69e3      	ldr	r3, [r4, #28]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009382:	b9b8      	cbnz	r0, 80093b4 <_Balloc+0x68>
 8009384:	2101      	movs	r1, #1
 8009386:	fa01 f605 	lsl.w	r6, r1, r5
 800938a:	1d72      	adds	r2, r6, #5
 800938c:	0092      	lsls	r2, r2, #2
 800938e:	4620      	mov	r0, r4
 8009390:	f001 ff50 	bl	800b234 <_calloc_r>
 8009394:	b160      	cbz	r0, 80093b0 <_Balloc+0x64>
 8009396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800939a:	e00e      	b.n	80093ba <_Balloc+0x6e>
 800939c:	2221      	movs	r2, #33	; 0x21
 800939e:	2104      	movs	r1, #4
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 ff47 	bl	800b234 <_calloc_r>
 80093a6:	69e3      	ldr	r3, [r4, #28]
 80093a8:	60f0      	str	r0, [r6, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1e4      	bne.n	800937a <_Balloc+0x2e>
 80093b0:	2000      	movs	r0, #0
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	6802      	ldr	r2, [r0, #0]
 80093b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ba:	2300      	movs	r3, #0
 80093bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093c0:	e7f7      	b.n	80093b2 <_Balloc+0x66>
 80093c2:	bf00      	nop
 80093c4:	0800bc8a 	.word	0x0800bc8a
 80093c8:	0800bd0a 	.word	0x0800bd0a

080093cc <_Bfree>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	69c6      	ldr	r6, [r0, #28]
 80093d0:	4605      	mov	r5, r0
 80093d2:	460c      	mov	r4, r1
 80093d4:	b976      	cbnz	r6, 80093f4 <_Bfree+0x28>
 80093d6:	2010      	movs	r0, #16
 80093d8:	f7ff ff04 	bl	80091e4 <malloc>
 80093dc:	4602      	mov	r2, r0
 80093de:	61e8      	str	r0, [r5, #28]
 80093e0:	b920      	cbnz	r0, 80093ec <_Bfree+0x20>
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <_Bfree+0x3c>)
 80093e4:	4809      	ldr	r0, [pc, #36]	; (800940c <_Bfree+0x40>)
 80093e6:	218f      	movs	r1, #143	; 0x8f
 80093e8:	f001 ff06 	bl	800b1f8 <__assert_func>
 80093ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093f0:	6006      	str	r6, [r0, #0]
 80093f2:	60c6      	str	r6, [r0, #12]
 80093f4:	b13c      	cbz	r4, 8009406 <_Bfree+0x3a>
 80093f6:	69eb      	ldr	r3, [r5, #28]
 80093f8:	6862      	ldr	r2, [r4, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009400:	6021      	str	r1, [r4, #0]
 8009402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	0800bc8a 	.word	0x0800bc8a
 800940c:	0800bd0a 	.word	0x0800bd0a

08009410 <__multadd>:
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	690d      	ldr	r5, [r1, #16]
 8009416:	4607      	mov	r7, r0
 8009418:	460c      	mov	r4, r1
 800941a:	461e      	mov	r6, r3
 800941c:	f101 0c14 	add.w	ip, r1, #20
 8009420:	2000      	movs	r0, #0
 8009422:	f8dc 3000 	ldr.w	r3, [ip]
 8009426:	b299      	uxth	r1, r3
 8009428:	fb02 6101 	mla	r1, r2, r1, r6
 800942c:	0c1e      	lsrs	r6, r3, #16
 800942e:	0c0b      	lsrs	r3, r1, #16
 8009430:	fb02 3306 	mla	r3, r2, r6, r3
 8009434:	b289      	uxth	r1, r1
 8009436:	3001      	adds	r0, #1
 8009438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800943c:	4285      	cmp	r5, r0
 800943e:	f84c 1b04 	str.w	r1, [ip], #4
 8009442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009446:	dcec      	bgt.n	8009422 <__multadd+0x12>
 8009448:	b30e      	cbz	r6, 800948e <__multadd+0x7e>
 800944a:	68a3      	ldr	r3, [r4, #8]
 800944c:	42ab      	cmp	r3, r5
 800944e:	dc19      	bgt.n	8009484 <__multadd+0x74>
 8009450:	6861      	ldr	r1, [r4, #4]
 8009452:	4638      	mov	r0, r7
 8009454:	3101      	adds	r1, #1
 8009456:	f7ff ff79 	bl	800934c <_Balloc>
 800945a:	4680      	mov	r8, r0
 800945c:	b928      	cbnz	r0, 800946a <__multadd+0x5a>
 800945e:	4602      	mov	r2, r0
 8009460:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <__multadd+0x84>)
 8009462:	480d      	ldr	r0, [pc, #52]	; (8009498 <__multadd+0x88>)
 8009464:	21ba      	movs	r1, #186	; 0xba
 8009466:	f001 fec7 	bl	800b1f8 <__assert_func>
 800946a:	6922      	ldr	r2, [r4, #16]
 800946c:	3202      	adds	r2, #2
 800946e:	f104 010c 	add.w	r1, r4, #12
 8009472:	0092      	lsls	r2, r2, #2
 8009474:	300c      	adds	r0, #12
 8009476:	f7fe ffdb 	bl	8008430 <memcpy>
 800947a:	4621      	mov	r1, r4
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ffa5 	bl	80093cc <_Bfree>
 8009482:	4644      	mov	r4, r8
 8009484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009488:	3501      	adds	r5, #1
 800948a:	615e      	str	r6, [r3, #20]
 800948c:	6125      	str	r5, [r4, #16]
 800948e:	4620      	mov	r0, r4
 8009490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009494:	0800bcf9 	.word	0x0800bcf9
 8009498:	0800bd0a 	.word	0x0800bd0a

0800949c <__s2b>:
 800949c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a0:	460c      	mov	r4, r1
 80094a2:	4615      	mov	r5, r2
 80094a4:	461f      	mov	r7, r3
 80094a6:	2209      	movs	r2, #9
 80094a8:	3308      	adds	r3, #8
 80094aa:	4606      	mov	r6, r0
 80094ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80094b0:	2100      	movs	r1, #0
 80094b2:	2201      	movs	r2, #1
 80094b4:	429a      	cmp	r2, r3
 80094b6:	db09      	blt.n	80094cc <__s2b+0x30>
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7ff ff47 	bl	800934c <_Balloc>
 80094be:	b940      	cbnz	r0, 80094d2 <__s2b+0x36>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <__s2b+0x8c>)
 80094c4:	4819      	ldr	r0, [pc, #100]	; (800952c <__s2b+0x90>)
 80094c6:	21d3      	movs	r1, #211	; 0xd3
 80094c8:	f001 fe96 	bl	800b1f8 <__assert_func>
 80094cc:	0052      	lsls	r2, r2, #1
 80094ce:	3101      	adds	r1, #1
 80094d0:	e7f0      	b.n	80094b4 <__s2b+0x18>
 80094d2:	9b08      	ldr	r3, [sp, #32]
 80094d4:	6143      	str	r3, [r0, #20]
 80094d6:	2d09      	cmp	r5, #9
 80094d8:	f04f 0301 	mov.w	r3, #1
 80094dc:	6103      	str	r3, [r0, #16]
 80094de:	dd16      	ble.n	800950e <__s2b+0x72>
 80094e0:	f104 0909 	add.w	r9, r4, #9
 80094e4:	46c8      	mov	r8, r9
 80094e6:	442c      	add	r4, r5
 80094e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094ec:	4601      	mov	r1, r0
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	220a      	movs	r2, #10
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7ff ff8c 	bl	8009410 <__multadd>
 80094f8:	45a0      	cmp	r8, r4
 80094fa:	d1f5      	bne.n	80094e8 <__s2b+0x4c>
 80094fc:	f1a5 0408 	sub.w	r4, r5, #8
 8009500:	444c      	add	r4, r9
 8009502:	1b2d      	subs	r5, r5, r4
 8009504:	1963      	adds	r3, r4, r5
 8009506:	42bb      	cmp	r3, r7
 8009508:	db04      	blt.n	8009514 <__s2b+0x78>
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950e:	340a      	adds	r4, #10
 8009510:	2509      	movs	r5, #9
 8009512:	e7f6      	b.n	8009502 <__s2b+0x66>
 8009514:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009518:	4601      	mov	r1, r0
 800951a:	3b30      	subs	r3, #48	; 0x30
 800951c:	220a      	movs	r2, #10
 800951e:	4630      	mov	r0, r6
 8009520:	f7ff ff76 	bl	8009410 <__multadd>
 8009524:	e7ee      	b.n	8009504 <__s2b+0x68>
 8009526:	bf00      	nop
 8009528:	0800bcf9 	.word	0x0800bcf9
 800952c:	0800bd0a 	.word	0x0800bd0a

08009530 <__hi0bits>:
 8009530:	0c03      	lsrs	r3, r0, #16
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	b9d3      	cbnz	r3, 800956c <__hi0bits+0x3c>
 8009536:	0400      	lsls	r0, r0, #16
 8009538:	2310      	movs	r3, #16
 800953a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800953e:	bf04      	itt	eq
 8009540:	0200      	lsleq	r0, r0, #8
 8009542:	3308      	addeq	r3, #8
 8009544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009548:	bf04      	itt	eq
 800954a:	0100      	lsleq	r0, r0, #4
 800954c:	3304      	addeq	r3, #4
 800954e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009552:	bf04      	itt	eq
 8009554:	0080      	lsleq	r0, r0, #2
 8009556:	3302      	addeq	r3, #2
 8009558:	2800      	cmp	r0, #0
 800955a:	db05      	blt.n	8009568 <__hi0bits+0x38>
 800955c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009560:	f103 0301 	add.w	r3, r3, #1
 8009564:	bf08      	it	eq
 8009566:	2320      	moveq	r3, #32
 8009568:	4618      	mov	r0, r3
 800956a:	4770      	bx	lr
 800956c:	2300      	movs	r3, #0
 800956e:	e7e4      	b.n	800953a <__hi0bits+0xa>

08009570 <__lo0bits>:
 8009570:	6803      	ldr	r3, [r0, #0]
 8009572:	f013 0207 	ands.w	r2, r3, #7
 8009576:	d00c      	beq.n	8009592 <__lo0bits+0x22>
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d422      	bmi.n	80095c2 <__lo0bits+0x52>
 800957c:	079a      	lsls	r2, r3, #30
 800957e:	bf49      	itett	mi
 8009580:	085b      	lsrmi	r3, r3, #1
 8009582:	089b      	lsrpl	r3, r3, #2
 8009584:	6003      	strmi	r3, [r0, #0]
 8009586:	2201      	movmi	r2, #1
 8009588:	bf5c      	itt	pl
 800958a:	6003      	strpl	r3, [r0, #0]
 800958c:	2202      	movpl	r2, #2
 800958e:	4610      	mov	r0, r2
 8009590:	4770      	bx	lr
 8009592:	b299      	uxth	r1, r3
 8009594:	b909      	cbnz	r1, 800959a <__lo0bits+0x2a>
 8009596:	0c1b      	lsrs	r3, r3, #16
 8009598:	2210      	movs	r2, #16
 800959a:	b2d9      	uxtb	r1, r3
 800959c:	b909      	cbnz	r1, 80095a2 <__lo0bits+0x32>
 800959e:	3208      	adds	r2, #8
 80095a0:	0a1b      	lsrs	r3, r3, #8
 80095a2:	0719      	lsls	r1, r3, #28
 80095a4:	bf04      	itt	eq
 80095a6:	091b      	lsreq	r3, r3, #4
 80095a8:	3204      	addeq	r2, #4
 80095aa:	0799      	lsls	r1, r3, #30
 80095ac:	bf04      	itt	eq
 80095ae:	089b      	lsreq	r3, r3, #2
 80095b0:	3202      	addeq	r2, #2
 80095b2:	07d9      	lsls	r1, r3, #31
 80095b4:	d403      	bmi.n	80095be <__lo0bits+0x4e>
 80095b6:	085b      	lsrs	r3, r3, #1
 80095b8:	f102 0201 	add.w	r2, r2, #1
 80095bc:	d003      	beq.n	80095c6 <__lo0bits+0x56>
 80095be:	6003      	str	r3, [r0, #0]
 80095c0:	e7e5      	b.n	800958e <__lo0bits+0x1e>
 80095c2:	2200      	movs	r2, #0
 80095c4:	e7e3      	b.n	800958e <__lo0bits+0x1e>
 80095c6:	2220      	movs	r2, #32
 80095c8:	e7e1      	b.n	800958e <__lo0bits+0x1e>
	...

080095cc <__i2b>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	460c      	mov	r4, r1
 80095d0:	2101      	movs	r1, #1
 80095d2:	f7ff febb 	bl	800934c <_Balloc>
 80095d6:	4602      	mov	r2, r0
 80095d8:	b928      	cbnz	r0, 80095e6 <__i2b+0x1a>
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <__i2b+0x24>)
 80095dc:	4805      	ldr	r0, [pc, #20]	; (80095f4 <__i2b+0x28>)
 80095de:	f240 1145 	movw	r1, #325	; 0x145
 80095e2:	f001 fe09 	bl	800b1f8 <__assert_func>
 80095e6:	2301      	movs	r3, #1
 80095e8:	6144      	str	r4, [r0, #20]
 80095ea:	6103      	str	r3, [r0, #16]
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	0800bcf9 	.word	0x0800bcf9
 80095f4:	0800bd0a 	.word	0x0800bd0a

080095f8 <__multiply>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	4691      	mov	r9, r2
 80095fe:	690a      	ldr	r2, [r1, #16]
 8009600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	bfb8      	it	lt
 8009608:	460b      	movlt	r3, r1
 800960a:	460c      	mov	r4, r1
 800960c:	bfbc      	itt	lt
 800960e:	464c      	movlt	r4, r9
 8009610:	4699      	movlt	r9, r3
 8009612:	6927      	ldr	r7, [r4, #16]
 8009614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009618:	68a3      	ldr	r3, [r4, #8]
 800961a:	6861      	ldr	r1, [r4, #4]
 800961c:	eb07 060a 	add.w	r6, r7, sl
 8009620:	42b3      	cmp	r3, r6
 8009622:	b085      	sub	sp, #20
 8009624:	bfb8      	it	lt
 8009626:	3101      	addlt	r1, #1
 8009628:	f7ff fe90 	bl	800934c <_Balloc>
 800962c:	b930      	cbnz	r0, 800963c <__multiply+0x44>
 800962e:	4602      	mov	r2, r0
 8009630:	4b44      	ldr	r3, [pc, #272]	; (8009744 <__multiply+0x14c>)
 8009632:	4845      	ldr	r0, [pc, #276]	; (8009748 <__multiply+0x150>)
 8009634:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009638:	f001 fdde 	bl	800b1f8 <__assert_func>
 800963c:	f100 0514 	add.w	r5, r0, #20
 8009640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009644:	462b      	mov	r3, r5
 8009646:	2200      	movs	r2, #0
 8009648:	4543      	cmp	r3, r8
 800964a:	d321      	bcc.n	8009690 <__multiply+0x98>
 800964c:	f104 0314 	add.w	r3, r4, #20
 8009650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009654:	f109 0314 	add.w	r3, r9, #20
 8009658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800965c:	9202      	str	r2, [sp, #8]
 800965e:	1b3a      	subs	r2, r7, r4
 8009660:	3a15      	subs	r2, #21
 8009662:	f022 0203 	bic.w	r2, r2, #3
 8009666:	3204      	adds	r2, #4
 8009668:	f104 0115 	add.w	r1, r4, #21
 800966c:	428f      	cmp	r7, r1
 800966e:	bf38      	it	cc
 8009670:	2204      	movcc	r2, #4
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9a02      	ldr	r2, [sp, #8]
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	429a      	cmp	r2, r3
 800967a:	d80c      	bhi.n	8009696 <__multiply+0x9e>
 800967c:	2e00      	cmp	r6, #0
 800967e:	dd03      	ble.n	8009688 <__multiply+0x90>
 8009680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009684:	2b00      	cmp	r3, #0
 8009686:	d05b      	beq.n	8009740 <__multiply+0x148>
 8009688:	6106      	str	r6, [r0, #16]
 800968a:	b005      	add	sp, #20
 800968c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009690:	f843 2b04 	str.w	r2, [r3], #4
 8009694:	e7d8      	b.n	8009648 <__multiply+0x50>
 8009696:	f8b3 a000 	ldrh.w	sl, [r3]
 800969a:	f1ba 0f00 	cmp.w	sl, #0
 800969e:	d024      	beq.n	80096ea <__multiply+0xf2>
 80096a0:	f104 0e14 	add.w	lr, r4, #20
 80096a4:	46a9      	mov	r9, r5
 80096a6:	f04f 0c00 	mov.w	ip, #0
 80096aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096ae:	f8d9 1000 	ldr.w	r1, [r9]
 80096b2:	fa1f fb82 	uxth.w	fp, r2
 80096b6:	b289      	uxth	r1, r1
 80096b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80096bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096c0:	f8d9 2000 	ldr.w	r2, [r9]
 80096c4:	4461      	add	r1, ip
 80096c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80096ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096d2:	b289      	uxth	r1, r1
 80096d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096d8:	4577      	cmp	r7, lr
 80096da:	f849 1b04 	str.w	r1, [r9], #4
 80096de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096e2:	d8e2      	bhi.n	80096aa <__multiply+0xb2>
 80096e4:	9a01      	ldr	r2, [sp, #4]
 80096e6:	f845 c002 	str.w	ip, [r5, r2]
 80096ea:	9a03      	ldr	r2, [sp, #12]
 80096ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096f0:	3304      	adds	r3, #4
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	d021      	beq.n	800973c <__multiply+0x144>
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	f104 0c14 	add.w	ip, r4, #20
 80096fe:	46ae      	mov	lr, r5
 8009700:	f04f 0a00 	mov.w	sl, #0
 8009704:	f8bc b000 	ldrh.w	fp, [ip]
 8009708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800970c:	fb09 220b 	mla	r2, r9, fp, r2
 8009710:	4452      	add	r2, sl
 8009712:	b289      	uxth	r1, r1
 8009714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009718:	f84e 1b04 	str.w	r1, [lr], #4
 800971c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009724:	f8be 1000 	ldrh.w	r1, [lr]
 8009728:	fb09 110a 	mla	r1, r9, sl, r1
 800972c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009730:	4567      	cmp	r7, ip
 8009732:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009736:	d8e5      	bhi.n	8009704 <__multiply+0x10c>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	50a9      	str	r1, [r5, r2]
 800973c:	3504      	adds	r5, #4
 800973e:	e799      	b.n	8009674 <__multiply+0x7c>
 8009740:	3e01      	subs	r6, #1
 8009742:	e79b      	b.n	800967c <__multiply+0x84>
 8009744:	0800bcf9 	.word	0x0800bcf9
 8009748:	0800bd0a 	.word	0x0800bd0a

0800974c <__pow5mult>:
 800974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009750:	4615      	mov	r5, r2
 8009752:	f012 0203 	ands.w	r2, r2, #3
 8009756:	4606      	mov	r6, r0
 8009758:	460f      	mov	r7, r1
 800975a:	d007      	beq.n	800976c <__pow5mult+0x20>
 800975c:	4c25      	ldr	r4, [pc, #148]	; (80097f4 <__pow5mult+0xa8>)
 800975e:	3a01      	subs	r2, #1
 8009760:	2300      	movs	r3, #0
 8009762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009766:	f7ff fe53 	bl	8009410 <__multadd>
 800976a:	4607      	mov	r7, r0
 800976c:	10ad      	asrs	r5, r5, #2
 800976e:	d03d      	beq.n	80097ec <__pow5mult+0xa0>
 8009770:	69f4      	ldr	r4, [r6, #28]
 8009772:	b97c      	cbnz	r4, 8009794 <__pow5mult+0x48>
 8009774:	2010      	movs	r0, #16
 8009776:	f7ff fd35 	bl	80091e4 <malloc>
 800977a:	4602      	mov	r2, r0
 800977c:	61f0      	str	r0, [r6, #28]
 800977e:	b928      	cbnz	r0, 800978c <__pow5mult+0x40>
 8009780:	4b1d      	ldr	r3, [pc, #116]	; (80097f8 <__pow5mult+0xac>)
 8009782:	481e      	ldr	r0, [pc, #120]	; (80097fc <__pow5mult+0xb0>)
 8009784:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009788:	f001 fd36 	bl	800b1f8 <__assert_func>
 800978c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009790:	6004      	str	r4, [r0, #0]
 8009792:	60c4      	str	r4, [r0, #12]
 8009794:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800979c:	b94c      	cbnz	r4, 80097b2 <__pow5mult+0x66>
 800979e:	f240 2171 	movw	r1, #625	; 0x271
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff12 	bl	80095cc <__i2b>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80097ae:	4604      	mov	r4, r0
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	07eb      	lsls	r3, r5, #31
 80097b8:	d50a      	bpl.n	80097d0 <__pow5mult+0x84>
 80097ba:	4639      	mov	r1, r7
 80097bc:	4622      	mov	r2, r4
 80097be:	4630      	mov	r0, r6
 80097c0:	f7ff ff1a 	bl	80095f8 <__multiply>
 80097c4:	4639      	mov	r1, r7
 80097c6:	4680      	mov	r8, r0
 80097c8:	4630      	mov	r0, r6
 80097ca:	f7ff fdff 	bl	80093cc <_Bfree>
 80097ce:	4647      	mov	r7, r8
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	d00b      	beq.n	80097ec <__pow5mult+0xa0>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	b938      	cbnz	r0, 80097e8 <__pow5mult+0x9c>
 80097d8:	4622      	mov	r2, r4
 80097da:	4621      	mov	r1, r4
 80097dc:	4630      	mov	r0, r6
 80097de:	f7ff ff0b 	bl	80095f8 <__multiply>
 80097e2:	6020      	str	r0, [r4, #0]
 80097e4:	f8c0 9000 	str.w	r9, [r0]
 80097e8:	4604      	mov	r4, r0
 80097ea:	e7e4      	b.n	80097b6 <__pow5mult+0x6a>
 80097ec:	4638      	mov	r0, r7
 80097ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f2:	bf00      	nop
 80097f4:	0800be58 	.word	0x0800be58
 80097f8:	0800bc8a 	.word	0x0800bc8a
 80097fc:	0800bd0a 	.word	0x0800bd0a

08009800 <__lshift>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	6849      	ldr	r1, [r1, #4]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	4607      	mov	r7, r0
 8009812:	4691      	mov	r9, r2
 8009814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009818:	f108 0601 	add.w	r6, r8, #1
 800981c:	42b3      	cmp	r3, r6
 800981e:	db0b      	blt.n	8009838 <__lshift+0x38>
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff fd93 	bl	800934c <_Balloc>
 8009826:	4605      	mov	r5, r0
 8009828:	b948      	cbnz	r0, 800983e <__lshift+0x3e>
 800982a:	4602      	mov	r2, r0
 800982c:	4b28      	ldr	r3, [pc, #160]	; (80098d0 <__lshift+0xd0>)
 800982e:	4829      	ldr	r0, [pc, #164]	; (80098d4 <__lshift+0xd4>)
 8009830:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009834:	f001 fce0 	bl	800b1f8 <__assert_func>
 8009838:	3101      	adds	r1, #1
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	e7ee      	b.n	800981c <__lshift+0x1c>
 800983e:	2300      	movs	r3, #0
 8009840:	f100 0114 	add.w	r1, r0, #20
 8009844:	f100 0210 	add.w	r2, r0, #16
 8009848:	4618      	mov	r0, r3
 800984a:	4553      	cmp	r3, sl
 800984c:	db33      	blt.n	80098b6 <__lshift+0xb6>
 800984e:	6920      	ldr	r0, [r4, #16]
 8009850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009854:	f104 0314 	add.w	r3, r4, #20
 8009858:	f019 091f 	ands.w	r9, r9, #31
 800985c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009864:	d02b      	beq.n	80098be <__lshift+0xbe>
 8009866:	f1c9 0e20 	rsb	lr, r9, #32
 800986a:	468a      	mov	sl, r1
 800986c:	2200      	movs	r2, #0
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	fa00 f009 	lsl.w	r0, r0, r9
 8009874:	4310      	orrs	r0, r2
 8009876:	f84a 0b04 	str.w	r0, [sl], #4
 800987a:	f853 2b04 	ldr.w	r2, [r3], #4
 800987e:	459c      	cmp	ip, r3
 8009880:	fa22 f20e 	lsr.w	r2, r2, lr
 8009884:	d8f3      	bhi.n	800986e <__lshift+0x6e>
 8009886:	ebac 0304 	sub.w	r3, ip, r4
 800988a:	3b15      	subs	r3, #21
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	f104 0015 	add.w	r0, r4, #21
 8009896:	4584      	cmp	ip, r0
 8009898:	bf38      	it	cc
 800989a:	2304      	movcc	r3, #4
 800989c:	50ca      	str	r2, [r1, r3]
 800989e:	b10a      	cbz	r2, 80098a4 <__lshift+0xa4>
 80098a0:	f108 0602 	add.w	r6, r8, #2
 80098a4:	3e01      	subs	r6, #1
 80098a6:	4638      	mov	r0, r7
 80098a8:	612e      	str	r6, [r5, #16]
 80098aa:	4621      	mov	r1, r4
 80098ac:	f7ff fd8e 	bl	80093cc <_Bfree>
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ba:	3301      	adds	r3, #1
 80098bc:	e7c5      	b.n	800984a <__lshift+0x4a>
 80098be:	3904      	subs	r1, #4
 80098c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098c8:	459c      	cmp	ip, r3
 80098ca:	d8f9      	bhi.n	80098c0 <__lshift+0xc0>
 80098cc:	e7ea      	b.n	80098a4 <__lshift+0xa4>
 80098ce:	bf00      	nop
 80098d0:	0800bcf9 	.word	0x0800bcf9
 80098d4:	0800bd0a 	.word	0x0800bd0a

080098d8 <__mcmp>:
 80098d8:	b530      	push	{r4, r5, lr}
 80098da:	6902      	ldr	r2, [r0, #16]
 80098dc:	690c      	ldr	r4, [r1, #16]
 80098de:	1b12      	subs	r2, r2, r4
 80098e0:	d10e      	bne.n	8009900 <__mcmp+0x28>
 80098e2:	f100 0314 	add.w	r3, r0, #20
 80098e6:	3114      	adds	r1, #20
 80098e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80098f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d003      	beq.n	8009904 <__mcmp+0x2c>
 80098fc:	d305      	bcc.n	800990a <__mcmp+0x32>
 80098fe:	2201      	movs	r2, #1
 8009900:	4610      	mov	r0, r2
 8009902:	bd30      	pop	{r4, r5, pc}
 8009904:	4283      	cmp	r3, r0
 8009906:	d3f3      	bcc.n	80098f0 <__mcmp+0x18>
 8009908:	e7fa      	b.n	8009900 <__mcmp+0x28>
 800990a:	f04f 32ff 	mov.w	r2, #4294967295
 800990e:	e7f7      	b.n	8009900 <__mcmp+0x28>

08009910 <__mdiff>:
 8009910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	460c      	mov	r4, r1
 8009916:	4606      	mov	r6, r0
 8009918:	4611      	mov	r1, r2
 800991a:	4620      	mov	r0, r4
 800991c:	4690      	mov	r8, r2
 800991e:	f7ff ffdb 	bl	80098d8 <__mcmp>
 8009922:	1e05      	subs	r5, r0, #0
 8009924:	d110      	bne.n	8009948 <__mdiff+0x38>
 8009926:	4629      	mov	r1, r5
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff fd0f 	bl	800934c <_Balloc>
 800992e:	b930      	cbnz	r0, 800993e <__mdiff+0x2e>
 8009930:	4b3a      	ldr	r3, [pc, #232]	; (8009a1c <__mdiff+0x10c>)
 8009932:	4602      	mov	r2, r0
 8009934:	f240 2137 	movw	r1, #567	; 0x237
 8009938:	4839      	ldr	r0, [pc, #228]	; (8009a20 <__mdiff+0x110>)
 800993a:	f001 fc5d 	bl	800b1f8 <__assert_func>
 800993e:	2301      	movs	r3, #1
 8009940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009948:	bfa4      	itt	ge
 800994a:	4643      	movge	r3, r8
 800994c:	46a0      	movge	r8, r4
 800994e:	4630      	mov	r0, r6
 8009950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009954:	bfa6      	itte	ge
 8009956:	461c      	movge	r4, r3
 8009958:	2500      	movge	r5, #0
 800995a:	2501      	movlt	r5, #1
 800995c:	f7ff fcf6 	bl	800934c <_Balloc>
 8009960:	b920      	cbnz	r0, 800996c <__mdiff+0x5c>
 8009962:	4b2e      	ldr	r3, [pc, #184]	; (8009a1c <__mdiff+0x10c>)
 8009964:	4602      	mov	r2, r0
 8009966:	f240 2145 	movw	r1, #581	; 0x245
 800996a:	e7e5      	b.n	8009938 <__mdiff+0x28>
 800996c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009970:	6926      	ldr	r6, [r4, #16]
 8009972:	60c5      	str	r5, [r0, #12]
 8009974:	f104 0914 	add.w	r9, r4, #20
 8009978:	f108 0514 	add.w	r5, r8, #20
 800997c:	f100 0e14 	add.w	lr, r0, #20
 8009980:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009988:	f108 0210 	add.w	r2, r8, #16
 800998c:	46f2      	mov	sl, lr
 800998e:	2100      	movs	r1, #0
 8009990:	f859 3b04 	ldr.w	r3, [r9], #4
 8009994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009998:	fa11 f88b 	uxtah	r8, r1, fp
 800999c:	b299      	uxth	r1, r3
 800999e:	0c1b      	lsrs	r3, r3, #16
 80099a0:	eba8 0801 	sub.w	r8, r8, r1
 80099a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099ac:	fa1f f888 	uxth.w	r8, r8
 80099b0:	1419      	asrs	r1, r3, #16
 80099b2:	454e      	cmp	r6, r9
 80099b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099b8:	f84a 3b04 	str.w	r3, [sl], #4
 80099bc:	d8e8      	bhi.n	8009990 <__mdiff+0x80>
 80099be:	1b33      	subs	r3, r6, r4
 80099c0:	3b15      	subs	r3, #21
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	3304      	adds	r3, #4
 80099c8:	3415      	adds	r4, #21
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	bf38      	it	cc
 80099ce:	2304      	movcc	r3, #4
 80099d0:	441d      	add	r5, r3
 80099d2:	4473      	add	r3, lr
 80099d4:	469e      	mov	lr, r3
 80099d6:	462e      	mov	r6, r5
 80099d8:	4566      	cmp	r6, ip
 80099da:	d30e      	bcc.n	80099fa <__mdiff+0xea>
 80099dc:	f10c 0203 	add.w	r2, ip, #3
 80099e0:	1b52      	subs	r2, r2, r5
 80099e2:	f022 0203 	bic.w	r2, r2, #3
 80099e6:	3d03      	subs	r5, #3
 80099e8:	45ac      	cmp	ip, r5
 80099ea:	bf38      	it	cc
 80099ec:	2200      	movcc	r2, #0
 80099ee:	4413      	add	r3, r2
 80099f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80099f4:	b17a      	cbz	r2, 8009a16 <__mdiff+0x106>
 80099f6:	6107      	str	r7, [r0, #16]
 80099f8:	e7a4      	b.n	8009944 <__mdiff+0x34>
 80099fa:	f856 8b04 	ldr.w	r8, [r6], #4
 80099fe:	fa11 f288 	uxtah	r2, r1, r8
 8009a02:	1414      	asrs	r4, r2, #16
 8009a04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a0e:	f84e 2b04 	str.w	r2, [lr], #4
 8009a12:	1421      	asrs	r1, r4, #16
 8009a14:	e7e0      	b.n	80099d8 <__mdiff+0xc8>
 8009a16:	3f01      	subs	r7, #1
 8009a18:	e7ea      	b.n	80099f0 <__mdiff+0xe0>
 8009a1a:	bf00      	nop
 8009a1c:	0800bcf9 	.word	0x0800bcf9
 8009a20:	0800bd0a 	.word	0x0800bd0a

08009a24 <__ulp>:
 8009a24:	b082      	sub	sp, #8
 8009a26:	ed8d 0b00 	vstr	d0, [sp]
 8009a2a:	9a01      	ldr	r2, [sp, #4]
 8009a2c:	4b0f      	ldr	r3, [pc, #60]	; (8009a6c <__ulp+0x48>)
 8009a2e:	4013      	ands	r3, r2
 8009a30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dc08      	bgt.n	8009a4a <__ulp+0x26>
 8009a38:	425b      	negs	r3, r3
 8009a3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009a3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a42:	da04      	bge.n	8009a4e <__ulp+0x2a>
 8009a44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a48:	4113      	asrs	r3, r2
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	e008      	b.n	8009a60 <__ulp+0x3c>
 8009a4e:	f1a2 0314 	sub.w	r3, r2, #20
 8009a52:	2b1e      	cmp	r3, #30
 8009a54:	bfda      	itte	le
 8009a56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009a5a:	40da      	lsrle	r2, r3
 8009a5c:	2201      	movgt	r2, #1
 8009a5e:	2300      	movs	r3, #0
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	ec41 0b10 	vmov	d0, r0, r1
 8009a68:	b002      	add	sp, #8
 8009a6a:	4770      	bx	lr
 8009a6c:	7ff00000 	.word	0x7ff00000

08009a70 <__b2d>:
 8009a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a74:	6906      	ldr	r6, [r0, #16]
 8009a76:	f100 0814 	add.w	r8, r0, #20
 8009a7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009a7e:	1f37      	subs	r7, r6, #4
 8009a80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7ff fd53 	bl	8009530 <__hi0bits>
 8009a8a:	f1c0 0320 	rsb	r3, r0, #32
 8009a8e:	280a      	cmp	r0, #10
 8009a90:	600b      	str	r3, [r1, #0]
 8009a92:	491b      	ldr	r1, [pc, #108]	; (8009b00 <__b2d+0x90>)
 8009a94:	dc15      	bgt.n	8009ac2 <__b2d+0x52>
 8009a96:	f1c0 0c0b 	rsb	ip, r0, #11
 8009a9a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009a9e:	45b8      	cmp	r8, r7
 8009aa0:	ea43 0501 	orr.w	r5, r3, r1
 8009aa4:	bf34      	ite	cc
 8009aa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aaa:	2300      	movcs	r3, #0
 8009aac:	3015      	adds	r0, #21
 8009aae:	fa02 f000 	lsl.w	r0, r2, r0
 8009ab2:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ab6:	4303      	orrs	r3, r0
 8009ab8:	461c      	mov	r4, r3
 8009aba:	ec45 4b10 	vmov	d0, r4, r5
 8009abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac2:	45b8      	cmp	r8, r7
 8009ac4:	bf3a      	itte	cc
 8009ac6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009aca:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ace:	2300      	movcs	r3, #0
 8009ad0:	380b      	subs	r0, #11
 8009ad2:	d012      	beq.n	8009afa <__b2d+0x8a>
 8009ad4:	f1c0 0120 	rsb	r1, r0, #32
 8009ad8:	fa23 f401 	lsr.w	r4, r3, r1
 8009adc:	4082      	lsls	r2, r0
 8009ade:	4322      	orrs	r2, r4
 8009ae0:	4547      	cmp	r7, r8
 8009ae2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009ae6:	bf8c      	ite	hi
 8009ae8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009aec:	2200      	movls	r2, #0
 8009aee:	4083      	lsls	r3, r0
 8009af0:	40ca      	lsrs	r2, r1
 8009af2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009af6:	4313      	orrs	r3, r2
 8009af8:	e7de      	b.n	8009ab8 <__b2d+0x48>
 8009afa:	ea42 0501 	orr.w	r5, r2, r1
 8009afe:	e7db      	b.n	8009ab8 <__b2d+0x48>
 8009b00:	3ff00000 	.word	0x3ff00000

08009b04 <__d2b>:
 8009b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	460f      	mov	r7, r1
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	ec59 8b10 	vmov	r8, r9, d0
 8009b10:	4616      	mov	r6, r2
 8009b12:	f7ff fc1b 	bl	800934c <_Balloc>
 8009b16:	4604      	mov	r4, r0
 8009b18:	b930      	cbnz	r0, 8009b28 <__d2b+0x24>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <__d2b+0xac>)
 8009b1e:	4825      	ldr	r0, [pc, #148]	; (8009bb4 <__d2b+0xb0>)
 8009b20:	f240 310f 	movw	r1, #783	; 0x30f
 8009b24:	f001 fb68 	bl	800b1f8 <__assert_func>
 8009b28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b30:	bb2d      	cbnz	r5, 8009b7e <__d2b+0x7a>
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f1b8 0300 	subs.w	r3, r8, #0
 8009b38:	d026      	beq.n	8009b88 <__d2b+0x84>
 8009b3a:	4668      	mov	r0, sp
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	f7ff fd17 	bl	8009570 <__lo0bits>
 8009b42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b46:	b1e8      	cbz	r0, 8009b84 <__d2b+0x80>
 8009b48:	f1c0 0320 	rsb	r3, r0, #32
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	430b      	orrs	r3, r1
 8009b52:	40c2      	lsrs	r2, r0
 8009b54:	6163      	str	r3, [r4, #20]
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	61a3      	str	r3, [r4, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	bf14      	ite	ne
 8009b60:	2202      	movne	r2, #2
 8009b62:	2201      	moveq	r2, #1
 8009b64:	6122      	str	r2, [r4, #16]
 8009b66:	b1bd      	cbz	r5, 8009b98 <__d2b+0x94>
 8009b68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b6c:	4405      	add	r5, r0
 8009b6e:	603d      	str	r5, [r7, #0]
 8009b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b74:	6030      	str	r0, [r6, #0]
 8009b76:	4620      	mov	r0, r4
 8009b78:	b003      	add	sp, #12
 8009b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b82:	e7d6      	b.n	8009b32 <__d2b+0x2e>
 8009b84:	6161      	str	r1, [r4, #20]
 8009b86:	e7e7      	b.n	8009b58 <__d2b+0x54>
 8009b88:	a801      	add	r0, sp, #4
 8009b8a:	f7ff fcf1 	bl	8009570 <__lo0bits>
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	6163      	str	r3, [r4, #20]
 8009b92:	3020      	adds	r0, #32
 8009b94:	2201      	movs	r2, #1
 8009b96:	e7e5      	b.n	8009b64 <__d2b+0x60>
 8009b98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ba0:	6038      	str	r0, [r7, #0]
 8009ba2:	6918      	ldr	r0, [r3, #16]
 8009ba4:	f7ff fcc4 	bl	8009530 <__hi0bits>
 8009ba8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bac:	e7e2      	b.n	8009b74 <__d2b+0x70>
 8009bae:	bf00      	nop
 8009bb0:	0800bcf9 	.word	0x0800bcf9
 8009bb4:	0800bd0a 	.word	0x0800bd0a

08009bb8 <__ratio>:
 8009bb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	4688      	mov	r8, r1
 8009bbe:	4669      	mov	r1, sp
 8009bc0:	4681      	mov	r9, r0
 8009bc2:	f7ff ff55 	bl	8009a70 <__b2d>
 8009bc6:	a901      	add	r1, sp, #4
 8009bc8:	4640      	mov	r0, r8
 8009bca:	ec55 4b10 	vmov	r4, r5, d0
 8009bce:	f7ff ff4f 	bl	8009a70 <__b2d>
 8009bd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009bda:	eba3 0c02 	sub.w	ip, r3, r2
 8009bde:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009be8:	ec51 0b10 	vmov	r0, r1, d0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfd6      	itet	le
 8009bf0:	460a      	movle	r2, r1
 8009bf2:	462a      	movgt	r2, r5
 8009bf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	462f      	mov	r7, r5
 8009bfc:	bfd4      	ite	le
 8009bfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009c02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009c06:	4620      	mov	r0, r4
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fe3c 	bl	800088c <__aeabi_ddiv>
 8009c14:	ec41 0b10 	vmov	d0, r0, r1
 8009c18:	b003      	add	sp, #12
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c1e <__copybits>:
 8009c1e:	3901      	subs	r1, #1
 8009c20:	b570      	push	{r4, r5, r6, lr}
 8009c22:	1149      	asrs	r1, r1, #5
 8009c24:	6914      	ldr	r4, [r2, #16]
 8009c26:	3101      	adds	r1, #1
 8009c28:	f102 0314 	add.w	r3, r2, #20
 8009c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009c30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009c34:	1f05      	subs	r5, r0, #4
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	d30c      	bcc.n	8009c54 <__copybits+0x36>
 8009c3a:	1aa3      	subs	r3, r4, r2
 8009c3c:	3b11      	subs	r3, #17
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	3211      	adds	r2, #17
 8009c44:	42a2      	cmp	r2, r4
 8009c46:	bf88      	it	hi
 8009c48:	2300      	movhi	r3, #0
 8009c4a:	4418      	add	r0, r3
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4288      	cmp	r0, r1
 8009c50:	d305      	bcc.n	8009c5e <__copybits+0x40>
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	f853 6b04 	ldr.w	r6, [r3], #4
 8009c58:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c5c:	e7eb      	b.n	8009c36 <__copybits+0x18>
 8009c5e:	f840 3b04 	str.w	r3, [r0], #4
 8009c62:	e7f4      	b.n	8009c4e <__copybits+0x30>

08009c64 <__any_on>:
 8009c64:	f100 0214 	add.w	r2, r0, #20
 8009c68:	6900      	ldr	r0, [r0, #16]
 8009c6a:	114b      	asrs	r3, r1, #5
 8009c6c:	4298      	cmp	r0, r3
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	db11      	blt.n	8009c96 <__any_on+0x32>
 8009c72:	dd0a      	ble.n	8009c8a <__any_on+0x26>
 8009c74:	f011 011f 	ands.w	r1, r1, #31
 8009c78:	d007      	beq.n	8009c8a <__any_on+0x26>
 8009c7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c7e:	fa24 f001 	lsr.w	r0, r4, r1
 8009c82:	fa00 f101 	lsl.w	r1, r0, r1
 8009c86:	428c      	cmp	r4, r1
 8009c88:	d10b      	bne.n	8009ca2 <__any_on+0x3e>
 8009c8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d803      	bhi.n	8009c9a <__any_on+0x36>
 8009c92:	2000      	movs	r0, #0
 8009c94:	bd10      	pop	{r4, pc}
 8009c96:	4603      	mov	r3, r0
 8009c98:	e7f7      	b.n	8009c8a <__any_on+0x26>
 8009c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d0f5      	beq.n	8009c8e <__any_on+0x2a>
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	e7f6      	b.n	8009c94 <__any_on+0x30>

08009ca6 <sulp>:
 8009ca6:	b570      	push	{r4, r5, r6, lr}
 8009ca8:	4604      	mov	r4, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	ec45 4b10 	vmov	d0, r4, r5
 8009cb0:	4616      	mov	r6, r2
 8009cb2:	f7ff feb7 	bl	8009a24 <__ulp>
 8009cb6:	ec51 0b10 	vmov	r0, r1, d0
 8009cba:	b17e      	cbz	r6, 8009cdc <sulp+0x36>
 8009cbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dd09      	ble.n	8009cdc <sulp+0x36>
 8009cc8:	051b      	lsls	r3, r3, #20
 8009cca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009cce:	2400      	movs	r4, #0
 8009cd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009cd4:	4622      	mov	r2, r4
 8009cd6:	462b      	mov	r3, r5
 8009cd8:	f7f6 fcae 	bl	8000638 <__aeabi_dmul>
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ce0 <_strtod_l>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	ed2d 8b02 	vpush	{d8}
 8009ce8:	b09b      	sub	sp, #108	; 0x6c
 8009cea:	4604      	mov	r4, r0
 8009cec:	9213      	str	r2, [sp, #76]	; 0x4c
 8009cee:	2200      	movs	r2, #0
 8009cf0:	9216      	str	r2, [sp, #88]	; 0x58
 8009cf2:	460d      	mov	r5, r1
 8009cf4:	f04f 0800 	mov.w	r8, #0
 8009cf8:	f04f 0900 	mov.w	r9, #0
 8009cfc:	460a      	mov	r2, r1
 8009cfe:	9215      	str	r2, [sp, #84]	; 0x54
 8009d00:	7811      	ldrb	r1, [r2, #0]
 8009d02:	292b      	cmp	r1, #43	; 0x2b
 8009d04:	d04c      	beq.n	8009da0 <_strtod_l+0xc0>
 8009d06:	d83a      	bhi.n	8009d7e <_strtod_l+0x9e>
 8009d08:	290d      	cmp	r1, #13
 8009d0a:	d834      	bhi.n	8009d76 <_strtod_l+0x96>
 8009d0c:	2908      	cmp	r1, #8
 8009d0e:	d834      	bhi.n	8009d7a <_strtod_l+0x9a>
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d03d      	beq.n	8009d90 <_strtod_l+0xb0>
 8009d14:	2200      	movs	r2, #0
 8009d16:	920a      	str	r2, [sp, #40]	; 0x28
 8009d18:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009d1a:	7832      	ldrb	r2, [r6, #0]
 8009d1c:	2a30      	cmp	r2, #48	; 0x30
 8009d1e:	f040 80b4 	bne.w	8009e8a <_strtod_l+0x1aa>
 8009d22:	7872      	ldrb	r2, [r6, #1]
 8009d24:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009d28:	2a58      	cmp	r2, #88	; 0x58
 8009d2a:	d170      	bne.n	8009e0e <_strtod_l+0x12e>
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	ab16      	add	r3, sp, #88	; 0x58
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	4a8e      	ldr	r2, [pc, #568]	; (8009f70 <_strtod_l+0x290>)
 8009d38:	ab17      	add	r3, sp, #92	; 0x5c
 8009d3a:	a915      	add	r1, sp, #84	; 0x54
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f001 faf7 	bl	800b330 <__gethex>
 8009d42:	f010 070f 	ands.w	r7, r0, #15
 8009d46:	4605      	mov	r5, r0
 8009d48:	d005      	beq.n	8009d56 <_strtod_l+0x76>
 8009d4a:	2f06      	cmp	r7, #6
 8009d4c:	d12a      	bne.n	8009da4 <_strtod_l+0xc4>
 8009d4e:	3601      	adds	r6, #1
 8009d50:	2300      	movs	r3, #0
 8009d52:	9615      	str	r6, [sp, #84]	; 0x54
 8009d54:	930a      	str	r3, [sp, #40]	; 0x28
 8009d56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f040 857f 	bne.w	800a85c <_strtod_l+0xb7c>
 8009d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d60:	b1db      	cbz	r3, 8009d9a <_strtod_l+0xba>
 8009d62:	4642      	mov	r2, r8
 8009d64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d68:	ec43 2b10 	vmov	d0, r2, r3
 8009d6c:	b01b      	add	sp, #108	; 0x6c
 8009d6e:	ecbd 8b02 	vpop	{d8}
 8009d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d76:	2920      	cmp	r1, #32
 8009d78:	d1cc      	bne.n	8009d14 <_strtod_l+0x34>
 8009d7a:	3201      	adds	r2, #1
 8009d7c:	e7bf      	b.n	8009cfe <_strtod_l+0x1e>
 8009d7e:	292d      	cmp	r1, #45	; 0x2d
 8009d80:	d1c8      	bne.n	8009d14 <_strtod_l+0x34>
 8009d82:	2101      	movs	r1, #1
 8009d84:	910a      	str	r1, [sp, #40]	; 0x28
 8009d86:	1c51      	adds	r1, r2, #1
 8009d88:	9115      	str	r1, [sp, #84]	; 0x54
 8009d8a:	7852      	ldrb	r2, [r2, #1]
 8009d8c:	2a00      	cmp	r2, #0
 8009d8e:	d1c3      	bne.n	8009d18 <_strtod_l+0x38>
 8009d90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d92:	9515      	str	r5, [sp, #84]	; 0x54
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 855f 	bne.w	800a858 <_strtod_l+0xb78>
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	e7e3      	b.n	8009d68 <_strtod_l+0x88>
 8009da0:	2100      	movs	r1, #0
 8009da2:	e7ef      	b.n	8009d84 <_strtod_l+0xa4>
 8009da4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009da6:	b13a      	cbz	r2, 8009db8 <_strtod_l+0xd8>
 8009da8:	2135      	movs	r1, #53	; 0x35
 8009daa:	a818      	add	r0, sp, #96	; 0x60
 8009dac:	f7ff ff37 	bl	8009c1e <__copybits>
 8009db0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff fb0a 	bl	80093cc <_Bfree>
 8009db8:	3f01      	subs	r7, #1
 8009dba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009dbc:	2f04      	cmp	r7, #4
 8009dbe:	d806      	bhi.n	8009dce <_strtod_l+0xee>
 8009dc0:	e8df f007 	tbb	[pc, r7]
 8009dc4:	201d0314 	.word	0x201d0314
 8009dc8:	14          	.byte	0x14
 8009dc9:	00          	.byte	0x00
 8009dca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009dce:	05e9      	lsls	r1, r5, #23
 8009dd0:	bf48      	it	mi
 8009dd2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009dd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dda:	0d1b      	lsrs	r3, r3, #20
 8009ddc:	051b      	lsls	r3, r3, #20
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1b9      	bne.n	8009d56 <_strtod_l+0x76>
 8009de2:	f7fe faf9 	bl	80083d8 <__errno>
 8009de6:	2322      	movs	r3, #34	; 0x22
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	e7b4      	b.n	8009d56 <_strtod_l+0x76>
 8009dec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009df0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009df4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009df8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009dfc:	e7e7      	b.n	8009dce <_strtod_l+0xee>
 8009dfe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f78 <_strtod_l+0x298>
 8009e02:	e7e4      	b.n	8009dce <_strtod_l+0xee>
 8009e04:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009e08:	f04f 38ff 	mov.w	r8, #4294967295
 8009e0c:	e7df      	b.n	8009dce <_strtod_l+0xee>
 8009e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e10:	1c5a      	adds	r2, r3, #1
 8009e12:	9215      	str	r2, [sp, #84]	; 0x54
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b30      	cmp	r3, #48	; 0x30
 8009e18:	d0f9      	beq.n	8009e0e <_strtod_l+0x12e>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d09b      	beq.n	8009d56 <_strtod_l+0x76>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f04f 0a00 	mov.w	sl, #0
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009e2e:	46d3      	mov	fp, sl
 8009e30:	220a      	movs	r2, #10
 8009e32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009e34:	7806      	ldrb	r6, [r0, #0]
 8009e36:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e3a:	b2d9      	uxtb	r1, r3
 8009e3c:	2909      	cmp	r1, #9
 8009e3e:	d926      	bls.n	8009e8e <_strtod_l+0x1ae>
 8009e40:	494c      	ldr	r1, [pc, #304]	; (8009f74 <_strtod_l+0x294>)
 8009e42:	2201      	movs	r2, #1
 8009e44:	f001 f98c 	bl	800b160 <strncmp>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d030      	beq.n	8009eae <_strtod_l+0x1ce>
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	4632      	mov	r2, r6
 8009e50:	9005      	str	r0, [sp, #20]
 8009e52:	465e      	mov	r6, fp
 8009e54:	4603      	mov	r3, r0
 8009e56:	2a65      	cmp	r2, #101	; 0x65
 8009e58:	d001      	beq.n	8009e5e <_strtod_l+0x17e>
 8009e5a:	2a45      	cmp	r2, #69	; 0x45
 8009e5c:	d113      	bne.n	8009e86 <_strtod_l+0x1a6>
 8009e5e:	b91e      	cbnz	r6, 8009e68 <_strtod_l+0x188>
 8009e60:	9a04      	ldr	r2, [sp, #16]
 8009e62:	4302      	orrs	r2, r0
 8009e64:	d094      	beq.n	8009d90 <_strtod_l+0xb0>
 8009e66:	2600      	movs	r6, #0
 8009e68:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009e6a:	1c6a      	adds	r2, r5, #1
 8009e6c:	9215      	str	r2, [sp, #84]	; 0x54
 8009e6e:	786a      	ldrb	r2, [r5, #1]
 8009e70:	2a2b      	cmp	r2, #43	; 0x2b
 8009e72:	d074      	beq.n	8009f5e <_strtod_l+0x27e>
 8009e74:	2a2d      	cmp	r2, #45	; 0x2d
 8009e76:	d078      	beq.n	8009f6a <_strtod_l+0x28a>
 8009e78:	f04f 0c00 	mov.w	ip, #0
 8009e7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e80:	2909      	cmp	r1, #9
 8009e82:	d97f      	bls.n	8009f84 <_strtod_l+0x2a4>
 8009e84:	9515      	str	r5, [sp, #84]	; 0x54
 8009e86:	2700      	movs	r7, #0
 8009e88:	e09e      	b.n	8009fc8 <_strtod_l+0x2e8>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e7c8      	b.n	8009e20 <_strtod_l+0x140>
 8009e8e:	f1bb 0f08 	cmp.w	fp, #8
 8009e92:	bfd8      	it	le
 8009e94:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009e96:	f100 0001 	add.w	r0, r0, #1
 8009e9a:	bfda      	itte	le
 8009e9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ea0:	9309      	strle	r3, [sp, #36]	; 0x24
 8009ea2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009ea6:	f10b 0b01 	add.w	fp, fp, #1
 8009eaa:	9015      	str	r0, [sp, #84]	; 0x54
 8009eac:	e7c1      	b.n	8009e32 <_strtod_l+0x152>
 8009eae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	9215      	str	r2, [sp, #84]	; 0x54
 8009eb4:	785a      	ldrb	r2, [r3, #1]
 8009eb6:	f1bb 0f00 	cmp.w	fp, #0
 8009eba:	d037      	beq.n	8009f2c <_strtod_l+0x24c>
 8009ebc:	9005      	str	r0, [sp, #20]
 8009ebe:	465e      	mov	r6, fp
 8009ec0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009ec4:	2b09      	cmp	r3, #9
 8009ec6:	d912      	bls.n	8009eee <_strtod_l+0x20e>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e7c4      	b.n	8009e56 <_strtod_l+0x176>
 8009ecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	9215      	str	r2, [sp, #84]	; 0x54
 8009ed2:	785a      	ldrb	r2, [r3, #1]
 8009ed4:	3001      	adds	r0, #1
 8009ed6:	2a30      	cmp	r2, #48	; 0x30
 8009ed8:	d0f8      	beq.n	8009ecc <_strtod_l+0x1ec>
 8009eda:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	f200 84c1 	bhi.w	800a866 <_strtod_l+0xb86>
 8009ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ee6:	9005      	str	r0, [sp, #20]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eec:	4606      	mov	r6, r0
 8009eee:	3a30      	subs	r2, #48	; 0x30
 8009ef0:	f100 0301 	add.w	r3, r0, #1
 8009ef4:	d014      	beq.n	8009f20 <_strtod_l+0x240>
 8009ef6:	9905      	ldr	r1, [sp, #20]
 8009ef8:	4419      	add	r1, r3
 8009efa:	9105      	str	r1, [sp, #20]
 8009efc:	4633      	mov	r3, r6
 8009efe:	eb00 0c06 	add.w	ip, r0, r6
 8009f02:	210a      	movs	r1, #10
 8009f04:	4563      	cmp	r3, ip
 8009f06:	d113      	bne.n	8009f30 <_strtod_l+0x250>
 8009f08:	1833      	adds	r3, r6, r0
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	f106 0601 	add.w	r6, r6, #1
 8009f10:	4406      	add	r6, r0
 8009f12:	dc1a      	bgt.n	8009f4a <_strtod_l+0x26a>
 8009f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f16:	230a      	movs	r3, #10
 8009f18:	fb03 2301 	mla	r3, r3, r1, r2
 8009f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f22:	1c51      	adds	r1, r2, #1
 8009f24:	9115      	str	r1, [sp, #84]	; 0x54
 8009f26:	7852      	ldrb	r2, [r2, #1]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	e7c9      	b.n	8009ec0 <_strtod_l+0x1e0>
 8009f2c:	4658      	mov	r0, fp
 8009f2e:	e7d2      	b.n	8009ed6 <_strtod_l+0x1f6>
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	f103 0301 	add.w	r3, r3, #1
 8009f36:	dc03      	bgt.n	8009f40 <_strtod_l+0x260>
 8009f38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009f3a:	434f      	muls	r7, r1
 8009f3c:	9709      	str	r7, [sp, #36]	; 0x24
 8009f3e:	e7e1      	b.n	8009f04 <_strtod_l+0x224>
 8009f40:	2b10      	cmp	r3, #16
 8009f42:	bfd8      	it	le
 8009f44:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009f48:	e7dc      	b.n	8009f04 <_strtod_l+0x224>
 8009f4a:	2e10      	cmp	r6, #16
 8009f4c:	bfdc      	itt	le
 8009f4e:	230a      	movle	r3, #10
 8009f50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009f54:	e7e3      	b.n	8009f1e <_strtod_l+0x23e>
 8009f56:	2300      	movs	r3, #0
 8009f58:	9305      	str	r3, [sp, #20]
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e780      	b.n	8009e60 <_strtod_l+0x180>
 8009f5e:	f04f 0c00 	mov.w	ip, #0
 8009f62:	1caa      	adds	r2, r5, #2
 8009f64:	9215      	str	r2, [sp, #84]	; 0x54
 8009f66:	78aa      	ldrb	r2, [r5, #2]
 8009f68:	e788      	b.n	8009e7c <_strtod_l+0x19c>
 8009f6a:	f04f 0c01 	mov.w	ip, #1
 8009f6e:	e7f8      	b.n	8009f62 <_strtod_l+0x282>
 8009f70:	0800be68 	.word	0x0800be68
 8009f74:	0800be64 	.word	0x0800be64
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f7e:	1c51      	adds	r1, r2, #1
 8009f80:	9115      	str	r1, [sp, #84]	; 0x54
 8009f82:	7852      	ldrb	r2, [r2, #1]
 8009f84:	2a30      	cmp	r2, #48	; 0x30
 8009f86:	d0f9      	beq.n	8009f7c <_strtod_l+0x29c>
 8009f88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f8c:	2908      	cmp	r1, #8
 8009f8e:	f63f af7a 	bhi.w	8009e86 <_strtod_l+0x1a6>
 8009f92:	3a30      	subs	r2, #48	; 0x30
 8009f94:	9208      	str	r2, [sp, #32]
 8009f96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f98:	920c      	str	r2, [sp, #48]	; 0x30
 8009f9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f9c:	1c57      	adds	r7, r2, #1
 8009f9e:	9715      	str	r7, [sp, #84]	; 0x54
 8009fa0:	7852      	ldrb	r2, [r2, #1]
 8009fa2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009fa6:	f1be 0f09 	cmp.w	lr, #9
 8009faa:	d938      	bls.n	800a01e <_strtod_l+0x33e>
 8009fac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fae:	1a7f      	subs	r7, r7, r1
 8009fb0:	2f08      	cmp	r7, #8
 8009fb2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009fb6:	dc03      	bgt.n	8009fc0 <_strtod_l+0x2e0>
 8009fb8:	9908      	ldr	r1, [sp, #32]
 8009fba:	428f      	cmp	r7, r1
 8009fbc:	bfa8      	it	ge
 8009fbe:	460f      	movge	r7, r1
 8009fc0:	f1bc 0f00 	cmp.w	ip, #0
 8009fc4:	d000      	beq.n	8009fc8 <_strtod_l+0x2e8>
 8009fc6:	427f      	negs	r7, r7
 8009fc8:	2e00      	cmp	r6, #0
 8009fca:	d14f      	bne.n	800a06c <_strtod_l+0x38c>
 8009fcc:	9904      	ldr	r1, [sp, #16]
 8009fce:	4301      	orrs	r1, r0
 8009fd0:	f47f aec1 	bne.w	8009d56 <_strtod_l+0x76>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f47f aedb 	bne.w	8009d90 <_strtod_l+0xb0>
 8009fda:	2a69      	cmp	r2, #105	; 0x69
 8009fdc:	d029      	beq.n	800a032 <_strtod_l+0x352>
 8009fde:	dc26      	bgt.n	800a02e <_strtod_l+0x34e>
 8009fe0:	2a49      	cmp	r2, #73	; 0x49
 8009fe2:	d026      	beq.n	800a032 <_strtod_l+0x352>
 8009fe4:	2a4e      	cmp	r2, #78	; 0x4e
 8009fe6:	f47f aed3 	bne.w	8009d90 <_strtod_l+0xb0>
 8009fea:	499b      	ldr	r1, [pc, #620]	; (800a258 <_strtod_l+0x578>)
 8009fec:	a815      	add	r0, sp, #84	; 0x54
 8009fee:	f001 fbdf 	bl	800b7b0 <__match>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	f43f aecc 	beq.w	8009d90 <_strtod_l+0xb0>
 8009ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b28      	cmp	r3, #40	; 0x28
 8009ffe:	d12f      	bne.n	800a060 <_strtod_l+0x380>
 800a000:	4996      	ldr	r1, [pc, #600]	; (800a25c <_strtod_l+0x57c>)
 800a002:	aa18      	add	r2, sp, #96	; 0x60
 800a004:	a815      	add	r0, sp, #84	; 0x54
 800a006:	f001 fbe7 	bl	800b7d8 <__hexnan>
 800a00a:	2805      	cmp	r0, #5
 800a00c:	d128      	bne.n	800a060 <_strtod_l+0x380>
 800a00e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a014:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a018:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a01c:	e69b      	b.n	8009d56 <_strtod_l+0x76>
 800a01e:	9f08      	ldr	r7, [sp, #32]
 800a020:	210a      	movs	r1, #10
 800a022:	fb01 2107 	mla	r1, r1, r7, r2
 800a026:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a02a:	9208      	str	r2, [sp, #32]
 800a02c:	e7b5      	b.n	8009f9a <_strtod_l+0x2ba>
 800a02e:	2a6e      	cmp	r2, #110	; 0x6e
 800a030:	e7d9      	b.n	8009fe6 <_strtod_l+0x306>
 800a032:	498b      	ldr	r1, [pc, #556]	; (800a260 <_strtod_l+0x580>)
 800a034:	a815      	add	r0, sp, #84	; 0x54
 800a036:	f001 fbbb 	bl	800b7b0 <__match>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f43f aea8 	beq.w	8009d90 <_strtod_l+0xb0>
 800a040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a042:	4988      	ldr	r1, [pc, #544]	; (800a264 <_strtod_l+0x584>)
 800a044:	3b01      	subs	r3, #1
 800a046:	a815      	add	r0, sp, #84	; 0x54
 800a048:	9315      	str	r3, [sp, #84]	; 0x54
 800a04a:	f001 fbb1 	bl	800b7b0 <__match>
 800a04e:	b910      	cbnz	r0, 800a056 <_strtod_l+0x376>
 800a050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a052:	3301      	adds	r3, #1
 800a054:	9315      	str	r3, [sp, #84]	; 0x54
 800a056:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a274 <_strtod_l+0x594>
 800a05a:	f04f 0800 	mov.w	r8, #0
 800a05e:	e67a      	b.n	8009d56 <_strtod_l+0x76>
 800a060:	4881      	ldr	r0, [pc, #516]	; (800a268 <_strtod_l+0x588>)
 800a062:	f001 f8c1 	bl	800b1e8 <nan>
 800a066:	ec59 8b10 	vmov	r8, r9, d0
 800a06a:	e674      	b.n	8009d56 <_strtod_l+0x76>
 800a06c:	9b05      	ldr	r3, [sp, #20]
 800a06e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a070:	1afb      	subs	r3, r7, r3
 800a072:	f1bb 0f00 	cmp.w	fp, #0
 800a076:	bf08      	it	eq
 800a078:	46b3      	moveq	fp, r6
 800a07a:	2e10      	cmp	r6, #16
 800a07c:	9308      	str	r3, [sp, #32]
 800a07e:	4635      	mov	r5, r6
 800a080:	bfa8      	it	ge
 800a082:	2510      	movge	r5, #16
 800a084:	f7f6 fa5e 	bl	8000544 <__aeabi_ui2d>
 800a088:	2e09      	cmp	r6, #9
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	dd13      	ble.n	800a0b8 <_strtod_l+0x3d8>
 800a090:	4b76      	ldr	r3, [pc, #472]	; (800a26c <_strtod_l+0x58c>)
 800a092:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a096:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a09a:	f7f6 facd 	bl	8000638 <__aeabi_dmul>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	4650      	mov	r0, sl
 800a0a2:	4689      	mov	r9, r1
 800a0a4:	f7f6 fa4e 	bl	8000544 <__aeabi_ui2d>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 f90c 	bl	80002cc <__adddf3>
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	4689      	mov	r9, r1
 800a0b8:	2e0f      	cmp	r6, #15
 800a0ba:	dc38      	bgt.n	800a12e <_strtod_l+0x44e>
 800a0bc:	9b08      	ldr	r3, [sp, #32]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f43f ae49 	beq.w	8009d56 <_strtod_l+0x76>
 800a0c4:	dd24      	ble.n	800a110 <_strtod_l+0x430>
 800a0c6:	2b16      	cmp	r3, #22
 800a0c8:	dc0b      	bgt.n	800a0e2 <_strtod_l+0x402>
 800a0ca:	4968      	ldr	r1, [pc, #416]	; (800a26c <_strtod_l+0x58c>)
 800a0cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	f7f6 faae 	bl	8000638 <__aeabi_dmul>
 800a0dc:	4680      	mov	r8, r0
 800a0de:	4689      	mov	r9, r1
 800a0e0:	e639      	b.n	8009d56 <_strtod_l+0x76>
 800a0e2:	9a08      	ldr	r2, [sp, #32]
 800a0e4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	db20      	blt.n	800a12e <_strtod_l+0x44e>
 800a0ec:	4c5f      	ldr	r4, [pc, #380]	; (800a26c <_strtod_l+0x58c>)
 800a0ee:	f1c6 060f 	rsb	r6, r6, #15
 800a0f2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fe:	f7f6 fa9b 	bl	8000638 <__aeabi_dmul>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	1b9e      	subs	r6, r3, r6
 800a106:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a10a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a10e:	e7e3      	b.n	800a0d8 <_strtod_l+0x3f8>
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	3316      	adds	r3, #22
 800a114:	db0b      	blt.n	800a12e <_strtod_l+0x44e>
 800a116:	9b05      	ldr	r3, [sp, #20]
 800a118:	1bdf      	subs	r7, r3, r7
 800a11a:	4b54      	ldr	r3, [pc, #336]	; (800a26c <_strtod_l+0x58c>)
 800a11c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a124:	4640      	mov	r0, r8
 800a126:	4649      	mov	r1, r9
 800a128:	f7f6 fbb0 	bl	800088c <__aeabi_ddiv>
 800a12c:	e7d6      	b.n	800a0dc <_strtod_l+0x3fc>
 800a12e:	9b08      	ldr	r3, [sp, #32]
 800a130:	1b75      	subs	r5, r6, r5
 800a132:	441d      	add	r5, r3
 800a134:	2d00      	cmp	r5, #0
 800a136:	dd70      	ble.n	800a21a <_strtod_l+0x53a>
 800a138:	f015 030f 	ands.w	r3, r5, #15
 800a13c:	d00a      	beq.n	800a154 <_strtod_l+0x474>
 800a13e:	494b      	ldr	r1, [pc, #300]	; (800a26c <_strtod_l+0x58c>)
 800a140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a144:	4642      	mov	r2, r8
 800a146:	464b      	mov	r3, r9
 800a148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a14c:	f7f6 fa74 	bl	8000638 <__aeabi_dmul>
 800a150:	4680      	mov	r8, r0
 800a152:	4689      	mov	r9, r1
 800a154:	f035 050f 	bics.w	r5, r5, #15
 800a158:	d04d      	beq.n	800a1f6 <_strtod_l+0x516>
 800a15a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a15e:	dd22      	ble.n	800a1a6 <_strtod_l+0x4c6>
 800a160:	2500      	movs	r5, #0
 800a162:	46ab      	mov	fp, r5
 800a164:	9509      	str	r5, [sp, #36]	; 0x24
 800a166:	9505      	str	r5, [sp, #20]
 800a168:	2322      	movs	r3, #34	; 0x22
 800a16a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a274 <_strtod_l+0x594>
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	f04f 0800 	mov.w	r8, #0
 800a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	f43f aded 	beq.w	8009d56 <_strtod_l+0x76>
 800a17c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a17e:	4620      	mov	r0, r4
 800a180:	f7ff f924 	bl	80093cc <_Bfree>
 800a184:	9905      	ldr	r1, [sp, #20]
 800a186:	4620      	mov	r0, r4
 800a188:	f7ff f920 	bl	80093cc <_Bfree>
 800a18c:	4659      	mov	r1, fp
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff f91c 	bl	80093cc <_Bfree>
 800a194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a196:	4620      	mov	r0, r4
 800a198:	f7ff f918 	bl	80093cc <_Bfree>
 800a19c:	4629      	mov	r1, r5
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7ff f914 	bl	80093cc <_Bfree>
 800a1a4:	e5d7      	b.n	8009d56 <_strtod_l+0x76>
 800a1a6:	4b32      	ldr	r3, [pc, #200]	; (800a270 <_strtod_l+0x590>)
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	112d      	asrs	r5, r5, #4
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	469a      	mov	sl, r3
 800a1b4:	2d01      	cmp	r5, #1
 800a1b6:	dc21      	bgt.n	800a1fc <_strtod_l+0x51c>
 800a1b8:	b10b      	cbz	r3, 800a1be <_strtod_l+0x4de>
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4689      	mov	r9, r1
 800a1be:	492c      	ldr	r1, [pc, #176]	; (800a270 <_strtod_l+0x590>)
 800a1c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a1c4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1c8:	4642      	mov	r2, r8
 800a1ca:	464b      	mov	r3, r9
 800a1cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d0:	f7f6 fa32 	bl	8000638 <__aeabi_dmul>
 800a1d4:	4b27      	ldr	r3, [pc, #156]	; (800a274 <_strtod_l+0x594>)
 800a1d6:	460a      	mov	r2, r1
 800a1d8:	400b      	ands	r3, r1
 800a1da:	4927      	ldr	r1, [pc, #156]	; (800a278 <_strtod_l+0x598>)
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	4680      	mov	r8, r0
 800a1e0:	d8be      	bhi.n	800a160 <_strtod_l+0x480>
 800a1e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1e6:	428b      	cmp	r3, r1
 800a1e8:	bf86      	itte	hi
 800a1ea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a27c <_strtod_l+0x59c>
 800a1ee:	f04f 38ff 	movhi.w	r8, #4294967295
 800a1f2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	e07b      	b.n	800a2f4 <_strtod_l+0x614>
 800a1fc:	07ea      	lsls	r2, r5, #31
 800a1fe:	d505      	bpl.n	800a20c <_strtod_l+0x52c>
 800a200:	9b04      	ldr	r3, [sp, #16]
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 fa17 	bl	8000638 <__aeabi_dmul>
 800a20a:	2301      	movs	r3, #1
 800a20c:	9a04      	ldr	r2, [sp, #16]
 800a20e:	3208      	adds	r2, #8
 800a210:	f10a 0a01 	add.w	sl, sl, #1
 800a214:	106d      	asrs	r5, r5, #1
 800a216:	9204      	str	r2, [sp, #16]
 800a218:	e7cc      	b.n	800a1b4 <_strtod_l+0x4d4>
 800a21a:	d0ec      	beq.n	800a1f6 <_strtod_l+0x516>
 800a21c:	426d      	negs	r5, r5
 800a21e:	f015 020f 	ands.w	r2, r5, #15
 800a222:	d00a      	beq.n	800a23a <_strtod_l+0x55a>
 800a224:	4b11      	ldr	r3, [pc, #68]	; (800a26c <_strtod_l+0x58c>)
 800a226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 fb2b 	bl	800088c <__aeabi_ddiv>
 800a236:	4680      	mov	r8, r0
 800a238:	4689      	mov	r9, r1
 800a23a:	112d      	asrs	r5, r5, #4
 800a23c:	d0db      	beq.n	800a1f6 <_strtod_l+0x516>
 800a23e:	2d1f      	cmp	r5, #31
 800a240:	dd1e      	ble.n	800a280 <_strtod_l+0x5a0>
 800a242:	2500      	movs	r5, #0
 800a244:	46ab      	mov	fp, r5
 800a246:	9509      	str	r5, [sp, #36]	; 0x24
 800a248:	9505      	str	r5, [sp, #20]
 800a24a:	2322      	movs	r3, #34	; 0x22
 800a24c:	f04f 0800 	mov.w	r8, #0
 800a250:	f04f 0900 	mov.w	r9, #0
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	e78d      	b.n	800a174 <_strtod_l+0x494>
 800a258:	0800bc51 	.word	0x0800bc51
 800a25c:	0800be7c 	.word	0x0800be7c
 800a260:	0800bc49 	.word	0x0800bc49
 800a264:	0800bc80 	.word	0x0800bc80
 800a268:	0800c00d 	.word	0x0800c00d
 800a26c:	0800bd90 	.word	0x0800bd90
 800a270:	0800bd68 	.word	0x0800bd68
 800a274:	7ff00000 	.word	0x7ff00000
 800a278:	7ca00000 	.word	0x7ca00000
 800a27c:	7fefffff 	.word	0x7fefffff
 800a280:	f015 0310 	ands.w	r3, r5, #16
 800a284:	bf18      	it	ne
 800a286:	236a      	movne	r3, #106	; 0x6a
 800a288:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a62c <_strtod_l+0x94c>
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	2300      	movs	r3, #0
 800a294:	07ea      	lsls	r2, r5, #31
 800a296:	d504      	bpl.n	800a2a2 <_strtod_l+0x5c2>
 800a298:	e9da 2300 	ldrd	r2, r3, [sl]
 800a29c:	f7f6 f9cc 	bl	8000638 <__aeabi_dmul>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	106d      	asrs	r5, r5, #1
 800a2a4:	f10a 0a08 	add.w	sl, sl, #8
 800a2a8:	d1f4      	bne.n	800a294 <_strtod_l+0x5b4>
 800a2aa:	b10b      	cbz	r3, 800a2b0 <_strtod_l+0x5d0>
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	4689      	mov	r9, r1
 800a2b0:	9b04      	ldr	r3, [sp, #16]
 800a2b2:	b1bb      	cbz	r3, 800a2e4 <_strtod_l+0x604>
 800a2b4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a2b8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	4649      	mov	r1, r9
 800a2c0:	dd10      	ble.n	800a2e4 <_strtod_l+0x604>
 800a2c2:	2b1f      	cmp	r3, #31
 800a2c4:	f340 811e 	ble.w	800a504 <_strtod_l+0x824>
 800a2c8:	2b34      	cmp	r3, #52	; 0x34
 800a2ca:	bfde      	ittt	le
 800a2cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a2d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a2d4:	4093      	lslle	r3, r2
 800a2d6:	f04f 0800 	mov.w	r8, #0
 800a2da:	bfcc      	ite	gt
 800a2dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a2e0:	ea03 0901 	andle.w	r9, r3, r1
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	f7f6 fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d1a6      	bne.n	800a242 <_strtod_l+0x562>
 800a2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2fa:	4633      	mov	r3, r6
 800a2fc:	465a      	mov	r2, fp
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff f8cc 	bl	800949c <__s2b>
 800a304:	9009      	str	r0, [sp, #36]	; 0x24
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f af2a 	beq.w	800a160 <_strtod_l+0x480>
 800a30c:	9a08      	ldr	r2, [sp, #32]
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	2a00      	cmp	r2, #0
 800a312:	eba3 0307 	sub.w	r3, r3, r7
 800a316:	bfa8      	it	ge
 800a318:	2300      	movge	r3, #0
 800a31a:	930c      	str	r3, [sp, #48]	; 0x30
 800a31c:	2500      	movs	r5, #0
 800a31e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a322:	9312      	str	r3, [sp, #72]	; 0x48
 800a324:	46ab      	mov	fp, r5
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	4620      	mov	r0, r4
 800a32a:	6859      	ldr	r1, [r3, #4]
 800a32c:	f7ff f80e 	bl	800934c <_Balloc>
 800a330:	9005      	str	r0, [sp, #20]
 800a332:	2800      	cmp	r0, #0
 800a334:	f43f af18 	beq.w	800a168 <_strtod_l+0x488>
 800a338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	3202      	adds	r2, #2
 800a33e:	f103 010c 	add.w	r1, r3, #12
 800a342:	0092      	lsls	r2, r2, #2
 800a344:	300c      	adds	r0, #12
 800a346:	f7fe f873 	bl	8008430 <memcpy>
 800a34a:	ec49 8b10 	vmov	d0, r8, r9
 800a34e:	aa18      	add	r2, sp, #96	; 0x60
 800a350:	a917      	add	r1, sp, #92	; 0x5c
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff fbd6 	bl	8009b04 <__d2b>
 800a358:	ec49 8b18 	vmov	d8, r8, r9
 800a35c:	9016      	str	r0, [sp, #88]	; 0x58
 800a35e:	2800      	cmp	r0, #0
 800a360:	f43f af02 	beq.w	800a168 <_strtod_l+0x488>
 800a364:	2101      	movs	r1, #1
 800a366:	4620      	mov	r0, r4
 800a368:	f7ff f930 	bl	80095cc <__i2b>
 800a36c:	4683      	mov	fp, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	f43f aefa 	beq.w	800a168 <_strtod_l+0x488>
 800a374:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a376:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a378:	2e00      	cmp	r6, #0
 800a37a:	bfab      	itete	ge
 800a37c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a37e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a380:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a382:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a386:	bfac      	ite	ge
 800a388:	eb06 0a03 	addge.w	sl, r6, r3
 800a38c:	1b9f      	sublt	r7, r3, r6
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	1af6      	subs	r6, r6, r3
 800a392:	4416      	add	r6, r2
 800a394:	4ba0      	ldr	r3, [pc, #640]	; (800a618 <_strtod_l+0x938>)
 800a396:	3e01      	subs	r6, #1
 800a398:	429e      	cmp	r6, r3
 800a39a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a39e:	f280 80c4 	bge.w	800a52a <_strtod_l+0x84a>
 800a3a2:	1b9b      	subs	r3, r3, r6
 800a3a4:	2b1f      	cmp	r3, #31
 800a3a6:	eba2 0203 	sub.w	r2, r2, r3
 800a3aa:	f04f 0101 	mov.w	r1, #1
 800a3ae:	f300 80b0 	bgt.w	800a512 <_strtod_l+0x832>
 800a3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a3bc:	eb0a 0602 	add.w	r6, sl, r2
 800a3c0:	9b04      	ldr	r3, [sp, #16]
 800a3c2:	45b2      	cmp	sl, r6
 800a3c4:	4417      	add	r7, r2
 800a3c6:	441f      	add	r7, r3
 800a3c8:	4653      	mov	r3, sl
 800a3ca:	bfa8      	it	ge
 800a3cc:	4633      	movge	r3, r6
 800a3ce:	42bb      	cmp	r3, r7
 800a3d0:	bfa8      	it	ge
 800a3d2:	463b      	movge	r3, r7
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfc2      	ittt	gt
 800a3d8:	1af6      	subgt	r6, r6, r3
 800a3da:	1aff      	subgt	r7, r7, r3
 800a3dc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	dd17      	ble.n	800a416 <_strtod_l+0x736>
 800a3e6:	4659      	mov	r1, fp
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f7ff f9ae 	bl	800974c <__pow5mult>
 800a3f0:	4683      	mov	fp, r0
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f43f aeb8 	beq.w	800a168 <_strtod_l+0x488>
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7ff f8fb 	bl	80095f8 <__multiply>
 800a402:	900b      	str	r0, [sp, #44]	; 0x2c
 800a404:	2800      	cmp	r0, #0
 800a406:	f43f aeaf 	beq.w	800a168 <_strtod_l+0x488>
 800a40a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7fe ffdd 	bl	80093cc <_Bfree>
 800a412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a414:	9316      	str	r3, [sp, #88]	; 0x58
 800a416:	2e00      	cmp	r6, #0
 800a418:	f300 808c 	bgt.w	800a534 <_strtod_l+0x854>
 800a41c:	9b08      	ldr	r3, [sp, #32]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	dd08      	ble.n	800a434 <_strtod_l+0x754>
 800a422:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a424:	9905      	ldr	r1, [sp, #20]
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff f990 	bl	800974c <__pow5mult>
 800a42c:	9005      	str	r0, [sp, #20]
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f ae9a 	beq.w	800a168 <_strtod_l+0x488>
 800a434:	2f00      	cmp	r7, #0
 800a436:	dd08      	ble.n	800a44a <_strtod_l+0x76a>
 800a438:	9905      	ldr	r1, [sp, #20]
 800a43a:	463a      	mov	r2, r7
 800a43c:	4620      	mov	r0, r4
 800a43e:	f7ff f9df 	bl	8009800 <__lshift>
 800a442:	9005      	str	r0, [sp, #20]
 800a444:	2800      	cmp	r0, #0
 800a446:	f43f ae8f 	beq.w	800a168 <_strtod_l+0x488>
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	dd08      	ble.n	800a462 <_strtod_l+0x782>
 800a450:	4659      	mov	r1, fp
 800a452:	4652      	mov	r2, sl
 800a454:	4620      	mov	r0, r4
 800a456:	f7ff f9d3 	bl	8009800 <__lshift>
 800a45a:	4683      	mov	fp, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f43f ae83 	beq.w	800a168 <_strtod_l+0x488>
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff fa52 	bl	8009910 <__mdiff>
 800a46c:	4605      	mov	r5, r0
 800a46e:	2800      	cmp	r0, #0
 800a470:	f43f ae7a 	beq.w	800a168 <_strtod_l+0x488>
 800a474:	68c3      	ldr	r3, [r0, #12]
 800a476:	930b      	str	r3, [sp, #44]	; 0x2c
 800a478:	2300      	movs	r3, #0
 800a47a:	60c3      	str	r3, [r0, #12]
 800a47c:	4659      	mov	r1, fp
 800a47e:	f7ff fa2b 	bl	80098d8 <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	da60      	bge.n	800a548 <_strtod_l+0x868>
 800a486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a488:	ea53 0308 	orrs.w	r3, r3, r8
 800a48c:	f040 8084 	bne.w	800a598 <_strtod_l+0x8b8>
 800a490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a494:	2b00      	cmp	r3, #0
 800a496:	d17f      	bne.n	800a598 <_strtod_l+0x8b8>
 800a498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a49c:	0d1b      	lsrs	r3, r3, #20
 800a49e:	051b      	lsls	r3, r3, #20
 800a4a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a4a4:	d978      	bls.n	800a598 <_strtod_l+0x8b8>
 800a4a6:	696b      	ldr	r3, [r5, #20]
 800a4a8:	b913      	cbnz	r3, 800a4b0 <_strtod_l+0x7d0>
 800a4aa:	692b      	ldr	r3, [r5, #16]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	dd73      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f7ff f9a3 	bl	8009800 <__lshift>
 800a4ba:	4659      	mov	r1, fp
 800a4bc:	4605      	mov	r5, r0
 800a4be:	f7ff fa0b 	bl	80098d8 <__mcmp>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	dd68      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4c6:	9904      	ldr	r1, [sp, #16]
 800a4c8:	4a54      	ldr	r2, [pc, #336]	; (800a61c <_strtod_l+0x93c>)
 800a4ca:	464b      	mov	r3, r9
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	f000 8084 	beq.w	800a5da <_strtod_l+0x8fa>
 800a4d2:	ea02 0109 	and.w	r1, r2, r9
 800a4d6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4da:	dc7e      	bgt.n	800a5da <_strtod_l+0x8fa>
 800a4dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4e0:	f77f aeb3 	ble.w	800a24a <_strtod_l+0x56a>
 800a4e4:	4b4e      	ldr	r3, [pc, #312]	; (800a620 <_strtod_l+0x940>)
 800a4e6:	4640      	mov	r0, r8
 800a4e8:	4649      	mov	r1, r9
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f7f6 f8a4 	bl	8000638 <__aeabi_dmul>
 800a4f0:	4b4a      	ldr	r3, [pc, #296]	; (800a61c <_strtod_l+0x93c>)
 800a4f2:	400b      	ands	r3, r1
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	4689      	mov	r9, r1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f47f ae3f 	bne.w	800a17c <_strtod_l+0x49c>
 800a4fe:	2322      	movs	r3, #34	; 0x22
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	e63b      	b.n	800a17c <_strtod_l+0x49c>
 800a504:	f04f 32ff 	mov.w	r2, #4294967295
 800a508:	fa02 f303 	lsl.w	r3, r2, r3
 800a50c:	ea03 0808 	and.w	r8, r3, r8
 800a510:	e6e8      	b.n	800a2e4 <_strtod_l+0x604>
 800a512:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a516:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a51a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a51e:	36e2      	adds	r6, #226	; 0xe2
 800a520:	fa01 f306 	lsl.w	r3, r1, r6
 800a524:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a528:	e748      	b.n	800a3bc <_strtod_l+0x6dc>
 800a52a:	2100      	movs	r1, #0
 800a52c:	2301      	movs	r3, #1
 800a52e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a532:	e743      	b.n	800a3bc <_strtod_l+0x6dc>
 800a534:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a536:	4632      	mov	r2, r6
 800a538:	4620      	mov	r0, r4
 800a53a:	f7ff f961 	bl	8009800 <__lshift>
 800a53e:	9016      	str	r0, [sp, #88]	; 0x58
 800a540:	2800      	cmp	r0, #0
 800a542:	f47f af6b 	bne.w	800a41c <_strtod_l+0x73c>
 800a546:	e60f      	b.n	800a168 <_strtod_l+0x488>
 800a548:	46ca      	mov	sl, r9
 800a54a:	d171      	bne.n	800a630 <_strtod_l+0x950>
 800a54c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a54e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a552:	b352      	cbz	r2, 800a5aa <_strtod_l+0x8ca>
 800a554:	4a33      	ldr	r2, [pc, #204]	; (800a624 <_strtod_l+0x944>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d12a      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a55a:	9b04      	ldr	r3, [sp, #16]
 800a55c:	4641      	mov	r1, r8
 800a55e:	b1fb      	cbz	r3, 800a5a0 <_strtod_l+0x8c0>
 800a560:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <_strtod_l+0x93c>)
 800a562:	ea09 0303 	and.w	r3, r9, r3
 800a566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a56a:	f04f 32ff 	mov.w	r2, #4294967295
 800a56e:	d81a      	bhi.n	800a5a6 <_strtod_l+0x8c6>
 800a570:	0d1b      	lsrs	r3, r3, #20
 800a572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a576:	fa02 f303 	lsl.w	r3, r2, r3
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d118      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a57e:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <_strtod_l+0x948>)
 800a580:	459a      	cmp	sl, r3
 800a582:	d102      	bne.n	800a58a <_strtod_l+0x8aa>
 800a584:	3101      	adds	r1, #1
 800a586:	f43f adef 	beq.w	800a168 <_strtod_l+0x488>
 800a58a:	4b24      	ldr	r3, [pc, #144]	; (800a61c <_strtod_l+0x93c>)
 800a58c:	ea0a 0303 	and.w	r3, sl, r3
 800a590:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a594:	f04f 0800 	mov.w	r8, #0
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1a2      	bne.n	800a4e4 <_strtod_l+0x804>
 800a59e:	e5ed      	b.n	800a17c <_strtod_l+0x49c>
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a4:	e7e9      	b.n	800a57a <_strtod_l+0x89a>
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	e7e7      	b.n	800a57a <_strtod_l+0x89a>
 800a5aa:	ea53 0308 	orrs.w	r3, r3, r8
 800a5ae:	d08a      	beq.n	800a4c6 <_strtod_l+0x7e6>
 800a5b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b2:	b1e3      	cbz	r3, 800a5ee <_strtod_l+0x90e>
 800a5b4:	ea13 0f0a 	tst.w	r3, sl
 800a5b8:	d0ee      	beq.n	800a598 <_strtod_l+0x8b8>
 800a5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5bc:	9a04      	ldr	r2, [sp, #16]
 800a5be:	4640      	mov	r0, r8
 800a5c0:	4649      	mov	r1, r9
 800a5c2:	b1c3      	cbz	r3, 800a5f6 <_strtod_l+0x916>
 800a5c4:	f7ff fb6f 	bl	8009ca6 <sulp>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	ec51 0b18 	vmov	r0, r1, d8
 800a5d0:	f7f5 fe7c 	bl	80002cc <__adddf3>
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	4689      	mov	r9, r1
 800a5d8:	e7de      	b.n	800a598 <_strtod_l+0x8b8>
 800a5da:	4013      	ands	r3, r2
 800a5dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a5e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a5e8:	f04f 38ff 	mov.w	r8, #4294967295
 800a5ec:	e7d4      	b.n	800a598 <_strtod_l+0x8b8>
 800a5ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f0:	ea13 0f08 	tst.w	r3, r8
 800a5f4:	e7e0      	b.n	800a5b8 <_strtod_l+0x8d8>
 800a5f6:	f7ff fb56 	bl	8009ca6 <sulp>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	ec51 0b18 	vmov	r0, r1, d8
 800a602:	f7f5 fe61 	bl	80002c8 <__aeabi_dsub>
 800a606:	2200      	movs	r2, #0
 800a608:	2300      	movs	r3, #0
 800a60a:	4680      	mov	r8, r0
 800a60c:	4689      	mov	r9, r1
 800a60e:	f7f6 fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 800a612:	2800      	cmp	r0, #0
 800a614:	d0c0      	beq.n	800a598 <_strtod_l+0x8b8>
 800a616:	e618      	b.n	800a24a <_strtod_l+0x56a>
 800a618:	fffffc02 	.word	0xfffffc02
 800a61c:	7ff00000 	.word	0x7ff00000
 800a620:	39500000 	.word	0x39500000
 800a624:	000fffff 	.word	0x000fffff
 800a628:	7fefffff 	.word	0x7fefffff
 800a62c:	0800be90 	.word	0x0800be90
 800a630:	4659      	mov	r1, fp
 800a632:	4628      	mov	r0, r5
 800a634:	f7ff fac0 	bl	8009bb8 <__ratio>
 800a638:	ec57 6b10 	vmov	r6, r7, d0
 800a63c:	ee10 0a10 	vmov	r0, s0
 800a640:	2200      	movs	r2, #0
 800a642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a646:	4639      	mov	r1, r7
 800a648:	f7f6 fa72 	bl	8000b30 <__aeabi_dcmple>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d071      	beq.n	800a734 <_strtod_l+0xa54>
 800a650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a652:	2b00      	cmp	r3, #0
 800a654:	d17c      	bne.n	800a750 <_strtod_l+0xa70>
 800a656:	f1b8 0f00 	cmp.w	r8, #0
 800a65a:	d15a      	bne.n	800a712 <_strtod_l+0xa32>
 800a65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a660:	2b00      	cmp	r3, #0
 800a662:	d15d      	bne.n	800a720 <_strtod_l+0xa40>
 800a664:	4b90      	ldr	r3, [pc, #576]	; (800a8a8 <_strtod_l+0xbc8>)
 800a666:	2200      	movs	r2, #0
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f6 fa56 	bl	8000b1c <__aeabi_dcmplt>
 800a670:	2800      	cmp	r0, #0
 800a672:	d15c      	bne.n	800a72e <_strtod_l+0xa4e>
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	4b8c      	ldr	r3, [pc, #560]	; (800a8ac <_strtod_l+0xbcc>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	f7f5 ffdc 	bl	8000638 <__aeabi_dmul>
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a688:	9606      	str	r6, [sp, #24]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a690:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a694:	4b86      	ldr	r3, [pc, #536]	; (800a8b0 <_strtod_l+0xbd0>)
 800a696:	ea0a 0303 	and.w	r3, sl, r3
 800a69a:	930d      	str	r3, [sp, #52]	; 0x34
 800a69c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a69e:	4b85      	ldr	r3, [pc, #532]	; (800a8b4 <_strtod_l+0xbd4>)
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	f040 8090 	bne.w	800a7c6 <_strtod_l+0xae6>
 800a6a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a6aa:	ec49 8b10 	vmov	d0, r8, r9
 800a6ae:	f7ff f9b9 	bl	8009a24 <__ulp>
 800a6b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6b6:	ec51 0b10 	vmov	r0, r1, d0
 800a6ba:	f7f5 ffbd 	bl	8000638 <__aeabi_dmul>
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	f7f5 fe03 	bl	80002cc <__adddf3>
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	4979      	ldr	r1, [pc, #484]	; (800a8b0 <_strtod_l+0xbd0>)
 800a6ca:	4a7b      	ldr	r2, [pc, #492]	; (800a8b8 <_strtod_l+0xbd8>)
 800a6cc:	4019      	ands	r1, r3
 800a6ce:	4291      	cmp	r1, r2
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	d944      	bls.n	800a75e <_strtod_l+0xa7e>
 800a6d4:	ee18 2a90 	vmov	r2, s17
 800a6d8:	4b78      	ldr	r3, [pc, #480]	; (800a8bc <_strtod_l+0xbdc>)
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d104      	bne.n	800a6e8 <_strtod_l+0xa08>
 800a6de:	ee18 3a10 	vmov	r3, s16
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	f43f ad40 	beq.w	800a168 <_strtod_l+0x488>
 800a6e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a8bc <_strtod_l+0xbdc>
 800a6ec:	f04f 38ff 	mov.w	r8, #4294967295
 800a6f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f7fe fe6a 	bl	80093cc <_Bfree>
 800a6f8:	9905      	ldr	r1, [sp, #20]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7fe fe66 	bl	80093cc <_Bfree>
 800a700:	4659      	mov	r1, fp
 800a702:	4620      	mov	r0, r4
 800a704:	f7fe fe62 	bl	80093cc <_Bfree>
 800a708:	4629      	mov	r1, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7fe fe5e 	bl	80093cc <_Bfree>
 800a710:	e609      	b.n	800a326 <_strtod_l+0x646>
 800a712:	f1b8 0f01 	cmp.w	r8, #1
 800a716:	d103      	bne.n	800a720 <_strtod_l+0xa40>
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	f43f ad95 	beq.w	800a24a <_strtod_l+0x56a>
 800a720:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a878 <_strtod_l+0xb98>
 800a724:	4f60      	ldr	r7, [pc, #384]	; (800a8a8 <_strtod_l+0xbc8>)
 800a726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a72a:	2600      	movs	r6, #0
 800a72c:	e7ae      	b.n	800a68c <_strtod_l+0x9ac>
 800a72e:	4f5f      	ldr	r7, [pc, #380]	; (800a8ac <_strtod_l+0xbcc>)
 800a730:	2600      	movs	r6, #0
 800a732:	e7a7      	b.n	800a684 <_strtod_l+0x9a4>
 800a734:	4b5d      	ldr	r3, [pc, #372]	; (800a8ac <_strtod_l+0xbcc>)
 800a736:	4630      	mov	r0, r6
 800a738:	4639      	mov	r1, r7
 800a73a:	2200      	movs	r2, #0
 800a73c:	f7f5 ff7c 	bl	8000638 <__aeabi_dmul>
 800a740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a742:	4606      	mov	r6, r0
 800a744:	460f      	mov	r7, r1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d09c      	beq.n	800a684 <_strtod_l+0x9a4>
 800a74a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a74e:	e79d      	b.n	800a68c <_strtod_l+0x9ac>
 800a750:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a880 <_strtod_l+0xba0>
 800a754:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a758:	ec57 6b17 	vmov	r6, r7, d7
 800a75c:	e796      	b.n	800a68c <_strtod_l+0x9ac>
 800a75e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	46ca      	mov	sl, r9
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1c2      	bne.n	800a6f0 <_strtod_l+0xa10>
 800a76a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a770:	0d1b      	lsrs	r3, r3, #20
 800a772:	051b      	lsls	r3, r3, #20
 800a774:	429a      	cmp	r2, r3
 800a776:	d1bb      	bne.n	800a6f0 <_strtod_l+0xa10>
 800a778:	4630      	mov	r0, r6
 800a77a:	4639      	mov	r1, r7
 800a77c:	f7f6 fabc 	bl	8000cf8 <__aeabi_d2lz>
 800a780:	f7f5 ff2c 	bl	80005dc <__aeabi_l2d>
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	4630      	mov	r0, r6
 800a78a:	4639      	mov	r1, r7
 800a78c:	f7f5 fd9c 	bl	80002c8 <__aeabi_dsub>
 800a790:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a792:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a796:	ea43 0308 	orr.w	r3, r3, r8
 800a79a:	4313      	orrs	r3, r2
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	d054      	beq.n	800a84c <_strtod_l+0xb6c>
 800a7a2:	a339      	add	r3, pc, #228	; (adr r3, 800a888 <_strtod_l+0xba8>)
 800a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a8:	f7f6 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f47f ace5 	bne.w	800a17c <_strtod_l+0x49c>
 800a7b2:	a337      	add	r3, pc, #220	; (adr r3, 800a890 <_strtod_l+0xbb0>)
 800a7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	f7f6 f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d095      	beq.n	800a6f0 <_strtod_l+0xa10>
 800a7c4:	e4da      	b.n	800a17c <_strtod_l+0x49c>
 800a7c6:	9b04      	ldr	r3, [sp, #16]
 800a7c8:	b333      	cbz	r3, 800a818 <_strtod_l+0xb38>
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7d0:	d822      	bhi.n	800a818 <_strtod_l+0xb38>
 800a7d2:	a331      	add	r3, pc, #196	; (adr r3, 800a898 <_strtod_l+0xbb8>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f9a8 	bl	8000b30 <__aeabi_dcmple>
 800a7e0:	b1a0      	cbz	r0, 800a80c <_strtod_l+0xb2c>
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f7f6 f9ff 	bl	8000be8 <__aeabi_d2uiz>
 800a7ea:	2801      	cmp	r0, #1
 800a7ec:	bf38      	it	cc
 800a7ee:	2001      	movcc	r0, #1
 800a7f0:	f7f5 fea8 	bl	8000544 <__aeabi_ui2d>
 800a7f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f6:	4606      	mov	r6, r0
 800a7f8:	460f      	mov	r7, r1
 800a7fa:	bb23      	cbnz	r3, 800a846 <_strtod_l+0xb66>
 800a7fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a800:	9010      	str	r0, [sp, #64]	; 0x40
 800a802:	9311      	str	r3, [sp, #68]	; 0x44
 800a804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a808:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a80c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a80e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a810:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	930f      	str	r3, [sp, #60]	; 0x3c
 800a818:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a81c:	eeb0 0a48 	vmov.f32	s0, s16
 800a820:	eef0 0a68 	vmov.f32	s1, s17
 800a824:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a828:	f7ff f8fc 	bl	8009a24 <__ulp>
 800a82c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a830:	ec53 2b10 	vmov	r2, r3, d0
 800a834:	f7f5 ff00 	bl	8000638 <__aeabi_dmul>
 800a838:	ec53 2b18 	vmov	r2, r3, d8
 800a83c:	f7f5 fd46 	bl	80002cc <__adddf3>
 800a840:	4680      	mov	r8, r0
 800a842:	4689      	mov	r9, r1
 800a844:	e78d      	b.n	800a762 <_strtod_l+0xa82>
 800a846:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a84a:	e7db      	b.n	800a804 <_strtod_l+0xb24>
 800a84c:	a314      	add	r3, pc, #80	; (adr r3, 800a8a0 <_strtod_l+0xbc0>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f6 f963 	bl	8000b1c <__aeabi_dcmplt>
 800a856:	e7b3      	b.n	800a7c0 <_strtod_l+0xae0>
 800a858:	2300      	movs	r3, #0
 800a85a:	930a      	str	r3, [sp, #40]	; 0x28
 800a85c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a85e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	f7ff ba7c 	b.w	8009d5e <_strtod_l+0x7e>
 800a866:	2a65      	cmp	r2, #101	; 0x65
 800a868:	f43f ab75 	beq.w	8009f56 <_strtod_l+0x276>
 800a86c:	2a45      	cmp	r2, #69	; 0x45
 800a86e:	f43f ab72 	beq.w	8009f56 <_strtod_l+0x276>
 800a872:	2301      	movs	r3, #1
 800a874:	f7ff bbaa 	b.w	8009fcc <_strtod_l+0x2ec>
 800a878:	00000000 	.word	0x00000000
 800a87c:	bff00000 	.word	0xbff00000
 800a880:	00000000 	.word	0x00000000
 800a884:	3ff00000 	.word	0x3ff00000
 800a888:	94a03595 	.word	0x94a03595
 800a88c:	3fdfffff 	.word	0x3fdfffff
 800a890:	35afe535 	.word	0x35afe535
 800a894:	3fe00000 	.word	0x3fe00000
 800a898:	ffc00000 	.word	0xffc00000
 800a89c:	41dfffff 	.word	0x41dfffff
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fcfffff 	.word	0x3fcfffff
 800a8a8:	3ff00000 	.word	0x3ff00000
 800a8ac:	3fe00000 	.word	0x3fe00000
 800a8b0:	7ff00000 	.word	0x7ff00000
 800a8b4:	7fe00000 	.word	0x7fe00000
 800a8b8:	7c9fffff 	.word	0x7c9fffff
 800a8bc:	7fefffff 	.word	0x7fefffff

0800a8c0 <_strtod_r>:
 800a8c0:	4b01      	ldr	r3, [pc, #4]	; (800a8c8 <_strtod_r+0x8>)
 800a8c2:	f7ff ba0d 	b.w	8009ce0 <_strtod_l>
 800a8c6:	bf00      	nop
 800a8c8:	2000006c 	.word	0x2000006c

0800a8cc <_strtol_l.constprop.0>:
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d2:	d001      	beq.n	800a8d8 <_strtol_l.constprop.0+0xc>
 800a8d4:	2b24      	cmp	r3, #36	; 0x24
 800a8d6:	d906      	bls.n	800a8e6 <_strtol_l.constprop.0+0x1a>
 800a8d8:	f7fd fd7e 	bl	80083d8 <__errno>
 800a8dc:	2316      	movs	r3, #22
 800a8de:	6003      	str	r3, [r0, #0]
 800a8e0:	2000      	movs	r0, #0
 800a8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a9cc <_strtol_l.constprop.0+0x100>
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	462e      	mov	r6, r5
 800a8ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a8f6:	f017 0708 	ands.w	r7, r7, #8
 800a8fa:	d1f7      	bne.n	800a8ec <_strtol_l.constprop.0+0x20>
 800a8fc:	2c2d      	cmp	r4, #45	; 0x2d
 800a8fe:	d132      	bne.n	800a966 <_strtol_l.constprop.0+0x9a>
 800a900:	782c      	ldrb	r4, [r5, #0]
 800a902:	2701      	movs	r7, #1
 800a904:	1cb5      	adds	r5, r6, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d05b      	beq.n	800a9c2 <_strtol_l.constprop.0+0xf6>
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d109      	bne.n	800a922 <_strtol_l.constprop.0+0x56>
 800a90e:	2c30      	cmp	r4, #48	; 0x30
 800a910:	d107      	bne.n	800a922 <_strtol_l.constprop.0+0x56>
 800a912:	782c      	ldrb	r4, [r5, #0]
 800a914:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a918:	2c58      	cmp	r4, #88	; 0x58
 800a91a:	d14d      	bne.n	800a9b8 <_strtol_l.constprop.0+0xec>
 800a91c:	786c      	ldrb	r4, [r5, #1]
 800a91e:	2310      	movs	r3, #16
 800a920:	3502      	adds	r5, #2
 800a922:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a926:	f108 38ff 	add.w	r8, r8, #4294967295
 800a92a:	f04f 0e00 	mov.w	lr, #0
 800a92e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a932:	4676      	mov	r6, lr
 800a934:	fb03 8a19 	mls	sl, r3, r9, r8
 800a938:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a93c:	f1bc 0f09 	cmp.w	ip, #9
 800a940:	d816      	bhi.n	800a970 <_strtol_l.constprop.0+0xa4>
 800a942:	4664      	mov	r4, ip
 800a944:	42a3      	cmp	r3, r4
 800a946:	dd24      	ble.n	800a992 <_strtol_l.constprop.0+0xc6>
 800a948:	f1be 3fff 	cmp.w	lr, #4294967295
 800a94c:	d008      	beq.n	800a960 <_strtol_l.constprop.0+0x94>
 800a94e:	45b1      	cmp	r9, r6
 800a950:	d31c      	bcc.n	800a98c <_strtol_l.constprop.0+0xc0>
 800a952:	d101      	bne.n	800a958 <_strtol_l.constprop.0+0x8c>
 800a954:	45a2      	cmp	sl, r4
 800a956:	db19      	blt.n	800a98c <_strtol_l.constprop.0+0xc0>
 800a958:	fb06 4603 	mla	r6, r6, r3, r4
 800a95c:	f04f 0e01 	mov.w	lr, #1
 800a960:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a964:	e7e8      	b.n	800a938 <_strtol_l.constprop.0+0x6c>
 800a966:	2c2b      	cmp	r4, #43	; 0x2b
 800a968:	bf04      	itt	eq
 800a96a:	782c      	ldrbeq	r4, [r5, #0]
 800a96c:	1cb5      	addeq	r5, r6, #2
 800a96e:	e7ca      	b.n	800a906 <_strtol_l.constprop.0+0x3a>
 800a970:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a974:	f1bc 0f19 	cmp.w	ip, #25
 800a978:	d801      	bhi.n	800a97e <_strtol_l.constprop.0+0xb2>
 800a97a:	3c37      	subs	r4, #55	; 0x37
 800a97c:	e7e2      	b.n	800a944 <_strtol_l.constprop.0+0x78>
 800a97e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a982:	f1bc 0f19 	cmp.w	ip, #25
 800a986:	d804      	bhi.n	800a992 <_strtol_l.constprop.0+0xc6>
 800a988:	3c57      	subs	r4, #87	; 0x57
 800a98a:	e7db      	b.n	800a944 <_strtol_l.constprop.0+0x78>
 800a98c:	f04f 3eff 	mov.w	lr, #4294967295
 800a990:	e7e6      	b.n	800a960 <_strtol_l.constprop.0+0x94>
 800a992:	f1be 3fff 	cmp.w	lr, #4294967295
 800a996:	d105      	bne.n	800a9a4 <_strtol_l.constprop.0+0xd8>
 800a998:	2322      	movs	r3, #34	; 0x22
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	4646      	mov	r6, r8
 800a99e:	b942      	cbnz	r2, 800a9b2 <_strtol_l.constprop.0+0xe6>
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	e79e      	b.n	800a8e2 <_strtol_l.constprop.0+0x16>
 800a9a4:	b107      	cbz	r7, 800a9a8 <_strtol_l.constprop.0+0xdc>
 800a9a6:	4276      	negs	r6, r6
 800a9a8:	2a00      	cmp	r2, #0
 800a9aa:	d0f9      	beq.n	800a9a0 <_strtol_l.constprop.0+0xd4>
 800a9ac:	f1be 0f00 	cmp.w	lr, #0
 800a9b0:	d000      	beq.n	800a9b4 <_strtol_l.constprop.0+0xe8>
 800a9b2:	1e69      	subs	r1, r5, #1
 800a9b4:	6011      	str	r1, [r2, #0]
 800a9b6:	e7f3      	b.n	800a9a0 <_strtol_l.constprop.0+0xd4>
 800a9b8:	2430      	movs	r4, #48	; 0x30
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1b1      	bne.n	800a922 <_strtol_l.constprop.0+0x56>
 800a9be:	2308      	movs	r3, #8
 800a9c0:	e7af      	b.n	800a922 <_strtol_l.constprop.0+0x56>
 800a9c2:	2c30      	cmp	r4, #48	; 0x30
 800a9c4:	d0a5      	beq.n	800a912 <_strtol_l.constprop.0+0x46>
 800a9c6:	230a      	movs	r3, #10
 800a9c8:	e7ab      	b.n	800a922 <_strtol_l.constprop.0+0x56>
 800a9ca:	bf00      	nop
 800a9cc:	0800beb9 	.word	0x0800beb9

0800a9d0 <_strtol_r>:
 800a9d0:	f7ff bf7c 	b.w	800a8cc <_strtol_l.constprop.0>

0800a9d4 <__ssputs_r>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	688e      	ldr	r6, [r1, #8]
 800a9da:	461f      	mov	r7, r3
 800a9dc:	42be      	cmp	r6, r7
 800a9de:	680b      	ldr	r3, [r1, #0]
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	4690      	mov	r8, r2
 800a9e6:	d82c      	bhi.n	800aa42 <__ssputs_r+0x6e>
 800a9e8:	898a      	ldrh	r2, [r1, #12]
 800a9ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9ee:	d026      	beq.n	800aa3e <__ssputs_r+0x6a>
 800a9f0:	6965      	ldr	r5, [r4, #20]
 800a9f2:	6909      	ldr	r1, [r1, #16]
 800a9f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9f8:	eba3 0901 	sub.w	r9, r3, r1
 800a9fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa00:	1c7b      	adds	r3, r7, #1
 800aa02:	444b      	add	r3, r9
 800aa04:	106d      	asrs	r5, r5, #1
 800aa06:	429d      	cmp	r5, r3
 800aa08:	bf38      	it	cc
 800aa0a:	461d      	movcc	r5, r3
 800aa0c:	0553      	lsls	r3, r2, #21
 800aa0e:	d527      	bpl.n	800aa60 <__ssputs_r+0x8c>
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7fe fc0f 	bl	8009234 <_malloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	b360      	cbz	r0, 800aa74 <__ssputs_r+0xa0>
 800aa1a:	6921      	ldr	r1, [r4, #16]
 800aa1c:	464a      	mov	r2, r9
 800aa1e:	f7fd fd07 	bl	8008430 <memcpy>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2c:	81a3      	strh	r3, [r4, #12]
 800aa2e:	6126      	str	r6, [r4, #16]
 800aa30:	6165      	str	r5, [r4, #20]
 800aa32:	444e      	add	r6, r9
 800aa34:	eba5 0509 	sub.w	r5, r5, r9
 800aa38:	6026      	str	r6, [r4, #0]
 800aa3a:	60a5      	str	r5, [r4, #8]
 800aa3c:	463e      	mov	r6, r7
 800aa3e:	42be      	cmp	r6, r7
 800aa40:	d900      	bls.n	800aa44 <__ssputs_r+0x70>
 800aa42:	463e      	mov	r6, r7
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	4632      	mov	r2, r6
 800aa48:	4641      	mov	r1, r8
 800aa4a:	f000 fb6f 	bl	800b12c <memmove>
 800aa4e:	68a3      	ldr	r3, [r4, #8]
 800aa50:	1b9b      	subs	r3, r3, r6
 800aa52:	60a3      	str	r3, [r4, #8]
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	4433      	add	r3, r6
 800aa58:	6023      	str	r3, [r4, #0]
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa60:	462a      	mov	r2, r5
 800aa62:	f000 ff66 	bl	800b932 <_realloc_r>
 800aa66:	4606      	mov	r6, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d1e0      	bne.n	800aa2e <__ssputs_r+0x5a>
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f7fe fb6c 	bl	800914c <_free_r>
 800aa74:	230c      	movs	r3, #12
 800aa76:	f8ca 3000 	str.w	r3, [sl]
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa80:	81a3      	strh	r3, [r4, #12]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	e7e9      	b.n	800aa5c <__ssputs_r+0x88>

0800aa88 <_svfiprintf_r>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	4698      	mov	r8, r3
 800aa8e:	898b      	ldrh	r3, [r1, #12]
 800aa90:	061b      	lsls	r3, r3, #24
 800aa92:	b09d      	sub	sp, #116	; 0x74
 800aa94:	4607      	mov	r7, r0
 800aa96:	460d      	mov	r5, r1
 800aa98:	4614      	mov	r4, r2
 800aa9a:	d50e      	bpl.n	800aaba <_svfiprintf_r+0x32>
 800aa9c:	690b      	ldr	r3, [r1, #16]
 800aa9e:	b963      	cbnz	r3, 800aaba <_svfiprintf_r+0x32>
 800aaa0:	2140      	movs	r1, #64	; 0x40
 800aaa2:	f7fe fbc7 	bl	8009234 <_malloc_r>
 800aaa6:	6028      	str	r0, [r5, #0]
 800aaa8:	6128      	str	r0, [r5, #16]
 800aaaa:	b920      	cbnz	r0, 800aab6 <_svfiprintf_r+0x2e>
 800aaac:	230c      	movs	r3, #12
 800aaae:	603b      	str	r3, [r7, #0]
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	e0d0      	b.n	800ac58 <_svfiprintf_r+0x1d0>
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	616b      	str	r3, [r5, #20]
 800aaba:	2300      	movs	r3, #0
 800aabc:	9309      	str	r3, [sp, #36]	; 0x24
 800aabe:	2320      	movs	r3, #32
 800aac0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aac4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aac8:	2330      	movs	r3, #48	; 0x30
 800aaca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac70 <_svfiprintf_r+0x1e8>
 800aace:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad2:	f04f 0901 	mov.w	r9, #1
 800aad6:	4623      	mov	r3, r4
 800aad8:	469a      	mov	sl, r3
 800aada:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aade:	b10a      	cbz	r2, 800aae4 <_svfiprintf_r+0x5c>
 800aae0:	2a25      	cmp	r2, #37	; 0x25
 800aae2:	d1f9      	bne.n	800aad8 <_svfiprintf_r+0x50>
 800aae4:	ebba 0b04 	subs.w	fp, sl, r4
 800aae8:	d00b      	beq.n	800ab02 <_svfiprintf_r+0x7a>
 800aaea:	465b      	mov	r3, fp
 800aaec:	4622      	mov	r2, r4
 800aaee:	4629      	mov	r1, r5
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f7ff ff6f 	bl	800a9d4 <__ssputs_r>
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	f000 80a9 	beq.w	800ac4e <_svfiprintf_r+0x1c6>
 800aafc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aafe:	445a      	add	r2, fp
 800ab00:	9209      	str	r2, [sp, #36]	; 0x24
 800ab02:	f89a 3000 	ldrb.w	r3, [sl]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 80a1 	beq.w	800ac4e <_svfiprintf_r+0x1c6>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab16:	f10a 0a01 	add.w	sl, sl, #1
 800ab1a:	9304      	str	r3, [sp, #16]
 800ab1c:	9307      	str	r3, [sp, #28]
 800ab1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab22:	931a      	str	r3, [sp, #104]	; 0x68
 800ab24:	4654      	mov	r4, sl
 800ab26:	2205      	movs	r2, #5
 800ab28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2c:	4850      	ldr	r0, [pc, #320]	; (800ac70 <_svfiprintf_r+0x1e8>)
 800ab2e:	f7f5 fb6f 	bl	8000210 <memchr>
 800ab32:	9a04      	ldr	r2, [sp, #16]
 800ab34:	b9d8      	cbnz	r0, 800ab6e <_svfiprintf_r+0xe6>
 800ab36:	06d0      	lsls	r0, r2, #27
 800ab38:	bf44      	itt	mi
 800ab3a:	2320      	movmi	r3, #32
 800ab3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab40:	0711      	lsls	r1, r2, #28
 800ab42:	bf44      	itt	mi
 800ab44:	232b      	movmi	r3, #43	; 0x2b
 800ab46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab50:	d015      	beq.n	800ab7e <_svfiprintf_r+0xf6>
 800ab52:	9a07      	ldr	r2, [sp, #28]
 800ab54:	4654      	mov	r4, sl
 800ab56:	2000      	movs	r0, #0
 800ab58:	f04f 0c0a 	mov.w	ip, #10
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab62:	3b30      	subs	r3, #48	; 0x30
 800ab64:	2b09      	cmp	r3, #9
 800ab66:	d94d      	bls.n	800ac04 <_svfiprintf_r+0x17c>
 800ab68:	b1b0      	cbz	r0, 800ab98 <_svfiprintf_r+0x110>
 800ab6a:	9207      	str	r2, [sp, #28]
 800ab6c:	e014      	b.n	800ab98 <_svfiprintf_r+0x110>
 800ab6e:	eba0 0308 	sub.w	r3, r0, r8
 800ab72:	fa09 f303 	lsl.w	r3, r9, r3
 800ab76:	4313      	orrs	r3, r2
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	46a2      	mov	sl, r4
 800ab7c:	e7d2      	b.n	800ab24 <_svfiprintf_r+0x9c>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	1d19      	adds	r1, r3, #4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	9103      	str	r1, [sp, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bfbb      	ittet	lt
 800ab8a:	425b      	neglt	r3, r3
 800ab8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab90:	9307      	strge	r3, [sp, #28]
 800ab92:	9307      	strlt	r3, [sp, #28]
 800ab94:	bfb8      	it	lt
 800ab96:	9204      	strlt	r2, [sp, #16]
 800ab98:	7823      	ldrb	r3, [r4, #0]
 800ab9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab9c:	d10c      	bne.n	800abb8 <_svfiprintf_r+0x130>
 800ab9e:	7863      	ldrb	r3, [r4, #1]
 800aba0:	2b2a      	cmp	r3, #42	; 0x2a
 800aba2:	d134      	bne.n	800ac0e <_svfiprintf_r+0x186>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	1d1a      	adds	r2, r3, #4
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	9203      	str	r2, [sp, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	bfb8      	it	lt
 800abb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800abb4:	3402      	adds	r4, #2
 800abb6:	9305      	str	r3, [sp, #20]
 800abb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac80 <_svfiprintf_r+0x1f8>
 800abbc:	7821      	ldrb	r1, [r4, #0]
 800abbe:	2203      	movs	r2, #3
 800abc0:	4650      	mov	r0, sl
 800abc2:	f7f5 fb25 	bl	8000210 <memchr>
 800abc6:	b138      	cbz	r0, 800abd8 <_svfiprintf_r+0x150>
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	eba0 000a 	sub.w	r0, r0, sl
 800abce:	2240      	movs	r2, #64	; 0x40
 800abd0:	4082      	lsls	r2, r0
 800abd2:	4313      	orrs	r3, r2
 800abd4:	3401      	adds	r4, #1
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abdc:	4825      	ldr	r0, [pc, #148]	; (800ac74 <_svfiprintf_r+0x1ec>)
 800abde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abe2:	2206      	movs	r2, #6
 800abe4:	f7f5 fb14 	bl	8000210 <memchr>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d038      	beq.n	800ac5e <_svfiprintf_r+0x1d6>
 800abec:	4b22      	ldr	r3, [pc, #136]	; (800ac78 <_svfiprintf_r+0x1f0>)
 800abee:	bb1b      	cbnz	r3, 800ac38 <_svfiprintf_r+0x1b0>
 800abf0:	9b03      	ldr	r3, [sp, #12]
 800abf2:	3307      	adds	r3, #7
 800abf4:	f023 0307 	bic.w	r3, r3, #7
 800abf8:	3308      	adds	r3, #8
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfe:	4433      	add	r3, r6
 800ac00:	9309      	str	r3, [sp, #36]	; 0x24
 800ac02:	e768      	b.n	800aad6 <_svfiprintf_r+0x4e>
 800ac04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac08:	460c      	mov	r4, r1
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	e7a6      	b.n	800ab5c <_svfiprintf_r+0xd4>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	3401      	adds	r4, #1
 800ac12:	9305      	str	r3, [sp, #20]
 800ac14:	4619      	mov	r1, r3
 800ac16:	f04f 0c0a 	mov.w	ip, #10
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac20:	3a30      	subs	r2, #48	; 0x30
 800ac22:	2a09      	cmp	r2, #9
 800ac24:	d903      	bls.n	800ac2e <_svfiprintf_r+0x1a6>
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0c6      	beq.n	800abb8 <_svfiprintf_r+0x130>
 800ac2a:	9105      	str	r1, [sp, #20]
 800ac2c:	e7c4      	b.n	800abb8 <_svfiprintf_r+0x130>
 800ac2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac32:	4604      	mov	r4, r0
 800ac34:	2301      	movs	r3, #1
 800ac36:	e7f0      	b.n	800ac1a <_svfiprintf_r+0x192>
 800ac38:	ab03      	add	r3, sp, #12
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <_svfiprintf_r+0x1f4>)
 800ac40:	a904      	add	r1, sp, #16
 800ac42:	4638      	mov	r0, r7
 800ac44:	f7fc fb56 	bl	80072f4 <_printf_float>
 800ac48:	1c42      	adds	r2, r0, #1
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	d1d6      	bne.n	800abfc <_svfiprintf_r+0x174>
 800ac4e:	89ab      	ldrh	r3, [r5, #12]
 800ac50:	065b      	lsls	r3, r3, #25
 800ac52:	f53f af2d 	bmi.w	800aab0 <_svfiprintf_r+0x28>
 800ac56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac58:	b01d      	add	sp, #116	; 0x74
 800ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5e:	ab03      	add	r3, sp, #12
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	462a      	mov	r2, r5
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <_svfiprintf_r+0x1f4>)
 800ac66:	a904      	add	r1, sp, #16
 800ac68:	4638      	mov	r0, r7
 800ac6a:	f7fc fde7 	bl	800783c <_printf_i>
 800ac6e:	e7eb      	b.n	800ac48 <_svfiprintf_r+0x1c0>
 800ac70:	0800bfb9 	.word	0x0800bfb9
 800ac74:	0800bfc3 	.word	0x0800bfc3
 800ac78:	080072f5 	.word	0x080072f5
 800ac7c:	0800a9d5 	.word	0x0800a9d5
 800ac80:	0800bfbf 	.word	0x0800bfbf

0800ac84 <__sfputc_r>:
 800ac84:	6893      	ldr	r3, [r2, #8]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	b410      	push	{r4}
 800ac8c:	6093      	str	r3, [r2, #8]
 800ac8e:	da08      	bge.n	800aca2 <__sfputc_r+0x1e>
 800ac90:	6994      	ldr	r4, [r2, #24]
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	db01      	blt.n	800ac9a <__sfputc_r+0x16>
 800ac96:	290a      	cmp	r1, #10
 800ac98:	d103      	bne.n	800aca2 <__sfputc_r+0x1e>
 800ac9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9e:	f7fd bab4 	b.w	800820a <__swbuf_r>
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	1c58      	adds	r0, r3, #1
 800aca6:	6010      	str	r0, [r2, #0]
 800aca8:	7019      	strb	r1, [r3, #0]
 800acaa:	4608      	mov	r0, r1
 800acac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <__sfputs_r>:
 800acb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb4:	4606      	mov	r6, r0
 800acb6:	460f      	mov	r7, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	18d5      	adds	r5, r2, r3
 800acbc:	42ac      	cmp	r4, r5
 800acbe:	d101      	bne.n	800acc4 <__sfputs_r+0x12>
 800acc0:	2000      	movs	r0, #0
 800acc2:	e007      	b.n	800acd4 <__sfputs_r+0x22>
 800acc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc8:	463a      	mov	r2, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ffda 	bl	800ac84 <__sfputc_r>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d1f3      	bne.n	800acbc <__sfputs_r+0xa>
 800acd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd8 <_vfiprintf_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	460d      	mov	r5, r1
 800acde:	b09d      	sub	sp, #116	; 0x74
 800ace0:	4614      	mov	r4, r2
 800ace2:	4698      	mov	r8, r3
 800ace4:	4606      	mov	r6, r0
 800ace6:	b118      	cbz	r0, 800acf0 <_vfiprintf_r+0x18>
 800ace8:	6a03      	ldr	r3, [r0, #32]
 800acea:	b90b      	cbnz	r3, 800acf0 <_vfiprintf_r+0x18>
 800acec:	f7fd f952 	bl	8007f94 <__sinit>
 800acf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acf2:	07d9      	lsls	r1, r3, #31
 800acf4:	d405      	bmi.n	800ad02 <_vfiprintf_r+0x2a>
 800acf6:	89ab      	ldrh	r3, [r5, #12]
 800acf8:	059a      	lsls	r2, r3, #22
 800acfa:	d402      	bmi.n	800ad02 <_vfiprintf_r+0x2a>
 800acfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acfe:	f7fd fb95 	bl	800842c <__retarget_lock_acquire_recursive>
 800ad02:	89ab      	ldrh	r3, [r5, #12]
 800ad04:	071b      	lsls	r3, r3, #28
 800ad06:	d501      	bpl.n	800ad0c <_vfiprintf_r+0x34>
 800ad08:	692b      	ldr	r3, [r5, #16]
 800ad0a:	b99b      	cbnz	r3, 800ad34 <_vfiprintf_r+0x5c>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7fd fab8 	bl	8008284 <__swsetup_r>
 800ad14:	b170      	cbz	r0, 800ad34 <_vfiprintf_r+0x5c>
 800ad16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad18:	07dc      	lsls	r4, r3, #31
 800ad1a:	d504      	bpl.n	800ad26 <_vfiprintf_r+0x4e>
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	b01d      	add	sp, #116	; 0x74
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	0598      	lsls	r0, r3, #22
 800ad2a:	d4f7      	bmi.n	800ad1c <_vfiprintf_r+0x44>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2e:	f7fd fb7e 	bl	800842e <__retarget_lock_release_recursive>
 800ad32:	e7f3      	b.n	800ad1c <_vfiprintf_r+0x44>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9309      	str	r3, [sp, #36]	; 0x24
 800ad38:	2320      	movs	r3, #32
 800ad3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad42:	2330      	movs	r3, #48	; 0x30
 800ad44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aef8 <_vfiprintf_r+0x220>
 800ad48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad4c:	f04f 0901 	mov.w	r9, #1
 800ad50:	4623      	mov	r3, r4
 800ad52:	469a      	mov	sl, r3
 800ad54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad58:	b10a      	cbz	r2, 800ad5e <_vfiprintf_r+0x86>
 800ad5a:	2a25      	cmp	r2, #37	; 0x25
 800ad5c:	d1f9      	bne.n	800ad52 <_vfiprintf_r+0x7a>
 800ad5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad62:	d00b      	beq.n	800ad7c <_vfiprintf_r+0xa4>
 800ad64:	465b      	mov	r3, fp
 800ad66:	4622      	mov	r2, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7ff ffa1 	bl	800acb2 <__sfputs_r>
 800ad70:	3001      	adds	r0, #1
 800ad72:	f000 80a9 	beq.w	800aec8 <_vfiprintf_r+0x1f0>
 800ad76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad78:	445a      	add	r2, fp
 800ad7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f000 80a1 	beq.w	800aec8 <_vfiprintf_r+0x1f0>
 800ad86:	2300      	movs	r3, #0
 800ad88:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	9304      	str	r3, [sp, #16]
 800ad96:	9307      	str	r3, [sp, #28]
 800ad98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad9e:	4654      	mov	r4, sl
 800ada0:	2205      	movs	r2, #5
 800ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada6:	4854      	ldr	r0, [pc, #336]	; (800aef8 <_vfiprintf_r+0x220>)
 800ada8:	f7f5 fa32 	bl	8000210 <memchr>
 800adac:	9a04      	ldr	r2, [sp, #16]
 800adae:	b9d8      	cbnz	r0, 800ade8 <_vfiprintf_r+0x110>
 800adb0:	06d1      	lsls	r1, r2, #27
 800adb2:	bf44      	itt	mi
 800adb4:	2320      	movmi	r3, #32
 800adb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adba:	0713      	lsls	r3, r2, #28
 800adbc:	bf44      	itt	mi
 800adbe:	232b      	movmi	r3, #43	; 0x2b
 800adc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adc4:	f89a 3000 	ldrb.w	r3, [sl]
 800adc8:	2b2a      	cmp	r3, #42	; 0x2a
 800adca:	d015      	beq.n	800adf8 <_vfiprintf_r+0x120>
 800adcc:	9a07      	ldr	r2, [sp, #28]
 800adce:	4654      	mov	r4, sl
 800add0:	2000      	movs	r0, #0
 800add2:	f04f 0c0a 	mov.w	ip, #10
 800add6:	4621      	mov	r1, r4
 800add8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800addc:	3b30      	subs	r3, #48	; 0x30
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d94d      	bls.n	800ae7e <_vfiprintf_r+0x1a6>
 800ade2:	b1b0      	cbz	r0, 800ae12 <_vfiprintf_r+0x13a>
 800ade4:	9207      	str	r2, [sp, #28]
 800ade6:	e014      	b.n	800ae12 <_vfiprintf_r+0x13a>
 800ade8:	eba0 0308 	sub.w	r3, r0, r8
 800adec:	fa09 f303 	lsl.w	r3, r9, r3
 800adf0:	4313      	orrs	r3, r2
 800adf2:	9304      	str	r3, [sp, #16]
 800adf4:	46a2      	mov	sl, r4
 800adf6:	e7d2      	b.n	800ad9e <_vfiprintf_r+0xc6>
 800adf8:	9b03      	ldr	r3, [sp, #12]
 800adfa:	1d19      	adds	r1, r3, #4
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	9103      	str	r1, [sp, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbb      	ittet	lt
 800ae04:	425b      	neglt	r3, r3
 800ae06:	f042 0202 	orrlt.w	r2, r2, #2
 800ae0a:	9307      	strge	r3, [sp, #28]
 800ae0c:	9307      	strlt	r3, [sp, #28]
 800ae0e:	bfb8      	it	lt
 800ae10:	9204      	strlt	r2, [sp, #16]
 800ae12:	7823      	ldrb	r3, [r4, #0]
 800ae14:	2b2e      	cmp	r3, #46	; 0x2e
 800ae16:	d10c      	bne.n	800ae32 <_vfiprintf_r+0x15a>
 800ae18:	7863      	ldrb	r3, [r4, #1]
 800ae1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae1c:	d134      	bne.n	800ae88 <_vfiprintf_r+0x1b0>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9203      	str	r2, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfb8      	it	lt
 800ae2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae2e:	3402      	adds	r4, #2
 800ae30:	9305      	str	r3, [sp, #20]
 800ae32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af08 <_vfiprintf_r+0x230>
 800ae36:	7821      	ldrb	r1, [r4, #0]
 800ae38:	2203      	movs	r2, #3
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	f7f5 f9e8 	bl	8000210 <memchr>
 800ae40:	b138      	cbz	r0, 800ae52 <_vfiprintf_r+0x17a>
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	eba0 000a 	sub.w	r0, r0, sl
 800ae48:	2240      	movs	r2, #64	; 0x40
 800ae4a:	4082      	lsls	r2, r0
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	3401      	adds	r4, #1
 800ae50:	9304      	str	r3, [sp, #16]
 800ae52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae56:	4829      	ldr	r0, [pc, #164]	; (800aefc <_vfiprintf_r+0x224>)
 800ae58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae5c:	2206      	movs	r2, #6
 800ae5e:	f7f5 f9d7 	bl	8000210 <memchr>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d03f      	beq.n	800aee6 <_vfiprintf_r+0x20e>
 800ae66:	4b26      	ldr	r3, [pc, #152]	; (800af00 <_vfiprintf_r+0x228>)
 800ae68:	bb1b      	cbnz	r3, 800aeb2 <_vfiprintf_r+0x1da>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	3307      	adds	r3, #7
 800ae6e:	f023 0307 	bic.w	r3, r3, #7
 800ae72:	3308      	adds	r3, #8
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae78:	443b      	add	r3, r7
 800ae7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7c:	e768      	b.n	800ad50 <_vfiprintf_r+0x78>
 800ae7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae82:	460c      	mov	r4, r1
 800ae84:	2001      	movs	r0, #1
 800ae86:	e7a6      	b.n	800add6 <_vfiprintf_r+0xfe>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	3401      	adds	r4, #1
 800ae8c:	9305      	str	r3, [sp, #20]
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f04f 0c0a 	mov.w	ip, #10
 800ae94:	4620      	mov	r0, r4
 800ae96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae9a:	3a30      	subs	r2, #48	; 0x30
 800ae9c:	2a09      	cmp	r2, #9
 800ae9e:	d903      	bls.n	800aea8 <_vfiprintf_r+0x1d0>
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d0c6      	beq.n	800ae32 <_vfiprintf_r+0x15a>
 800aea4:	9105      	str	r1, [sp, #20]
 800aea6:	e7c4      	b.n	800ae32 <_vfiprintf_r+0x15a>
 800aea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeac:	4604      	mov	r4, r0
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e7f0      	b.n	800ae94 <_vfiprintf_r+0x1bc>
 800aeb2:	ab03      	add	r3, sp, #12
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	462a      	mov	r2, r5
 800aeb8:	4b12      	ldr	r3, [pc, #72]	; (800af04 <_vfiprintf_r+0x22c>)
 800aeba:	a904      	add	r1, sp, #16
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7fc fa19 	bl	80072f4 <_printf_float>
 800aec2:	4607      	mov	r7, r0
 800aec4:	1c78      	adds	r0, r7, #1
 800aec6:	d1d6      	bne.n	800ae76 <_vfiprintf_r+0x19e>
 800aec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeca:	07d9      	lsls	r1, r3, #31
 800aecc:	d405      	bmi.n	800aeda <_vfiprintf_r+0x202>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	059a      	lsls	r2, r3, #22
 800aed2:	d402      	bmi.n	800aeda <_vfiprintf_r+0x202>
 800aed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed6:	f7fd faaa 	bl	800842e <__retarget_lock_release_recursive>
 800aeda:	89ab      	ldrh	r3, [r5, #12]
 800aedc:	065b      	lsls	r3, r3, #25
 800aede:	f53f af1d 	bmi.w	800ad1c <_vfiprintf_r+0x44>
 800aee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aee4:	e71c      	b.n	800ad20 <_vfiprintf_r+0x48>
 800aee6:	ab03      	add	r3, sp, #12
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	462a      	mov	r2, r5
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <_vfiprintf_r+0x22c>)
 800aeee:	a904      	add	r1, sp, #16
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7fc fca3 	bl	800783c <_printf_i>
 800aef6:	e7e4      	b.n	800aec2 <_vfiprintf_r+0x1ea>
 800aef8:	0800bfb9 	.word	0x0800bfb9
 800aefc:	0800bfc3 	.word	0x0800bfc3
 800af00:	080072f5 	.word	0x080072f5
 800af04:	0800acb3 	.word	0x0800acb3
 800af08:	0800bfbf 	.word	0x0800bfbf

0800af0c <__sflush_r>:
 800af0c:	898a      	ldrh	r2, [r1, #12]
 800af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af12:	4605      	mov	r5, r0
 800af14:	0710      	lsls	r0, r2, #28
 800af16:	460c      	mov	r4, r1
 800af18:	d458      	bmi.n	800afcc <__sflush_r+0xc0>
 800af1a:	684b      	ldr	r3, [r1, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dc05      	bgt.n	800af2c <__sflush_r+0x20>
 800af20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af22:	2b00      	cmp	r3, #0
 800af24:	dc02      	bgt.n	800af2c <__sflush_r+0x20>
 800af26:	2000      	movs	r0, #0
 800af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af2e:	2e00      	cmp	r6, #0
 800af30:	d0f9      	beq.n	800af26 <__sflush_r+0x1a>
 800af32:	2300      	movs	r3, #0
 800af34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af38:	682f      	ldr	r7, [r5, #0]
 800af3a:	6a21      	ldr	r1, [r4, #32]
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	d032      	beq.n	800afa6 <__sflush_r+0x9a>
 800af40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	075a      	lsls	r2, r3, #29
 800af46:	d505      	bpl.n	800af54 <__sflush_r+0x48>
 800af48:	6863      	ldr	r3, [r4, #4]
 800af4a:	1ac0      	subs	r0, r0, r3
 800af4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af4e:	b10b      	cbz	r3, 800af54 <__sflush_r+0x48>
 800af50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af52:	1ac0      	subs	r0, r0, r3
 800af54:	2300      	movs	r3, #0
 800af56:	4602      	mov	r2, r0
 800af58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af5a:	6a21      	ldr	r1, [r4, #32]
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b0      	blx	r6
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	d106      	bne.n	800af74 <__sflush_r+0x68>
 800af66:	6829      	ldr	r1, [r5, #0]
 800af68:	291d      	cmp	r1, #29
 800af6a:	d82b      	bhi.n	800afc4 <__sflush_r+0xb8>
 800af6c:	4a29      	ldr	r2, [pc, #164]	; (800b014 <__sflush_r+0x108>)
 800af6e:	410a      	asrs	r2, r1
 800af70:	07d6      	lsls	r6, r2, #31
 800af72:	d427      	bmi.n	800afc4 <__sflush_r+0xb8>
 800af74:	2200      	movs	r2, #0
 800af76:	6062      	str	r2, [r4, #4]
 800af78:	04d9      	lsls	r1, r3, #19
 800af7a:	6922      	ldr	r2, [r4, #16]
 800af7c:	6022      	str	r2, [r4, #0]
 800af7e:	d504      	bpl.n	800af8a <__sflush_r+0x7e>
 800af80:	1c42      	adds	r2, r0, #1
 800af82:	d101      	bne.n	800af88 <__sflush_r+0x7c>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b903      	cbnz	r3, 800af8a <__sflush_r+0x7e>
 800af88:	6560      	str	r0, [r4, #84]	; 0x54
 800af8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af8c:	602f      	str	r7, [r5, #0]
 800af8e:	2900      	cmp	r1, #0
 800af90:	d0c9      	beq.n	800af26 <__sflush_r+0x1a>
 800af92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af96:	4299      	cmp	r1, r3
 800af98:	d002      	beq.n	800afa0 <__sflush_r+0x94>
 800af9a:	4628      	mov	r0, r5
 800af9c:	f7fe f8d6 	bl	800914c <_free_r>
 800afa0:	2000      	movs	r0, #0
 800afa2:	6360      	str	r0, [r4, #52]	; 0x34
 800afa4:	e7c0      	b.n	800af28 <__sflush_r+0x1c>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4628      	mov	r0, r5
 800afaa:	47b0      	blx	r6
 800afac:	1c41      	adds	r1, r0, #1
 800afae:	d1c8      	bne.n	800af42 <__sflush_r+0x36>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0c5      	beq.n	800af42 <__sflush_r+0x36>
 800afb6:	2b1d      	cmp	r3, #29
 800afb8:	d001      	beq.n	800afbe <__sflush_r+0xb2>
 800afba:	2b16      	cmp	r3, #22
 800afbc:	d101      	bne.n	800afc2 <__sflush_r+0xb6>
 800afbe:	602f      	str	r7, [r5, #0]
 800afc0:	e7b1      	b.n	800af26 <__sflush_r+0x1a>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	e7ad      	b.n	800af28 <__sflush_r+0x1c>
 800afcc:	690f      	ldr	r7, [r1, #16]
 800afce:	2f00      	cmp	r7, #0
 800afd0:	d0a9      	beq.n	800af26 <__sflush_r+0x1a>
 800afd2:	0793      	lsls	r3, r2, #30
 800afd4:	680e      	ldr	r6, [r1, #0]
 800afd6:	bf08      	it	eq
 800afd8:	694b      	ldreq	r3, [r1, #20]
 800afda:	600f      	str	r7, [r1, #0]
 800afdc:	bf18      	it	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	eba6 0807 	sub.w	r8, r6, r7
 800afe4:	608b      	str	r3, [r1, #8]
 800afe6:	f1b8 0f00 	cmp.w	r8, #0
 800afea:	dd9c      	ble.n	800af26 <__sflush_r+0x1a>
 800afec:	6a21      	ldr	r1, [r4, #32]
 800afee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aff0:	4643      	mov	r3, r8
 800aff2:	463a      	mov	r2, r7
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	2800      	cmp	r0, #0
 800affa:	dc06      	bgt.n	800b00a <__sflush_r+0xfe>
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	e78e      	b.n	800af28 <__sflush_r+0x1c>
 800b00a:	4407      	add	r7, r0
 800b00c:	eba8 0800 	sub.w	r8, r8, r0
 800b010:	e7e9      	b.n	800afe6 <__sflush_r+0xda>
 800b012:	bf00      	nop
 800b014:	dfbffffe 	.word	0xdfbffffe

0800b018 <_fflush_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	690b      	ldr	r3, [r1, #16]
 800b01c:	4605      	mov	r5, r0
 800b01e:	460c      	mov	r4, r1
 800b020:	b913      	cbnz	r3, 800b028 <_fflush_r+0x10>
 800b022:	2500      	movs	r5, #0
 800b024:	4628      	mov	r0, r5
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	b118      	cbz	r0, 800b032 <_fflush_r+0x1a>
 800b02a:	6a03      	ldr	r3, [r0, #32]
 800b02c:	b90b      	cbnz	r3, 800b032 <_fflush_r+0x1a>
 800b02e:	f7fc ffb1 	bl	8007f94 <__sinit>
 800b032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0f3      	beq.n	800b022 <_fflush_r+0xa>
 800b03a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b03c:	07d0      	lsls	r0, r2, #31
 800b03e:	d404      	bmi.n	800b04a <_fflush_r+0x32>
 800b040:	0599      	lsls	r1, r3, #22
 800b042:	d402      	bmi.n	800b04a <_fflush_r+0x32>
 800b044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b046:	f7fd f9f1 	bl	800842c <__retarget_lock_acquire_recursive>
 800b04a:	4628      	mov	r0, r5
 800b04c:	4621      	mov	r1, r4
 800b04e:	f7ff ff5d 	bl	800af0c <__sflush_r>
 800b052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b054:	07da      	lsls	r2, r3, #31
 800b056:	4605      	mov	r5, r0
 800b058:	d4e4      	bmi.n	800b024 <_fflush_r+0xc>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	059b      	lsls	r3, r3, #22
 800b05e:	d4e1      	bmi.n	800b024 <_fflush_r+0xc>
 800b060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b062:	f7fd f9e4 	bl	800842e <__retarget_lock_release_recursive>
 800b066:	e7dd      	b.n	800b024 <_fflush_r+0xc>

0800b068 <__swhatbuf_r>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	460c      	mov	r4, r1
 800b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b070:	2900      	cmp	r1, #0
 800b072:	b096      	sub	sp, #88	; 0x58
 800b074:	4615      	mov	r5, r2
 800b076:	461e      	mov	r6, r3
 800b078:	da0d      	bge.n	800b096 <__swhatbuf_r+0x2e>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	bf0c      	ite	eq
 800b086:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b08a:	2340      	movne	r3, #64	; 0x40
 800b08c:	2000      	movs	r0, #0
 800b08e:	6031      	str	r1, [r6, #0]
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	b016      	add	sp, #88	; 0x58
 800b094:	bd70      	pop	{r4, r5, r6, pc}
 800b096:	466a      	mov	r2, sp
 800b098:	f000 f874 	bl	800b184 <_fstat_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	dbec      	blt.n	800b07a <__swhatbuf_r+0x12>
 800b0a0:	9901      	ldr	r1, [sp, #4]
 800b0a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b0a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b0aa:	4259      	negs	r1, r3
 800b0ac:	4159      	adcs	r1, r3
 800b0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0b2:	e7eb      	b.n	800b08c <__swhatbuf_r+0x24>

0800b0b4 <__smakebuf_r>:
 800b0b4:	898b      	ldrh	r3, [r1, #12]
 800b0b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0b8:	079d      	lsls	r5, r3, #30
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460c      	mov	r4, r1
 800b0be:	d507      	bpl.n	800b0d0 <__smakebuf_r+0x1c>
 800b0c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	6163      	str	r3, [r4, #20]
 800b0cc:	b002      	add	sp, #8
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}
 800b0d0:	ab01      	add	r3, sp, #4
 800b0d2:	466a      	mov	r2, sp
 800b0d4:	f7ff ffc8 	bl	800b068 <__swhatbuf_r>
 800b0d8:	9900      	ldr	r1, [sp, #0]
 800b0da:	4605      	mov	r5, r0
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f7fe f8a9 	bl	8009234 <_malloc_r>
 800b0e2:	b948      	cbnz	r0, 800b0f8 <__smakebuf_r+0x44>
 800b0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e8:	059a      	lsls	r2, r3, #22
 800b0ea:	d4ef      	bmi.n	800b0cc <__smakebuf_r+0x18>
 800b0ec:	f023 0303 	bic.w	r3, r3, #3
 800b0f0:	f043 0302 	orr.w	r3, r3, #2
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	e7e3      	b.n	800b0c0 <__smakebuf_r+0xc>
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	6020      	str	r0, [r4, #0]
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	6163      	str	r3, [r4, #20]
 800b106:	9b01      	ldr	r3, [sp, #4]
 800b108:	6120      	str	r0, [r4, #16]
 800b10a:	b15b      	cbz	r3, 800b124 <__smakebuf_r+0x70>
 800b10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b110:	4630      	mov	r0, r6
 800b112:	f000 f849 	bl	800b1a8 <_isatty_r>
 800b116:	b128      	cbz	r0, 800b124 <__smakebuf_r+0x70>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f023 0303 	bic.w	r3, r3, #3
 800b11e:	f043 0301 	orr.w	r3, r3, #1
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	431d      	orrs	r5, r3
 800b128:	81a5      	strh	r5, [r4, #12]
 800b12a:	e7cf      	b.n	800b0cc <__smakebuf_r+0x18>

0800b12c <memmove>:
 800b12c:	4288      	cmp	r0, r1
 800b12e:	b510      	push	{r4, lr}
 800b130:	eb01 0402 	add.w	r4, r1, r2
 800b134:	d902      	bls.n	800b13c <memmove+0x10>
 800b136:	4284      	cmp	r4, r0
 800b138:	4623      	mov	r3, r4
 800b13a:	d807      	bhi.n	800b14c <memmove+0x20>
 800b13c:	1e43      	subs	r3, r0, #1
 800b13e:	42a1      	cmp	r1, r4
 800b140:	d008      	beq.n	800b154 <memmove+0x28>
 800b142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b14a:	e7f8      	b.n	800b13e <memmove+0x12>
 800b14c:	4402      	add	r2, r0
 800b14e:	4601      	mov	r1, r0
 800b150:	428a      	cmp	r2, r1
 800b152:	d100      	bne.n	800b156 <memmove+0x2a>
 800b154:	bd10      	pop	{r4, pc}
 800b156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b15e:	e7f7      	b.n	800b150 <memmove+0x24>

0800b160 <strncmp>:
 800b160:	b510      	push	{r4, lr}
 800b162:	b16a      	cbz	r2, 800b180 <strncmp+0x20>
 800b164:	3901      	subs	r1, #1
 800b166:	1884      	adds	r4, r0, r2
 800b168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b170:	429a      	cmp	r2, r3
 800b172:	d103      	bne.n	800b17c <strncmp+0x1c>
 800b174:	42a0      	cmp	r0, r4
 800b176:	d001      	beq.n	800b17c <strncmp+0x1c>
 800b178:	2a00      	cmp	r2, #0
 800b17a:	d1f5      	bne.n	800b168 <strncmp+0x8>
 800b17c:	1ad0      	subs	r0, r2, r3
 800b17e:	bd10      	pop	{r4, pc}
 800b180:	4610      	mov	r0, r2
 800b182:	e7fc      	b.n	800b17e <strncmp+0x1e>

0800b184 <_fstat_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d07      	ldr	r5, [pc, #28]	; (800b1a4 <_fstat_r+0x20>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	602b      	str	r3, [r5, #0]
 800b192:	f7f6 fd12 	bl	8001bba <_fstat>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d102      	bne.n	800b1a0 <_fstat_r+0x1c>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	b103      	cbz	r3, 800b1a0 <_fstat_r+0x1c>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	200074bc 	.word	0x200074bc

0800b1a8 <_isatty_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d06      	ldr	r5, [pc, #24]	; (800b1c4 <_isatty_r+0x1c>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7f6 fd11 	bl	8001bda <_isatty>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_isatty_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_isatty_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	200074bc 	.word	0x200074bc

0800b1c8 <_sbrk_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d06      	ldr	r5, [pc, #24]	; (800b1e4 <_sbrk_r+0x1c>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f6 fd1a 	bl	8001c0c <_sbrk>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_sbrk_r+0x1a>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_sbrk_r+0x1a>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	200074bc 	.word	0x200074bc

0800b1e8 <nan>:
 800b1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b1f0 <nan+0x8>
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	00000000 	.word	0x00000000
 800b1f4:	7ff80000 	.word	0x7ff80000

0800b1f8 <__assert_func>:
 800b1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4b09      	ldr	r3, [pc, #36]	; (800b224 <__assert_func+0x2c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4605      	mov	r5, r0
 800b204:	68d8      	ldr	r0, [r3, #12]
 800b206:	b14c      	cbz	r4, 800b21c <__assert_func+0x24>
 800b208:	4b07      	ldr	r3, [pc, #28]	; (800b228 <__assert_func+0x30>)
 800b20a:	9100      	str	r1, [sp, #0]
 800b20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b210:	4906      	ldr	r1, [pc, #24]	; (800b22c <__assert_func+0x34>)
 800b212:	462b      	mov	r3, r5
 800b214:	f000 fbca 	bl	800b9ac <fiprintf>
 800b218:	f000 fbda 	bl	800b9d0 <abort>
 800b21c:	4b04      	ldr	r3, [pc, #16]	; (800b230 <__assert_func+0x38>)
 800b21e:	461c      	mov	r4, r3
 800b220:	e7f3      	b.n	800b20a <__assert_func+0x12>
 800b222:	bf00      	nop
 800b224:	20000068 	.word	0x20000068
 800b228:	0800bfd2 	.word	0x0800bfd2
 800b22c:	0800bfdf 	.word	0x0800bfdf
 800b230:	0800c00d 	.word	0x0800c00d

0800b234 <_calloc_r>:
 800b234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b236:	fba1 2402 	umull	r2, r4, r1, r2
 800b23a:	b94c      	cbnz	r4, 800b250 <_calloc_r+0x1c>
 800b23c:	4611      	mov	r1, r2
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	f7fd fff8 	bl	8009234 <_malloc_r>
 800b244:	9a01      	ldr	r2, [sp, #4]
 800b246:	4605      	mov	r5, r0
 800b248:	b930      	cbnz	r0, 800b258 <_calloc_r+0x24>
 800b24a:	4628      	mov	r0, r5
 800b24c:	b003      	add	sp, #12
 800b24e:	bd30      	pop	{r4, r5, pc}
 800b250:	220c      	movs	r2, #12
 800b252:	6002      	str	r2, [r0, #0]
 800b254:	2500      	movs	r5, #0
 800b256:	e7f8      	b.n	800b24a <_calloc_r+0x16>
 800b258:	4621      	mov	r1, r4
 800b25a:	f7fd f86b 	bl	8008334 <memset>
 800b25e:	e7f4      	b.n	800b24a <_calloc_r+0x16>

0800b260 <rshift>:
 800b260:	6903      	ldr	r3, [r0, #16]
 800b262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b26a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b26e:	f100 0414 	add.w	r4, r0, #20
 800b272:	dd45      	ble.n	800b300 <rshift+0xa0>
 800b274:	f011 011f 	ands.w	r1, r1, #31
 800b278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b27c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b280:	d10c      	bne.n	800b29c <rshift+0x3c>
 800b282:	f100 0710 	add.w	r7, r0, #16
 800b286:	4629      	mov	r1, r5
 800b288:	42b1      	cmp	r1, r6
 800b28a:	d334      	bcc.n	800b2f6 <rshift+0x96>
 800b28c:	1a9b      	subs	r3, r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	1eea      	subs	r2, r5, #3
 800b292:	4296      	cmp	r6, r2
 800b294:	bf38      	it	cc
 800b296:	2300      	movcc	r3, #0
 800b298:	4423      	add	r3, r4
 800b29a:	e015      	b.n	800b2c8 <rshift+0x68>
 800b29c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2a0:	f1c1 0820 	rsb	r8, r1, #32
 800b2a4:	40cf      	lsrs	r7, r1
 800b2a6:	f105 0e04 	add.w	lr, r5, #4
 800b2aa:	46a1      	mov	r9, r4
 800b2ac:	4576      	cmp	r6, lr
 800b2ae:	46f4      	mov	ip, lr
 800b2b0:	d815      	bhi.n	800b2de <rshift+0x7e>
 800b2b2:	1a9a      	subs	r2, r3, r2
 800b2b4:	0092      	lsls	r2, r2, #2
 800b2b6:	3a04      	subs	r2, #4
 800b2b8:	3501      	adds	r5, #1
 800b2ba:	42ae      	cmp	r6, r5
 800b2bc:	bf38      	it	cc
 800b2be:	2200      	movcc	r2, #0
 800b2c0:	18a3      	adds	r3, r4, r2
 800b2c2:	50a7      	str	r7, [r4, r2]
 800b2c4:	b107      	cbz	r7, 800b2c8 <rshift+0x68>
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	1b1a      	subs	r2, r3, r4
 800b2ca:	42a3      	cmp	r3, r4
 800b2cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2d0:	bf08      	it	eq
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	6102      	str	r2, [r0, #16]
 800b2d6:	bf08      	it	eq
 800b2d8:	6143      	streq	r3, [r0, #20]
 800b2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2de:	f8dc c000 	ldr.w	ip, [ip]
 800b2e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2e6:	ea4c 0707 	orr.w	r7, ip, r7
 800b2ea:	f849 7b04 	str.w	r7, [r9], #4
 800b2ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2f2:	40cf      	lsrs	r7, r1
 800b2f4:	e7da      	b.n	800b2ac <rshift+0x4c>
 800b2f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2fe:	e7c3      	b.n	800b288 <rshift+0x28>
 800b300:	4623      	mov	r3, r4
 800b302:	e7e1      	b.n	800b2c8 <rshift+0x68>

0800b304 <__hexdig_fun>:
 800b304:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b308:	2b09      	cmp	r3, #9
 800b30a:	d802      	bhi.n	800b312 <__hexdig_fun+0xe>
 800b30c:	3820      	subs	r0, #32
 800b30e:	b2c0      	uxtb	r0, r0
 800b310:	4770      	bx	lr
 800b312:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b316:	2b05      	cmp	r3, #5
 800b318:	d801      	bhi.n	800b31e <__hexdig_fun+0x1a>
 800b31a:	3847      	subs	r0, #71	; 0x47
 800b31c:	e7f7      	b.n	800b30e <__hexdig_fun+0xa>
 800b31e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b322:	2b05      	cmp	r3, #5
 800b324:	d801      	bhi.n	800b32a <__hexdig_fun+0x26>
 800b326:	3827      	subs	r0, #39	; 0x27
 800b328:	e7f1      	b.n	800b30e <__hexdig_fun+0xa>
 800b32a:	2000      	movs	r0, #0
 800b32c:	4770      	bx	lr
	...

0800b330 <__gethex>:
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	4617      	mov	r7, r2
 800b336:	680a      	ldr	r2, [r1, #0]
 800b338:	b085      	sub	sp, #20
 800b33a:	f102 0b02 	add.w	fp, r2, #2
 800b33e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b342:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b346:	4681      	mov	r9, r0
 800b348:	468a      	mov	sl, r1
 800b34a:	9302      	str	r3, [sp, #8]
 800b34c:	32fe      	adds	r2, #254	; 0xfe
 800b34e:	eb02 030b 	add.w	r3, r2, fp
 800b352:	46d8      	mov	r8, fp
 800b354:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	2830      	cmp	r0, #48	; 0x30
 800b35c:	d0f7      	beq.n	800b34e <__gethex+0x1e>
 800b35e:	f7ff ffd1 	bl	800b304 <__hexdig_fun>
 800b362:	4604      	mov	r4, r0
 800b364:	2800      	cmp	r0, #0
 800b366:	d138      	bne.n	800b3da <__gethex+0xaa>
 800b368:	49a7      	ldr	r1, [pc, #668]	; (800b608 <__gethex+0x2d8>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	4640      	mov	r0, r8
 800b36e:	f7ff fef7 	bl	800b160 <strncmp>
 800b372:	4606      	mov	r6, r0
 800b374:	2800      	cmp	r0, #0
 800b376:	d169      	bne.n	800b44c <__gethex+0x11c>
 800b378:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b37c:	465d      	mov	r5, fp
 800b37e:	f7ff ffc1 	bl	800b304 <__hexdig_fun>
 800b382:	2800      	cmp	r0, #0
 800b384:	d064      	beq.n	800b450 <__gethex+0x120>
 800b386:	465a      	mov	r2, fp
 800b388:	7810      	ldrb	r0, [r2, #0]
 800b38a:	2830      	cmp	r0, #48	; 0x30
 800b38c:	4690      	mov	r8, r2
 800b38e:	f102 0201 	add.w	r2, r2, #1
 800b392:	d0f9      	beq.n	800b388 <__gethex+0x58>
 800b394:	f7ff ffb6 	bl	800b304 <__hexdig_fun>
 800b398:	2301      	movs	r3, #1
 800b39a:	fab0 f480 	clz	r4, r0
 800b39e:	0964      	lsrs	r4, r4, #5
 800b3a0:	465e      	mov	r6, fp
 800b3a2:	9301      	str	r3, [sp, #4]
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	4615      	mov	r5, r2
 800b3a8:	3201      	adds	r2, #1
 800b3aa:	7828      	ldrb	r0, [r5, #0]
 800b3ac:	f7ff ffaa 	bl	800b304 <__hexdig_fun>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	d1f8      	bne.n	800b3a6 <__gethex+0x76>
 800b3b4:	4994      	ldr	r1, [pc, #592]	; (800b608 <__gethex+0x2d8>)
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f7ff fed1 	bl	800b160 <strncmp>
 800b3be:	b978      	cbnz	r0, 800b3e0 <__gethex+0xb0>
 800b3c0:	b946      	cbnz	r6, 800b3d4 <__gethex+0xa4>
 800b3c2:	1c6e      	adds	r6, r5, #1
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	4615      	mov	r5, r2
 800b3c8:	3201      	adds	r2, #1
 800b3ca:	7828      	ldrb	r0, [r5, #0]
 800b3cc:	f7ff ff9a 	bl	800b304 <__hexdig_fun>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d1f8      	bne.n	800b3c6 <__gethex+0x96>
 800b3d4:	1b73      	subs	r3, r6, r5
 800b3d6:	009e      	lsls	r6, r3, #2
 800b3d8:	e004      	b.n	800b3e4 <__gethex+0xb4>
 800b3da:	2400      	movs	r4, #0
 800b3dc:	4626      	mov	r6, r4
 800b3de:	e7e1      	b.n	800b3a4 <__gethex+0x74>
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	d1f7      	bne.n	800b3d4 <__gethex+0xa4>
 800b3e4:	782b      	ldrb	r3, [r5, #0]
 800b3e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3ea:	2b50      	cmp	r3, #80	; 0x50
 800b3ec:	d13d      	bne.n	800b46a <__gethex+0x13a>
 800b3ee:	786b      	ldrb	r3, [r5, #1]
 800b3f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b3f2:	d02f      	beq.n	800b454 <__gethex+0x124>
 800b3f4:	2b2d      	cmp	r3, #45	; 0x2d
 800b3f6:	d031      	beq.n	800b45c <__gethex+0x12c>
 800b3f8:	1c69      	adds	r1, r5, #1
 800b3fa:	f04f 0b00 	mov.w	fp, #0
 800b3fe:	7808      	ldrb	r0, [r1, #0]
 800b400:	f7ff ff80 	bl	800b304 <__hexdig_fun>
 800b404:	1e42      	subs	r2, r0, #1
 800b406:	b2d2      	uxtb	r2, r2
 800b408:	2a18      	cmp	r2, #24
 800b40a:	d82e      	bhi.n	800b46a <__gethex+0x13a>
 800b40c:	f1a0 0210 	sub.w	r2, r0, #16
 800b410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b414:	f7ff ff76 	bl	800b304 <__hexdig_fun>
 800b418:	f100 3cff 	add.w	ip, r0, #4294967295
 800b41c:	fa5f fc8c 	uxtb.w	ip, ip
 800b420:	f1bc 0f18 	cmp.w	ip, #24
 800b424:	d91d      	bls.n	800b462 <__gethex+0x132>
 800b426:	f1bb 0f00 	cmp.w	fp, #0
 800b42a:	d000      	beq.n	800b42e <__gethex+0xfe>
 800b42c:	4252      	negs	r2, r2
 800b42e:	4416      	add	r6, r2
 800b430:	f8ca 1000 	str.w	r1, [sl]
 800b434:	b1dc      	cbz	r4, 800b46e <__gethex+0x13e>
 800b436:	9b01      	ldr	r3, [sp, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bf14      	ite	ne
 800b43c:	f04f 0800 	movne.w	r8, #0
 800b440:	f04f 0806 	moveq.w	r8, #6
 800b444:	4640      	mov	r0, r8
 800b446:	b005      	add	sp, #20
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	4645      	mov	r5, r8
 800b44e:	4626      	mov	r6, r4
 800b450:	2401      	movs	r4, #1
 800b452:	e7c7      	b.n	800b3e4 <__gethex+0xb4>
 800b454:	f04f 0b00 	mov.w	fp, #0
 800b458:	1ca9      	adds	r1, r5, #2
 800b45a:	e7d0      	b.n	800b3fe <__gethex+0xce>
 800b45c:	f04f 0b01 	mov.w	fp, #1
 800b460:	e7fa      	b.n	800b458 <__gethex+0x128>
 800b462:	230a      	movs	r3, #10
 800b464:	fb03 0002 	mla	r0, r3, r2, r0
 800b468:	e7d0      	b.n	800b40c <__gethex+0xdc>
 800b46a:	4629      	mov	r1, r5
 800b46c:	e7e0      	b.n	800b430 <__gethex+0x100>
 800b46e:	eba5 0308 	sub.w	r3, r5, r8
 800b472:	3b01      	subs	r3, #1
 800b474:	4621      	mov	r1, r4
 800b476:	2b07      	cmp	r3, #7
 800b478:	dc0a      	bgt.n	800b490 <__gethex+0x160>
 800b47a:	4648      	mov	r0, r9
 800b47c:	f7fd ff66 	bl	800934c <_Balloc>
 800b480:	4604      	mov	r4, r0
 800b482:	b940      	cbnz	r0, 800b496 <__gethex+0x166>
 800b484:	4b61      	ldr	r3, [pc, #388]	; (800b60c <__gethex+0x2dc>)
 800b486:	4602      	mov	r2, r0
 800b488:	21e4      	movs	r1, #228	; 0xe4
 800b48a:	4861      	ldr	r0, [pc, #388]	; (800b610 <__gethex+0x2e0>)
 800b48c:	f7ff feb4 	bl	800b1f8 <__assert_func>
 800b490:	3101      	adds	r1, #1
 800b492:	105b      	asrs	r3, r3, #1
 800b494:	e7ef      	b.n	800b476 <__gethex+0x146>
 800b496:	f100 0a14 	add.w	sl, r0, #20
 800b49a:	2300      	movs	r3, #0
 800b49c:	495a      	ldr	r1, [pc, #360]	; (800b608 <__gethex+0x2d8>)
 800b49e:	f8cd a004 	str.w	sl, [sp, #4]
 800b4a2:	469b      	mov	fp, r3
 800b4a4:	45a8      	cmp	r8, r5
 800b4a6:	d342      	bcc.n	800b52e <__gethex+0x1fe>
 800b4a8:	9801      	ldr	r0, [sp, #4]
 800b4aa:	f840 bb04 	str.w	fp, [r0], #4
 800b4ae:	eba0 000a 	sub.w	r0, r0, sl
 800b4b2:	1080      	asrs	r0, r0, #2
 800b4b4:	6120      	str	r0, [r4, #16]
 800b4b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b4ba:	4658      	mov	r0, fp
 800b4bc:	f7fe f838 	bl	8009530 <__hi0bits>
 800b4c0:	683d      	ldr	r5, [r7, #0]
 800b4c2:	eba8 0000 	sub.w	r0, r8, r0
 800b4c6:	42a8      	cmp	r0, r5
 800b4c8:	dd59      	ble.n	800b57e <__gethex+0x24e>
 800b4ca:	eba0 0805 	sub.w	r8, r0, r5
 800b4ce:	4641      	mov	r1, r8
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7fe fbc7 	bl	8009c64 <__any_on>
 800b4d6:	4683      	mov	fp, r0
 800b4d8:	b1b8      	cbz	r0, 800b50a <__gethex+0x1da>
 800b4da:	f108 33ff 	add.w	r3, r8, #4294967295
 800b4de:	1159      	asrs	r1, r3, #5
 800b4e0:	f003 021f 	and.w	r2, r3, #31
 800b4e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4e8:	f04f 0b01 	mov.w	fp, #1
 800b4ec:	fa0b f202 	lsl.w	r2, fp, r2
 800b4f0:	420a      	tst	r2, r1
 800b4f2:	d00a      	beq.n	800b50a <__gethex+0x1da>
 800b4f4:	455b      	cmp	r3, fp
 800b4f6:	dd06      	ble.n	800b506 <__gethex+0x1d6>
 800b4f8:	f1a8 0102 	sub.w	r1, r8, #2
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f7fe fbb1 	bl	8009c64 <__any_on>
 800b502:	2800      	cmp	r0, #0
 800b504:	d138      	bne.n	800b578 <__gethex+0x248>
 800b506:	f04f 0b02 	mov.w	fp, #2
 800b50a:	4641      	mov	r1, r8
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7ff fea7 	bl	800b260 <rshift>
 800b512:	4446      	add	r6, r8
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	42b3      	cmp	r3, r6
 800b518:	da41      	bge.n	800b59e <__gethex+0x26e>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4648      	mov	r0, r9
 800b51e:	f7fd ff55 	bl	80093cc <_Bfree>
 800b522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b524:	2300      	movs	r3, #0
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b52c:	e78a      	b.n	800b444 <__gethex+0x114>
 800b52e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b532:	2a2e      	cmp	r2, #46	; 0x2e
 800b534:	d014      	beq.n	800b560 <__gethex+0x230>
 800b536:	2b20      	cmp	r3, #32
 800b538:	d106      	bne.n	800b548 <__gethex+0x218>
 800b53a:	9b01      	ldr	r3, [sp, #4]
 800b53c:	f843 bb04 	str.w	fp, [r3], #4
 800b540:	f04f 0b00 	mov.w	fp, #0
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	465b      	mov	r3, fp
 800b548:	7828      	ldrb	r0, [r5, #0]
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	f7ff feda 	bl	800b304 <__hexdig_fun>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	f000 000f 	and.w	r0, r0, #15
 800b556:	4098      	lsls	r0, r3
 800b558:	ea4b 0b00 	orr.w	fp, fp, r0
 800b55c:	3304      	adds	r3, #4
 800b55e:	e7a1      	b.n	800b4a4 <__gethex+0x174>
 800b560:	45a8      	cmp	r8, r5
 800b562:	d8e8      	bhi.n	800b536 <__gethex+0x206>
 800b564:	2201      	movs	r2, #1
 800b566:	4628      	mov	r0, r5
 800b568:	9303      	str	r3, [sp, #12]
 800b56a:	f7ff fdf9 	bl	800b160 <strncmp>
 800b56e:	4926      	ldr	r1, [pc, #152]	; (800b608 <__gethex+0x2d8>)
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	2800      	cmp	r0, #0
 800b574:	d1df      	bne.n	800b536 <__gethex+0x206>
 800b576:	e795      	b.n	800b4a4 <__gethex+0x174>
 800b578:	f04f 0b03 	mov.w	fp, #3
 800b57c:	e7c5      	b.n	800b50a <__gethex+0x1da>
 800b57e:	da0b      	bge.n	800b598 <__gethex+0x268>
 800b580:	eba5 0800 	sub.w	r8, r5, r0
 800b584:	4621      	mov	r1, r4
 800b586:	4642      	mov	r2, r8
 800b588:	4648      	mov	r0, r9
 800b58a:	f7fe f939 	bl	8009800 <__lshift>
 800b58e:	eba6 0608 	sub.w	r6, r6, r8
 800b592:	4604      	mov	r4, r0
 800b594:	f100 0a14 	add.w	sl, r0, #20
 800b598:	f04f 0b00 	mov.w	fp, #0
 800b59c:	e7ba      	b.n	800b514 <__gethex+0x1e4>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	42b3      	cmp	r3, r6
 800b5a2:	dd73      	ble.n	800b68c <__gethex+0x35c>
 800b5a4:	1b9e      	subs	r6, r3, r6
 800b5a6:	42b5      	cmp	r5, r6
 800b5a8:	dc34      	bgt.n	800b614 <__gethex+0x2e4>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d023      	beq.n	800b5f8 <__gethex+0x2c8>
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d025      	beq.n	800b600 <__gethex+0x2d0>
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d115      	bne.n	800b5e4 <__gethex+0x2b4>
 800b5b8:	42b5      	cmp	r5, r6
 800b5ba:	d113      	bne.n	800b5e4 <__gethex+0x2b4>
 800b5bc:	2d01      	cmp	r5, #1
 800b5be:	d10b      	bne.n	800b5d8 <__gethex+0x2a8>
 800b5c0:	9a02      	ldr	r2, [sp, #8]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	f8ca 3000 	str.w	r3, [sl]
 800b5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b5d4:	601c      	str	r4, [r3, #0]
 800b5d6:	e735      	b.n	800b444 <__gethex+0x114>
 800b5d8:	1e69      	subs	r1, r5, #1
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f7fe fb42 	bl	8009c64 <__any_on>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	d1ed      	bne.n	800b5c0 <__gethex+0x290>
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	4648      	mov	r0, r9
 800b5e8:	f7fd fef0 	bl	80093cc <_Bfree>
 800b5ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b5f6:	e725      	b.n	800b444 <__gethex+0x114>
 800b5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1f2      	bne.n	800b5e4 <__gethex+0x2b4>
 800b5fe:	e7df      	b.n	800b5c0 <__gethex+0x290>
 800b600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1dc      	bne.n	800b5c0 <__gethex+0x290>
 800b606:	e7ed      	b.n	800b5e4 <__gethex+0x2b4>
 800b608:	0800be64 	.word	0x0800be64
 800b60c:	0800bcf9 	.word	0x0800bcf9
 800b610:	0800c00e 	.word	0x0800c00e
 800b614:	f106 38ff 	add.w	r8, r6, #4294967295
 800b618:	f1bb 0f00 	cmp.w	fp, #0
 800b61c:	d133      	bne.n	800b686 <__gethex+0x356>
 800b61e:	f1b8 0f00 	cmp.w	r8, #0
 800b622:	d004      	beq.n	800b62e <__gethex+0x2fe>
 800b624:	4641      	mov	r1, r8
 800b626:	4620      	mov	r0, r4
 800b628:	f7fe fb1c 	bl	8009c64 <__any_on>
 800b62c:	4683      	mov	fp, r0
 800b62e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b632:	2301      	movs	r3, #1
 800b634:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b638:	f008 081f 	and.w	r8, r8, #31
 800b63c:	fa03 f308 	lsl.w	r3, r3, r8
 800b640:	4213      	tst	r3, r2
 800b642:	4631      	mov	r1, r6
 800b644:	4620      	mov	r0, r4
 800b646:	bf18      	it	ne
 800b648:	f04b 0b02 	orrne.w	fp, fp, #2
 800b64c:	1bad      	subs	r5, r5, r6
 800b64e:	f7ff fe07 	bl	800b260 <rshift>
 800b652:	687e      	ldr	r6, [r7, #4]
 800b654:	f04f 0802 	mov.w	r8, #2
 800b658:	f1bb 0f00 	cmp.w	fp, #0
 800b65c:	d04a      	beq.n	800b6f4 <__gethex+0x3c4>
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b02      	cmp	r3, #2
 800b662:	d016      	beq.n	800b692 <__gethex+0x362>
 800b664:	2b03      	cmp	r3, #3
 800b666:	d018      	beq.n	800b69a <__gethex+0x36a>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d109      	bne.n	800b680 <__gethex+0x350>
 800b66c:	f01b 0f02 	tst.w	fp, #2
 800b670:	d006      	beq.n	800b680 <__gethex+0x350>
 800b672:	f8da 3000 	ldr.w	r3, [sl]
 800b676:	ea4b 0b03 	orr.w	fp, fp, r3
 800b67a:	f01b 0f01 	tst.w	fp, #1
 800b67e:	d10f      	bne.n	800b6a0 <__gethex+0x370>
 800b680:	f048 0810 	orr.w	r8, r8, #16
 800b684:	e036      	b.n	800b6f4 <__gethex+0x3c4>
 800b686:	f04f 0b01 	mov.w	fp, #1
 800b68a:	e7d0      	b.n	800b62e <__gethex+0x2fe>
 800b68c:	f04f 0801 	mov.w	r8, #1
 800b690:	e7e2      	b.n	800b658 <__gethex+0x328>
 800b692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b694:	f1c3 0301 	rsb	r3, r3, #1
 800b698:	930f      	str	r3, [sp, #60]	; 0x3c
 800b69a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0ef      	beq.n	800b680 <__gethex+0x350>
 800b6a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b6a4:	f104 0214 	add.w	r2, r4, #20
 800b6a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4694      	mov	ip, r2
 800b6b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800b6ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b6be:	d01e      	beq.n	800b6fe <__gethex+0x3ce>
 800b6c0:	3101      	adds	r1, #1
 800b6c2:	f8cc 1000 	str.w	r1, [ip]
 800b6c6:	f1b8 0f02 	cmp.w	r8, #2
 800b6ca:	f104 0214 	add.w	r2, r4, #20
 800b6ce:	d13d      	bne.n	800b74c <__gethex+0x41c>
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	d10b      	bne.n	800b6f0 <__gethex+0x3c0>
 800b6d8:	1169      	asrs	r1, r5, #5
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f005 051f 	and.w	r5, r5, #31
 800b6e0:	fa03 f505 	lsl.w	r5, r3, r5
 800b6e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6e8:	421d      	tst	r5, r3
 800b6ea:	bf18      	it	ne
 800b6ec:	f04f 0801 	movne.w	r8, #1
 800b6f0:	f048 0820 	orr.w	r8, r8, #32
 800b6f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6f6:	601c      	str	r4, [r3, #0]
 800b6f8:	9b02      	ldr	r3, [sp, #8]
 800b6fa:	601e      	str	r6, [r3, #0]
 800b6fc:	e6a2      	b.n	800b444 <__gethex+0x114>
 800b6fe:	4290      	cmp	r0, r2
 800b700:	f842 3c04 	str.w	r3, [r2, #-4]
 800b704:	d8d6      	bhi.n	800b6b4 <__gethex+0x384>
 800b706:	68a2      	ldr	r2, [r4, #8]
 800b708:	4593      	cmp	fp, r2
 800b70a:	db17      	blt.n	800b73c <__gethex+0x40c>
 800b70c:	6861      	ldr	r1, [r4, #4]
 800b70e:	4648      	mov	r0, r9
 800b710:	3101      	adds	r1, #1
 800b712:	f7fd fe1b 	bl	800934c <_Balloc>
 800b716:	4682      	mov	sl, r0
 800b718:	b918      	cbnz	r0, 800b722 <__gethex+0x3f2>
 800b71a:	4b1b      	ldr	r3, [pc, #108]	; (800b788 <__gethex+0x458>)
 800b71c:	4602      	mov	r2, r0
 800b71e:	2184      	movs	r1, #132	; 0x84
 800b720:	e6b3      	b.n	800b48a <__gethex+0x15a>
 800b722:	6922      	ldr	r2, [r4, #16]
 800b724:	3202      	adds	r2, #2
 800b726:	f104 010c 	add.w	r1, r4, #12
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	300c      	adds	r0, #12
 800b72e:	f7fc fe7f 	bl	8008430 <memcpy>
 800b732:	4621      	mov	r1, r4
 800b734:	4648      	mov	r0, r9
 800b736:	f7fd fe49 	bl	80093cc <_Bfree>
 800b73a:	4654      	mov	r4, sl
 800b73c:	6922      	ldr	r2, [r4, #16]
 800b73e:	1c51      	adds	r1, r2, #1
 800b740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b744:	6121      	str	r1, [r4, #16]
 800b746:	2101      	movs	r1, #1
 800b748:	6151      	str	r1, [r2, #20]
 800b74a:	e7bc      	b.n	800b6c6 <__gethex+0x396>
 800b74c:	6921      	ldr	r1, [r4, #16]
 800b74e:	4559      	cmp	r1, fp
 800b750:	dd0b      	ble.n	800b76a <__gethex+0x43a>
 800b752:	2101      	movs	r1, #1
 800b754:	4620      	mov	r0, r4
 800b756:	f7ff fd83 	bl	800b260 <rshift>
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	3601      	adds	r6, #1
 800b75e:	42b3      	cmp	r3, r6
 800b760:	f6ff aedb 	blt.w	800b51a <__gethex+0x1ea>
 800b764:	f04f 0801 	mov.w	r8, #1
 800b768:	e7c2      	b.n	800b6f0 <__gethex+0x3c0>
 800b76a:	f015 051f 	ands.w	r5, r5, #31
 800b76e:	d0f9      	beq.n	800b764 <__gethex+0x434>
 800b770:	9b01      	ldr	r3, [sp, #4]
 800b772:	441a      	add	r2, r3
 800b774:	f1c5 0520 	rsb	r5, r5, #32
 800b778:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b77c:	f7fd fed8 	bl	8009530 <__hi0bits>
 800b780:	42a8      	cmp	r0, r5
 800b782:	dbe6      	blt.n	800b752 <__gethex+0x422>
 800b784:	e7ee      	b.n	800b764 <__gethex+0x434>
 800b786:	bf00      	nop
 800b788:	0800bcf9 	.word	0x0800bcf9

0800b78c <L_shift>:
 800b78c:	f1c2 0208 	rsb	r2, r2, #8
 800b790:	0092      	lsls	r2, r2, #2
 800b792:	b570      	push	{r4, r5, r6, lr}
 800b794:	f1c2 0620 	rsb	r6, r2, #32
 800b798:	6843      	ldr	r3, [r0, #4]
 800b79a:	6804      	ldr	r4, [r0, #0]
 800b79c:	fa03 f506 	lsl.w	r5, r3, r6
 800b7a0:	432c      	orrs	r4, r5
 800b7a2:	40d3      	lsrs	r3, r2
 800b7a4:	6004      	str	r4, [r0, #0]
 800b7a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b7aa:	4288      	cmp	r0, r1
 800b7ac:	d3f4      	bcc.n	800b798 <L_shift+0xc>
 800b7ae:	bd70      	pop	{r4, r5, r6, pc}

0800b7b0 <__match>:
 800b7b0:	b530      	push	{r4, r5, lr}
 800b7b2:	6803      	ldr	r3, [r0, #0]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ba:	b914      	cbnz	r4, 800b7c2 <__match+0x12>
 800b7bc:	6003      	str	r3, [r0, #0]
 800b7be:	2001      	movs	r0, #1
 800b7c0:	bd30      	pop	{r4, r5, pc}
 800b7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b7ca:	2d19      	cmp	r5, #25
 800b7cc:	bf98      	it	ls
 800b7ce:	3220      	addls	r2, #32
 800b7d0:	42a2      	cmp	r2, r4
 800b7d2:	d0f0      	beq.n	800b7b6 <__match+0x6>
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e7f3      	b.n	800b7c0 <__match+0x10>

0800b7d8 <__hexnan>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	680b      	ldr	r3, [r1, #0]
 800b7de:	6801      	ldr	r1, [r0, #0]
 800b7e0:	115e      	asrs	r6, r3, #5
 800b7e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7e6:	f013 031f 	ands.w	r3, r3, #31
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	bf18      	it	ne
 800b7ee:	3604      	addne	r6, #4
 800b7f0:	2500      	movs	r5, #0
 800b7f2:	1f37      	subs	r7, r6, #4
 800b7f4:	4682      	mov	sl, r0
 800b7f6:	4690      	mov	r8, r2
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7fe:	46b9      	mov	r9, r7
 800b800:	463c      	mov	r4, r7
 800b802:	9502      	str	r5, [sp, #8]
 800b804:	46ab      	mov	fp, r5
 800b806:	784a      	ldrb	r2, [r1, #1]
 800b808:	1c4b      	adds	r3, r1, #1
 800b80a:	9303      	str	r3, [sp, #12]
 800b80c:	b342      	cbz	r2, 800b860 <__hexnan+0x88>
 800b80e:	4610      	mov	r0, r2
 800b810:	9105      	str	r1, [sp, #20]
 800b812:	9204      	str	r2, [sp, #16]
 800b814:	f7ff fd76 	bl	800b304 <__hexdig_fun>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d14f      	bne.n	800b8bc <__hexnan+0xe4>
 800b81c:	9a04      	ldr	r2, [sp, #16]
 800b81e:	9905      	ldr	r1, [sp, #20]
 800b820:	2a20      	cmp	r2, #32
 800b822:	d818      	bhi.n	800b856 <__hexnan+0x7e>
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	459b      	cmp	fp, r3
 800b828:	dd13      	ble.n	800b852 <__hexnan+0x7a>
 800b82a:	454c      	cmp	r4, r9
 800b82c:	d206      	bcs.n	800b83c <__hexnan+0x64>
 800b82e:	2d07      	cmp	r5, #7
 800b830:	dc04      	bgt.n	800b83c <__hexnan+0x64>
 800b832:	462a      	mov	r2, r5
 800b834:	4649      	mov	r1, r9
 800b836:	4620      	mov	r0, r4
 800b838:	f7ff ffa8 	bl	800b78c <L_shift>
 800b83c:	4544      	cmp	r4, r8
 800b83e:	d950      	bls.n	800b8e2 <__hexnan+0x10a>
 800b840:	2300      	movs	r3, #0
 800b842:	f1a4 0904 	sub.w	r9, r4, #4
 800b846:	f844 3c04 	str.w	r3, [r4, #-4]
 800b84a:	f8cd b008 	str.w	fp, [sp, #8]
 800b84e:	464c      	mov	r4, r9
 800b850:	461d      	mov	r5, r3
 800b852:	9903      	ldr	r1, [sp, #12]
 800b854:	e7d7      	b.n	800b806 <__hexnan+0x2e>
 800b856:	2a29      	cmp	r2, #41	; 0x29
 800b858:	d155      	bne.n	800b906 <__hexnan+0x12e>
 800b85a:	3102      	adds	r1, #2
 800b85c:	f8ca 1000 	str.w	r1, [sl]
 800b860:	f1bb 0f00 	cmp.w	fp, #0
 800b864:	d04f      	beq.n	800b906 <__hexnan+0x12e>
 800b866:	454c      	cmp	r4, r9
 800b868:	d206      	bcs.n	800b878 <__hexnan+0xa0>
 800b86a:	2d07      	cmp	r5, #7
 800b86c:	dc04      	bgt.n	800b878 <__hexnan+0xa0>
 800b86e:	462a      	mov	r2, r5
 800b870:	4649      	mov	r1, r9
 800b872:	4620      	mov	r0, r4
 800b874:	f7ff ff8a 	bl	800b78c <L_shift>
 800b878:	4544      	cmp	r4, r8
 800b87a:	d934      	bls.n	800b8e6 <__hexnan+0x10e>
 800b87c:	f1a8 0204 	sub.w	r2, r8, #4
 800b880:	4623      	mov	r3, r4
 800b882:	f853 1b04 	ldr.w	r1, [r3], #4
 800b886:	f842 1f04 	str.w	r1, [r2, #4]!
 800b88a:	429f      	cmp	r7, r3
 800b88c:	d2f9      	bcs.n	800b882 <__hexnan+0xaa>
 800b88e:	1b3b      	subs	r3, r7, r4
 800b890:	f023 0303 	bic.w	r3, r3, #3
 800b894:	3304      	adds	r3, #4
 800b896:	3e03      	subs	r6, #3
 800b898:	3401      	adds	r4, #1
 800b89a:	42a6      	cmp	r6, r4
 800b89c:	bf38      	it	cc
 800b89e:	2304      	movcc	r3, #4
 800b8a0:	4443      	add	r3, r8
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f843 2b04 	str.w	r2, [r3], #4
 800b8a8:	429f      	cmp	r7, r3
 800b8aa:	d2fb      	bcs.n	800b8a4 <__hexnan+0xcc>
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	b91b      	cbnz	r3, 800b8b8 <__hexnan+0xe0>
 800b8b0:	4547      	cmp	r7, r8
 800b8b2:	d126      	bne.n	800b902 <__hexnan+0x12a>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	2005      	movs	r0, #5
 800b8ba:	e025      	b.n	800b908 <__hexnan+0x130>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	2d08      	cmp	r5, #8
 800b8c0:	f10b 0b01 	add.w	fp, fp, #1
 800b8c4:	dd06      	ble.n	800b8d4 <__hexnan+0xfc>
 800b8c6:	4544      	cmp	r4, r8
 800b8c8:	d9c3      	bls.n	800b852 <__hexnan+0x7a>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8d0:	2501      	movs	r5, #1
 800b8d2:	3c04      	subs	r4, #4
 800b8d4:	6822      	ldr	r2, [r4, #0]
 800b8d6:	f000 000f 	and.w	r0, r0, #15
 800b8da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8de:	6020      	str	r0, [r4, #0]
 800b8e0:	e7b7      	b.n	800b852 <__hexnan+0x7a>
 800b8e2:	2508      	movs	r5, #8
 800b8e4:	e7b5      	b.n	800b852 <__hexnan+0x7a>
 800b8e6:	9b01      	ldr	r3, [sp, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0df      	beq.n	800b8ac <__hexnan+0xd4>
 800b8ec:	f1c3 0320 	rsb	r3, r3, #32
 800b8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f4:	40da      	lsrs	r2, r3
 800b8f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800b900:	e7d4      	b.n	800b8ac <__hexnan+0xd4>
 800b902:	3f04      	subs	r7, #4
 800b904:	e7d2      	b.n	800b8ac <__hexnan+0xd4>
 800b906:	2004      	movs	r0, #4
 800b908:	b007      	add	sp, #28
 800b90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b90e <__ascii_mbtowc>:
 800b90e:	b082      	sub	sp, #8
 800b910:	b901      	cbnz	r1, 800b914 <__ascii_mbtowc+0x6>
 800b912:	a901      	add	r1, sp, #4
 800b914:	b142      	cbz	r2, 800b928 <__ascii_mbtowc+0x1a>
 800b916:	b14b      	cbz	r3, 800b92c <__ascii_mbtowc+0x1e>
 800b918:	7813      	ldrb	r3, [r2, #0]
 800b91a:	600b      	str	r3, [r1, #0]
 800b91c:	7812      	ldrb	r2, [r2, #0]
 800b91e:	1e10      	subs	r0, r2, #0
 800b920:	bf18      	it	ne
 800b922:	2001      	movne	r0, #1
 800b924:	b002      	add	sp, #8
 800b926:	4770      	bx	lr
 800b928:	4610      	mov	r0, r2
 800b92a:	e7fb      	b.n	800b924 <__ascii_mbtowc+0x16>
 800b92c:	f06f 0001 	mvn.w	r0, #1
 800b930:	e7f8      	b.n	800b924 <__ascii_mbtowc+0x16>

0800b932 <_realloc_r>:
 800b932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b936:	4680      	mov	r8, r0
 800b938:	4614      	mov	r4, r2
 800b93a:	460e      	mov	r6, r1
 800b93c:	b921      	cbnz	r1, 800b948 <_realloc_r+0x16>
 800b93e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b942:	4611      	mov	r1, r2
 800b944:	f7fd bc76 	b.w	8009234 <_malloc_r>
 800b948:	b92a      	cbnz	r2, 800b956 <_realloc_r+0x24>
 800b94a:	f7fd fbff 	bl	800914c <_free_r>
 800b94e:	4625      	mov	r5, r4
 800b950:	4628      	mov	r0, r5
 800b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b956:	f000 f842 	bl	800b9de <_malloc_usable_size_r>
 800b95a:	4284      	cmp	r4, r0
 800b95c:	4607      	mov	r7, r0
 800b95e:	d802      	bhi.n	800b966 <_realloc_r+0x34>
 800b960:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b964:	d812      	bhi.n	800b98c <_realloc_r+0x5a>
 800b966:	4621      	mov	r1, r4
 800b968:	4640      	mov	r0, r8
 800b96a:	f7fd fc63 	bl	8009234 <_malloc_r>
 800b96e:	4605      	mov	r5, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	d0ed      	beq.n	800b950 <_realloc_r+0x1e>
 800b974:	42bc      	cmp	r4, r7
 800b976:	4622      	mov	r2, r4
 800b978:	4631      	mov	r1, r6
 800b97a:	bf28      	it	cs
 800b97c:	463a      	movcs	r2, r7
 800b97e:	f7fc fd57 	bl	8008430 <memcpy>
 800b982:	4631      	mov	r1, r6
 800b984:	4640      	mov	r0, r8
 800b986:	f7fd fbe1 	bl	800914c <_free_r>
 800b98a:	e7e1      	b.n	800b950 <_realloc_r+0x1e>
 800b98c:	4635      	mov	r5, r6
 800b98e:	e7df      	b.n	800b950 <_realloc_r+0x1e>

0800b990 <__ascii_wctomb>:
 800b990:	b149      	cbz	r1, 800b9a6 <__ascii_wctomb+0x16>
 800b992:	2aff      	cmp	r2, #255	; 0xff
 800b994:	bf85      	ittet	hi
 800b996:	238a      	movhi	r3, #138	; 0x8a
 800b998:	6003      	strhi	r3, [r0, #0]
 800b99a:	700a      	strbls	r2, [r1, #0]
 800b99c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9a0:	bf98      	it	ls
 800b9a2:	2001      	movls	r0, #1
 800b9a4:	4770      	bx	lr
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4770      	bx	lr
	...

0800b9ac <fiprintf>:
 800b9ac:	b40e      	push	{r1, r2, r3}
 800b9ae:	b503      	push	{r0, r1, lr}
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	ab03      	add	r3, sp, #12
 800b9b4:	4805      	ldr	r0, [pc, #20]	; (800b9cc <fiprintf+0x20>)
 800b9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ba:	6800      	ldr	r0, [r0, #0]
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	f7ff f98b 	bl	800acd8 <_vfiprintf_r>
 800b9c2:	b002      	add	sp, #8
 800b9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	4770      	bx	lr
 800b9cc:	20000068 	.word	0x20000068

0800b9d0 <abort>:
 800b9d0:	b508      	push	{r3, lr}
 800b9d2:	2006      	movs	r0, #6
 800b9d4:	f000 f834 	bl	800ba40 <raise>
 800b9d8:	2001      	movs	r0, #1
 800b9da:	f7f6 f89f 	bl	8001b1c <_exit>

0800b9de <_malloc_usable_size_r>:
 800b9de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9e2:	1f18      	subs	r0, r3, #4
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	bfbc      	itt	lt
 800b9e8:	580b      	ldrlt	r3, [r1, r0]
 800b9ea:	18c0      	addlt	r0, r0, r3
 800b9ec:	4770      	bx	lr

0800b9ee <_raise_r>:
 800b9ee:	291f      	cmp	r1, #31
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	460d      	mov	r5, r1
 800b9f6:	d904      	bls.n	800ba02 <_raise_r+0x14>
 800b9f8:	2316      	movs	r3, #22
 800b9fa:	6003      	str	r3, [r0, #0]
 800b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ba00:	bd38      	pop	{r3, r4, r5, pc}
 800ba02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba04:	b112      	cbz	r2, 800ba0c <_raise_r+0x1e>
 800ba06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba0a:	b94b      	cbnz	r3, 800ba20 <_raise_r+0x32>
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 f831 	bl	800ba74 <_getpid_r>
 800ba12:	462a      	mov	r2, r5
 800ba14:	4601      	mov	r1, r0
 800ba16:	4620      	mov	r0, r4
 800ba18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba1c:	f000 b818 	b.w	800ba50 <_kill_r>
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d00a      	beq.n	800ba3a <_raise_r+0x4c>
 800ba24:	1c59      	adds	r1, r3, #1
 800ba26:	d103      	bne.n	800ba30 <_raise_r+0x42>
 800ba28:	2316      	movs	r3, #22
 800ba2a:	6003      	str	r3, [r0, #0]
 800ba2c:	2001      	movs	r0, #1
 800ba2e:	e7e7      	b.n	800ba00 <_raise_r+0x12>
 800ba30:	2400      	movs	r4, #0
 800ba32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba36:	4628      	mov	r0, r5
 800ba38:	4798      	blx	r3
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	e7e0      	b.n	800ba00 <_raise_r+0x12>
	...

0800ba40 <raise>:
 800ba40:	4b02      	ldr	r3, [pc, #8]	; (800ba4c <raise+0xc>)
 800ba42:	4601      	mov	r1, r0
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	f7ff bfd2 	b.w	800b9ee <_raise_r>
 800ba4a:	bf00      	nop
 800ba4c:	20000068 	.word	0x20000068

0800ba50 <_kill_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_kill_r+0x20>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f7f6 f84d 	bl	8001afc <_kill>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d102      	bne.n	800ba6c <_kill_r+0x1c>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b103      	cbz	r3, 800ba6c <_kill_r+0x1c>
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	200074bc 	.word	0x200074bc

0800ba74 <_getpid_r>:
 800ba74:	f7f6 b83a 	b.w	8001aec <_getpid>

0800ba78 <_init>:
 800ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7a:	bf00      	nop
 800ba7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7e:	bc08      	pop	{r3}
 800ba80:	469e      	mov	lr, r3
 800ba82:	4770      	bx	lr

0800ba84 <_fini>:
 800ba84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba86:	bf00      	nop
 800ba88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba8a:	bc08      	pop	{r3}
 800ba8c:	469e      	mov	lr, r3
 800ba8e:	4770      	bx	lr
